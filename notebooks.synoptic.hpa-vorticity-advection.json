{"version":2,"kind":"Notebook","sha256":"a5fb12aa4b2b82fe57289d8c93dcac0949eec59fdd1c2f1af625608bf31b6cea","slug":"notebooks.synoptic.hpa-vorticity-advection","location":"/notebooks/synoptic/500hPa_Vorticity_Advection.ipynb","dependencies":[],"frontmatter":{"title":"500 hPa Vorticity Advection","content_includes_title":false,"kernelspec":{"name":"python3","display_name":"Python 3 (ipykernel)","language":"python"},"authors":[{"nameParsed":{"literal":"MetPy Maintainers","given":"MetPy","family":"Maintainers"},"name":"MetPy Maintainers","id":"contributors-myst-generated-uid-0"}],"open_access":true,"license":{"content":{"id":"CC-BY-4.0","url":"https://creativecommons.org/licenses/by/4.0/","name":"Creative Commons Attribution 4.0 International","free":true,"CC":true},"code":{"id":"Apache-2.0","url":"https://opensource.org/licenses/Apache-2.0","name":"Apache License 2.0","free":true,"osi":true}},"github":"https://github.com/projectpythia/metpy-cookbook","copyright":"2025","affiliations":[{"id":"UAlbany","name":"University at Albany (SUNY)","department":"Atmospheric and Environmental Sciences","url":"https://www.albany.edu/daes"},{"id":"CISL","name":"NSF National Center for Atmospheric Research","department":"Computational and Information Systems Lab","url":"https://www.cisl.ucar.edu"},{"id":"Unidata","name":"NSF Unidata","url":"https://www.unidata.ucar.edu"},{"id":"Argonne","name":"Argonne National Laboratory","department":"Environmental Science Division","url":"https://www.anl.gov/evs"},{"id":"CarbonPlan","name":"CarbonPlan","url":"https://carbonplan.org"},{"id":"NVIDIA","name":"NVIDIA Corporation","url":"https://www.nvidia.com/"}],"settings":{"output_matplotlib_strings":"remove"},"numbering":{"title":{"offset":2}},"edit_url":"https://github.com/projectpythia/metpy-cookbook/blob/main/notebooks/synoptic/500hPa_Vorticity_Advection.ipynb","exports":[{"format":"ipynb","filename":"500hPa_Vorticity_Advection.ipynb","url":"/metpy-cookbook/build/500hPa_Vorticity_Adv-711f10b8830bc4aae3e571cc18058f71.ipynb"}]},"widgets":{},"mdast":{"type":"root","children":[{"type":"block","kind":"notebook-content","data":{"cell_marker":"\"\"\""},"children":[{"type":"paragraph","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"Plot an 500-hPa map with calculating vorticity advection using MetPy calculations.","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"NmcGmN6Q3L"}],"key":"KtxlVb5pCe"},{"type":"paragraph","position":{"start":{"line":6,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"Beyond just plotting 500-hPa level data, this uses calculations from ","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"aPZFW6yre8"},{"type":"inlineCode","value":"metpy.calc","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"RFjcDOgmCt"},{"type":"text","value":" to find\nthe vorticity and vorticity advection. Currently, this needs an extra helper function to\ncalculate the distance between lat/lon grid points.","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"AyInyCfTGc"}],"key":"IwdqrvEv3H"}],"key":"uZKzsBo4oE"},{"type":"block","kind":"notebook-content","data":{"cell_marker":"########################################","lines_to_next_cell":0},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Imports","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"sLlMo8SbhP"}],"key":"LXd4zeoeGU"}],"key":"UnnDLcohSA"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"from datetime import datetime\n\nimport cartopy.crs as ccrs\nimport cartopy.feature as cfeature\nimport matplotlib.pyplot as plt\nimport metpy.calc as mpcalc\nfrom metpy.units import units\nimport numpy as np\nfrom siphon.catalog import TDSCatalog\nfrom xarray.backends import NetCDF4DataStore\nimport xarray as xr","key":"nOgjAKUtHS"},{"type":"output","id":"7aV2kiqyMRy7hd34KOjro","data":[],"key":"hj9O5XUjQH"}],"key":"n4IgA6XQTD"},{"type":"block","kind":"notebook-content","data":{"cell_marker":"######################################################################"},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Function to Compute Earth-Relative Winds","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"fc2PJ9fO2Y"}],"identifier":"function-to-compute-earth-relative-winds","label":"Function to Compute Earth-Relative Winds","html_id":"function-to-compute-earth-relative-winds","implicit":true,"key":"brQY5qy9qg"},{"type":"paragraph","position":{"start":{"line":4,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"This function takes a data array with relevant information about the\nprojection of the wind component data, along with the grid-relative\ncomponents of the wind. It outputs the earth-relative components of the\nwind.","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"xYitBkEtIw"}],"key":"qQBe0cAhks"}],"key":"TwHokQ5OIw"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"def earth_relative_wind_components(ugrd, vgrd):\n    \"\"\"Calculate the north-relative components of the\n    wind from the grid-relative components using Cartopy\n    transform_vectors.\n\n    Parameters\n    ----------\n        ugrd : Xarray DataArray (M, N)\n            grid relative u-component of the wind\n        vgrd : Xarray DataArray (M, N)\n            grid relative v-component of the wind\n\n    Returns\n    -------\n        unr, vnr : tuple of array-like Quantity\n            The north-relative wind components in the X (East-West)\n            and Y (North-South) directions, respectively.\n    \"\"\"\n    if 'metpy_crs' not in ugrd.coords:\n        raise ValueError('No CRS in coordinate, be sure to use'\n                         'the MetPy accessor parse_cf()')\n\n    data_crs = ugrd.metpy.cartopy_crs\n\n    x = ugrd.x.values\n    y = ugrd.y.values\n\n    xx, yy = np.meshgrid(x, y)\n\n    ut, vt = ccrs.PlateCarree().transform_vectors(data_crs, xx, yy,\n                                                  ugrd.values, vgrd.values)\n\n    # Make a copy of u and v component DataArrays\n    uer = ugrd.copy()\n    ver = vgrd.copy()\n\n    # Update values with transformed winds\n    uer.values = ut\n    ver.values = vt\n\n    return uer, ver\n","key":"RayR0eh3qr"},{"type":"output","id":"prfjY0zBlYgV4UTFq5sCc","data":[],"key":"AHo0cfwHzW"}],"key":"I5rID0ns8P"},{"type":"block","kind":"notebook-content","data":{"cell_marker":"#######################################"},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Data Aquisition","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"of54nfs54R"}],"identifier":"data-aquisition","label":"Data Aquisition","html_id":"data-aquisition","implicit":true,"key":"mv3p7AyKY3"}],"key":"cYXLOk62PH"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"dt = datetime(2016, 4, 16, 18)\n\n# Assemble our URL to the THREDDS Data Server catalog,\n# and access our desired dataset within via NCSS\nbase_url = 'https://www.ncei.noaa.gov/thredds/catalog/model-namanl-old/'\ncat = TDSCatalog(f'{base_url}{dt:%Y%m}/{dt:%Y%m%d}/catalog.xml')\nncss = cat.datasets[f'namanl_218_{dt:%Y%m%d}_{dt:%H}00_000.grb'].subset()\n\n# Query for Latest GFS Run\nquery = ncss.query()\n\nquery.time(dt)\nquery.accept('netcdf')\nquery.variables('Geopotential_height_isobaric',\n                'u-component_of_wind_isobaric',\n                'v-component_of_wind_isobaric')\n\n# Obtain our queried data\ndata = ncss.get_data(query)\nds_data = xr.open_dataset(NetCDF4DataStore(data)).metpy.parse_cf()\nds = ds_data.metpy.assign_latitude_longitude()\n\ntimes = ds.Geopotential_height_isobaric.metpy.time\nvtime = times.values.squeeze().astype('datetime64[ms]').astype('O')\n\nlev_500 = 500 * units.hPa\n\nhght_500 = ds.Geopotential_height_isobaric.metpy.sel(\n    vertical=lev_500).squeeze()\nhght_500 = mpcalc.smooth_gaussian(hght_500, 4)\n\nuwnd_500 = ds['u-component_of_wind_isobaric'].metpy.sel(\n    vertical=lev_500).squeeze()\nvwnd_500 = ds['v-component_of_wind_isobaric'].metpy.sel(\n    vertical=lev_500).squeeze()\n\n# Compute north-relative wind components for calculation purposes\nuwnd_500er, vwnd_500er = earth_relative_wind_components(uwnd_500, vwnd_500)","key":"jR7Tt9fH93"},{"type":"output","id":"dkcqDSSMhk8SzfYtCH86b","data":[],"key":"HOzpyH02rF"}],"key":"oE4eIHgRdx"},{"type":"block","kind":"notebook-content","data":{"cell_marker":"#######################################"},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Begin Data Calculations","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"UIKZSL8H5b"}],"identifier":"begin-data-calculations","label":"Begin Data Calculations","html_id":"begin-data-calculations","implicit":true,"key":"bCxlIDjBbG"}],"key":"eEWPXAy48r"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"avor = mpcalc.vorticity(uwnd_500er, vwnd_500er)\n\navor = mpcalc.smooth_n_point(avor, 9, 10) * 1e5\n\nvort_adv = mpcalc.advection(avor, uwnd_500er, vwnd_500er) * 1e4","key":"wNMO96ZNt3"},{"type":"output","id":"xjzryDTgYgJmkKYEA22P3","data":[{"output_type":"stream","name":"stderr","text":"/tmp/ipykernel_3601/3729036084.py:5: UserWarning: Vertical dimension number not found. Defaulting to (..., Z, Y, X) order.\n  vort_adv = mpcalc.advection(avor, uwnd_500er, vwnd_500er) * 1e4\n"}],"key":"H6GUo8LmiV"}],"key":"Ejn05IWzTX"},{"type":"block","kind":"notebook-content","data":{"cell_marker":"#######################################"},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Map Creation","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"FsqNVcdToP"}],"identifier":"map-creation","label":"Map Creation","html_id":"map-creation","implicit":true,"key":"B9HcDVe7ot"}],"key":"nOsi70OP1M"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Set up Coordinate System for Plot and Transforms\ndatacrs = ds.Geopotential_height_isobaric.metpy.cartopy_crs\nplotcrs = ccrs.LambertConformal(central_latitude=45., central_longitude=-100.,\n                                standard_parallels=[30, 60])\n\nfig = plt.figure(1, figsize=(12., 14.))\nax = plt.subplot(111, projection=plotcrs)\n\n# Plot Titles\nplt.title(r'500-hPa Heights (m), AVOR$*10^5$ ($s^{-1}$),'\n          'AVOR Adv$*10^9$ ($s^{-2}$)', loc='left')\nplt.title(f'VALID: {vtime}', loc='right')\n\n# Plot Background\nax.set_extent([235., 290., 20., 58.], ccrs.PlateCarree())\nax.coastlines('50m', edgecolor='black', linewidth=0.75)\nax.add_feature(cfeature.STATES, linewidth=.5)\n\n# Plot Height Contours\nclev500 = np.arange(5100, 6061, 60)\ncs = ax.contour(hght_500.longitude, hght_500.latitude,\n                hght_500, clev500,\n                colors='black', linewidths=1.0,\n                linestyles='solid', transform=ccrs.PlateCarree())\nplt.clabel(cs, fontsize=10, inline=1, inline_spacing=10, fmt='%i',\n           rightside_up=True, use_clabeltext=True)\n\n# Plot Absolute Vorticity Contours\nclevvort500 = np.arange(-9, 50, 5)\ncs2 = ax.contour(avor.longitude, avor.latitude,\n                 avor, clevvort500,\n                 colors='grey', linewidths=1.25, linestyles='dashed',\n                 transform=ccrs.PlateCarree())\nplt.clabel(cs2, fontsize=10, inline=1, inline_spacing=10, fmt='%i',\n           rightside_up=True, use_clabeltext=True)\n\n# Plot Colorfill of Vorticity Advection\nclev_avoradv = np.arange(-30, 31, 5)\ncf = ax.contourf(vort_adv.longitude, vort_adv.latitude, vort_adv,\n                 clev_avoradv[clev_avoradv != 0], extend='both',\n                 cmap='bwr', transform=ccrs.PlateCarree())\ncb = plt.colorbar(cf, orientation='horizontal', pad=0, aspect=50,\n                  extendrect='True', ticks=clev_avoradv)\ncb.set_label(r'$1/s^2$', size='large')\n\n# Plot Wind Barbs\n# Transform Vectors and plot wind barbs.\nwind_slice = (slice(None, None, 20), slice(None, None, 20))\nxx, yy = np.meshgrid(uwnd_500.x.values[wind_slice[0]],\n                     uwnd_500.y.values[wind_slice[0]])\nax.barbs(xx, yy, uwnd_500.values[wind_slice], vwnd_500.values[wind_slice],\n         length=6, pivot='middle', transform=datacrs)","key":"QttQUuayOB"},{"type":"output","id":"5XZXm0XpYcm1MISW8_d1B","data":[{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 1200x1400 with 2 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"3f170248963bc2e28fcce62e0e739b4c","path":"/metpy-cookbook/build/3f170248963bc2e28fcce62e0e739b4c.png"}}}],"key":"oOpj1ph3Xl"}],"key":"w1LOI22vqt"}],"key":"PlpbbVcCVw"},"references":{"cite":{"order":[],"data":{}}},"footer":{"navigation":{"prev":{"title":"500 hPa Geopotential Heights, Absolute Vorticity, and Winds","url":"/notebooks/synoptic/hpa-absolute-vorticity-winds","group":"The MetPy Gallery"},"next":{"title":"850-hPa Geopotential Heights, Temperature, Frontogenesis, and Winds","url":"/notebooks/synoptic/hpa-frontogenesis","group":"The MetPy Gallery"}}},"domain":"http://localhost:3000"}