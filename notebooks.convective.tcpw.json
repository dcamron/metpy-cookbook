{"version":2,"kind":"Notebook","sha256":"dd6726a3ed9beee9152ef4cc9612acdaa53a0f395c139e782e6067efbc26f3ec","slug":"notebooks.convective.tcpw","location":"/notebooks/convective/TCPW.ipynb","dependencies":[],"frontmatter":{"title":"Total Column Precipitable Water (TCPW)","content_includes_title":false,"kernelspec":{"name":"python3","display_name":"Python 3 (ipykernel)","language":"python"},"authors":[{"nameParsed":{"literal":"MetPy Maintainers","given":"MetPy","family":"Maintainers"},"name":"MetPy Maintainers","id":"contributors-myst-generated-uid-0"}],"open_access":true,"license":{"content":{"id":"CC-BY-4.0","url":"https://creativecommons.org/licenses/by/4.0/","name":"Creative Commons Attribution 4.0 International","free":true,"CC":true},"code":{"id":"Apache-2.0","url":"https://opensource.org/licenses/Apache-2.0","name":"Apache License 2.0","free":true,"osi":true}},"github":"https://github.com/projectpythia/metpy-cookbook","copyright":"2025","affiliations":[{"id":"UAlbany","name":"University at Albany (SUNY)","department":"Atmospheric and Environmental Sciences","url":"https://www.albany.edu/daes"},{"id":"CISL","name":"NSF National Center for Atmospheric Research","department":"Computational and Information Systems Lab","url":"https://www.cisl.ucar.edu"},{"id":"Unidata","name":"NSF Unidata","url":"https://www.unidata.ucar.edu"},{"id":"Argonne","name":"Argonne National Laboratory","department":"Environmental Science Division","url":"https://www.anl.gov/evs"},{"id":"CarbonPlan","name":"CarbonPlan","url":"https://carbonplan.org"},{"id":"NVIDIA","name":"NVIDIA Corporation","url":"https://www.nvidia.com/"}],"settings":{"output_matplotlib_strings":"remove"},"numbering":{"title":{"offset":2}},"edit_url":"https://github.com/projectpythia/metpy-cookbook/blob/main/notebooks/convective/TCPW.ipynb","exports":[{"format":"ipynb","filename":"TCPW.ipynb","url":"/metpy-cookbook/build/TCPW-b3299a8c094486f20a6ac18971dadb5f.ipynb"}]},"widgets":{},"mdast":{"type":"root","children":[{"type":"block","kind":"notebook-content","data":{"cell_marker":"\"\"\"","lines_to_next_cell":0},"children":[{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Calculate TCPW on a grid of netCDF data using MetPy.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"jN9AMW8hej"}],"key":"lxczqXuyxW"}],"key":"LD2tTM4Ae1"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"import metpy.calc as mpcalc\nimport xarray as xr\nimport numpy as np\nfrom metpy.calc import cape_cin, surface_based_cape_cin, dewpoint_from_specific_humidity, parcel_profile,relative_humidity_from_specific_humidity,most_unstable_cape_cin, precipitable_water \nfrom metpy.units import units\nimport matplotlib.pyplot as plt\nimport cartopy.crs as ccrs\nimport cartopy.feature as cfeature","key":"kdDInBHVBp"},{"type":"output","id":"DJ-zE8ZmEuGkJyGLBW-xJ","data":[],"key":"hchW6qelvz"}],"key":"hxfarVOiXr"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"## opening NetCDF file using xarray \n\nds = xr.open_dataset(\"NETCDF_FILE.nc\", decode_times=True)","key":"x9xdBzHAdf"},{"type":"output","id":"DbR9Ii40tqKG2auF_BCpK","data":[],"key":"mue4276RB8"}],"key":"sv7Qb4U0zs"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"ds","key":"aKtbmglYvu"},{"type":"output","id":"Lx1e6G1R0ZhDYQ1xQlHZm","data":[{"output_type":"execute_result","execution_count":3,"metadata":{},"data":{"text/plain":{"content":"<xarray.Dataset> Size: 2MB\nDimensions:  (time: 1, lev: 23, lat: 41, lon: 71)\nCoordinates:\n  * time     (time) datetime64[ns] 8B 2019-06-08\n  * lon      (lon) float64 568B -130.5 -129.5 -128.5 ... -62.5 -61.5 -60.5\n  * lat      (lat) float64 328B 20.5 21.5 22.5 23.5 24.5 ... 57.5 58.5 59.5 60.5\n  * lev      (lev) float64 184B 1e+03 975.0 950.0 925.0 ... 300.0 250.0 200.0\nData variables:\n    H        (time, lev, lat, lon) float32 268kB ...\n    OMEGA    (time, lev, lat, lon) float32 268kB ...\n    PS       (time, lat, lon) float32 12kB ...\n    QV       (time, lev, lat, lon) float32 268kB ...\n    SLP      (time, lat, lon) float32 12kB ...\n    T        (time, lev, lat, lon) float32 268kB ...\n    U        (time, lev, lat, lon) float32 268kB ...\n    V        (time, lev, lat, lon) float32 268kB ...\nAttributes: (12/33)\n    CDI:                               Climate Data Interface version 1.9.8 (...\n    Conventions:                       CF-1\n    History:                           Original file generated: Tue Jun 18 21...\n    Comment:                           GMAO filename: d5124_m2_jan10.inst3_3d...\n    Filename:                          MERRA2_400.inst3_3d_asm_Np.20190608.nc4\n    Institution:                       NASA Global Modeling and Assimilation ...\n    ...                                ...\n    RangeBeginningTime:                00:00:00.000000\n    RangeEndingDate:                   2019-06-08\n    RangeEndingTime:                   21:00:00.000000\n    history_L34RS:                     'Created by L34RS v1.4.3 @ NASA GES DI...\n    CDO:                               Climate Data Operators version 1.9.8 (...\n    cdo_openmp_thread_number:          12","content_type":"text/plain"},"text/html":{"content_type":"text/html","hash":"e5c4f528c863ee8c8ae46a9241ae0fec","path":"/metpy-cookbook/build/e5c4f528c863ee8c8ae46a9241ae0fec.html"}}}],"key":"dQMjjTt7Yn"}],"key":"gfMeRIrudh"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"#### making a function to slice the xarray dataset according to our need.\ndef slicer (data,lat1, lat2, lon1, lon2, time1,time2) :\n    sliced_data = data.sel(lat =slice(lat1, lat2), lon = slice(lon1, lon2),time = slice(time1, time2))\n    return sliced_data","key":"NMAbHo4oK2"},{"type":"output","id":"WcDtFFwu3Pq2VhsTUIvye","data":[],"key":"OmlU5labts"}],"key":"lbXkOk9Iji"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"#slicing the data for CONUS only\n\nnew_data = slicer(ds,23.5,50.5,-125.5,-66.5, ds.time[0], ds.time[0])","key":"ymOqolQS3Y"},{"type":"output","id":"dWRowb9w2XlKlYGdpf5fk","data":[],"key":"Hz7O9cjYrI"}],"key":"oAiJmKGq2d"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"new_data","key":"cUGDMbgZi6"},{"type":"output","id":"srZSaC2KWKwOJxZvYWZL2","data":[{"output_type":"execute_result","execution_count":6,"metadata":{},"data":{"text/plain":{"content":"<xarray.Dataset> Size: 942kB\nDimensions:  (time: 1, lev: 23, lat: 28, lon: 60)\nCoordinates:\n  * time     (time) datetime64[ns] 8B 2019-06-08\n  * lon      (lon) float64 480B -125.5 -124.5 -123.5 ... -68.5 -67.5 -66.5\n  * lat      (lat) float64 224B 23.5 24.5 25.5 26.5 27.5 ... 47.5 48.5 49.5 50.5\n  * lev      (lev) float64 184B 1e+03 975.0 950.0 925.0 ... 300.0 250.0 200.0\nData variables:\n    H        (time, lev, lat, lon) float32 155kB ...\n    OMEGA    (time, lev, lat, lon) float32 155kB ...\n    PS       (time, lat, lon) float32 7kB ...\n    QV       (time, lev, lat, lon) float32 155kB ...\n    SLP      (time, lat, lon) float32 7kB ...\n    T        (time, lev, lat, lon) float32 155kB ...\n    U        (time, lev, lat, lon) float32 155kB ...\n    V        (time, lev, lat, lon) float32 155kB ...\nAttributes: (12/33)\n    CDI:                               Climate Data Interface version 1.9.8 (...\n    Conventions:                       CF-1\n    History:                           Original file generated: Tue Jun 18 21...\n    Comment:                           GMAO filename: d5124_m2_jan10.inst3_3d...\n    Filename:                          MERRA2_400.inst3_3d_asm_Np.20190608.nc4\n    Institution:                       NASA Global Modeling and Assimilation ...\n    ...                                ...\n    RangeBeginningTime:                00:00:00.000000\n    RangeEndingDate:                   2019-06-08\n    RangeEndingTime:                   21:00:00.000000\n    history_L34RS:                     'Created by L34RS v1.4.3 @ NASA GES DI...\n    CDO:                               Climate Data Operators version 1.9.8 (...\n    cdo_openmp_thread_number:          12","content_type":"text/plain"},"text/html":{"content_type":"text/html","hash":"fb6e53466f29db2dc5c40552e94d4334","path":"/metpy-cookbook/build/fb6e53466f29db2dc5c40552e94d4334.html"}}}],"key":"c9tYA7iwre"}],"key":"yyOCHLwnXL"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"##extracting temperature, pressure  and specific humidity from the dataset\np =new_data.lev*units('hPa')\nT = new_data.T\nsh =  new_data.QV*units('dimensionless')\n\n\nTCPW = np.zeros((1, 28, 60),dtype=float)\n\n###calculating TCPW in multidimension\n\nfor h in range (len(new_data.time)):\n    for i in range (len(new_data.lat)):\n        for j in range(len(new_data.lon)):\n\n\n            TC = (T[h,:,i,j]-(273.15))*units('degC')\n            Td = dewpoint_from_specific_humidity(np.array(p)*units('hPa'),TC, sh[h,:,i,j])\n\n            TPW_S = precipitable_water(np.array(p)*units('hPa'), np.array(Td)*units('degC'))\n            TCPW[h,i,j] = TPW_S.magnitude\n                \n         \n\n\n","key":"lO4D3zXCTe"},{"type":"output","id":"K-KvuU4go61A5Pd7cOlzM","data":[],"key":"mzuNSbkCxq"}],"key":"w7bNN1e3Io"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"TCPW","key":"Dv4h8X5pfs"},{"type":"output","id":"zJtNXspJCkMT61DkYvTK8","data":[{"output_type":"execute_result","execution_count":8,"metadata":{},"data":{"text/plain":{"content":"array([[[22.33904328, 22.13514006, 21.65314758, ..., 49.16251238,\n         48.16421028, 47.52806178],\n        [21.69776415, 21.15994415, 20.12837013, ..., 45.6115163 ,\n         45.29600502, 44.49049573],\n        [20.60370483, 20.2902779 , 19.38095387, ..., 40.41971515,\n         39.48164667, 40.0572096 ],\n        ...,\n        [15.19375194, 16.69203318, 16.68316602, ..., 14.95516252,\n         16.0881911 , 16.27202346],\n        [15.93827239, 15.43163369, 16.34822017, ..., 13.12592686,\n         13.85348823, 14.24460194],\n        [14.43932076, 14.92929048, 11.26527078, ...,  9.54927061,\n         11.22804845, 13.29490269]]], shape=(1, 28, 60))","content_type":"text/plain"}}}],"key":"XwdCa2DRR1"}],"key":"sE01TVFDIU"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"dataproj = ccrs. PlateCarree ()\n# # Plot projection\n# # The look you want for the view.\nplotproj = ccrs. PlateCarree ()\nfig=plt.figure(1, figsize=(15.,12.))\n\nax=plt.subplot(111,projection=plotproj)\n\nax.add_feature(cfeature.COASTLINE, linewidth=0.5)\nax.add_feature(cfeature.STATES, linewidth=0.5)\nplt.title(\"Total Column Precipitable Water Calculated Using Metpy (mm)\",size = 30)\nplt.contourf (new_data.lon, new_data.lat, TCPW[0,:,:],levels =np.arange(0,70,5),cmap = \"PuBuGn\", transform=dataproj,extend = \"max\")\nplt.colorbar (orientation = \"horizontal\", pad=0.01).ax.tick_params(labelsize=20)\nplt. show ()","key":"Ir9bhCjIKC"},{"type":"output","id":"RdjpuGt6bhsxTl4GNub29","data":[{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 1500x1200 with 2 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"cae72077709d52c616ef8df4c9397b10","path":"/metpy-cookbook/build/cae72077709d52c616ef8df4c9397b10.png"}}}],"key":"dXdS0gSrhd"}],"key":"viOwMUnc53"}],"key":"Wa29hdkPKB"},"references":{"cite":{"order":[],"data":{}}},"footer":{"navigation":{"prev":{"title":"Most-Unstable Convective Available Potential Energy (MUCAPE)","url":"/notebooks/convective/mucape","group":"The MetPy Gallery"},"next":{"title":"Specialty Plotting","url":"/notebooks/specialty","group":"The MetPy Gallery"}}},"domain":"http://localhost:3000"}