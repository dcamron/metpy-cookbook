{"version":2,"kind":"Notebook","sha256":"d794deb378f926fff0de79444b461ea25ec2f39f458676082536cd08c3877c84","slug":"notebooks.synoptic.hpa-qvectors","location":"/notebooks/synoptic/850hPa_QVectors.ipynb","dependencies":[],"frontmatter":{"title":"QVector Example","content_includes_title":false,"kernelspec":{"name":"python3","display_name":"Python 3 (ipykernel)","language":"python"},"authors":[{"nameParsed":{"literal":"MetPy Maintainers","given":"MetPy","family":"Maintainers"},"name":"MetPy Maintainers","id":"contributors-myst-generated-uid-0"}],"open_access":true,"license":{"content":{"id":"CC-BY-4.0","url":"https://creativecommons.org/licenses/by/4.0/","name":"Creative Commons Attribution 4.0 International","free":true,"CC":true},"code":{"id":"Apache-2.0","url":"https://opensource.org/licenses/Apache-2.0","name":"Apache License 2.0","free":true,"osi":true}},"github":"https://github.com/projectpythia/metpy-cookbook","copyright":"2025","affiliations":[{"id":"UAlbany","name":"University at Albany (SUNY)","department":"Atmospheric and Environmental Sciences","url":"https://www.albany.edu/daes"},{"id":"CISL","name":"NSF National Center for Atmospheric Research","department":"Computational and Information Systems Lab","url":"https://www.cisl.ucar.edu"},{"id":"Unidata","name":"NSF Unidata","url":"https://www.unidata.ucar.edu"},{"id":"Argonne","name":"Argonne National Laboratory","department":"Environmental Science Division","url":"https://www.anl.gov/evs"},{"id":"CarbonPlan","name":"CarbonPlan","url":"https://carbonplan.org"},{"id":"NVIDIA","name":"NVIDIA Corporation","url":"https://www.nvidia.com/"}],"settings":{"output_matplotlib_strings":"remove"},"numbering":{"title":{"offset":2}},"edit_url":"https://github.com/projectpythia/metpy-cookbook/blob/main/notebooks/synoptic/850hPa_QVectors.ipynb","exports":[{"format":"ipynb","filename":"850hPa_QVectors.ipynb","url":"/metpy-cookbook/build/850hPa_QVectors-fdedbd65a6bec5ca605c8ec7fa6dddd7.ipynb"}]},"widgets":{},"mdast":{"type":"root","children":[{"type":"block","kind":"notebook-content","data":{"cell_marker":"\"\"\""},"children":[{"type":"paragraph","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"Computing Q-vectors and Q-vector divergence for a real case.","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"s0c53WaxKG"}],"key":"CjHAvdI6Wr"},{"type":"paragraph","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"By: Kevin Goebbert","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"hAm4HZ9R8j"}],"key":"cUsrD7DPyo"},{"type":"paragraph","position":{"start":{"line":8,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"text","value":"This example uses GFS output to compute the 850-hPa Q-vectors and\nQ-vector divergence for 12 UTC 26 October 2010.","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"sV8WBlNdVH"}],"key":"EqLGVM1lV9"}],"key":"frEw3afTzf"},{"type":"block","kind":"notebook-content","data":{"cell_marker":"######################################################################"},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Import needed modules","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"a0cOEtUeaR"}],"key":"hPZr629yf1"}],"key":"d1dQae4RD3"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"import cartopy.crs as ccrs\nimport cartopy.feature as cfeature\nimport matplotlib.pyplot as plt\nimport metpy.calc as mpcalc\nfrom metpy.plots import named_areas\nfrom metpy.units import units\nimport numpy as np\nimport xarray as xr","key":"GYXabDNnHA"},{"type":"output","id":"yc9J63uFbHndN5aKSiofh","data":[],"key":"NgWbAT1fjx"}],"key":"yJF5luLdWU"},{"type":"block","kind":"notebook-content","data":{"cell_marker":"######################################################################"},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Use Xarray to access GFS data from THREDDS resource and uses\nmetpy accessor to parse file to make it easy to pull data using\ncommon coordinate names (e.g., vertical) and attach units.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"iHZa9I4El6"}],"key":"XYwWvIa0ny"}],"key":"yx4spd9PfV"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"ds = xr.open_dataset('https://thredds.ucar.edu/thredds/dodsC/casestudies/'\n                     'python-gallery/GFS_20101026_1200.nc')","key":"eaXacym0Xv"},{"type":"output","id":"sSJsbIXxKxui2UPUW3Zh_","data":[],"key":"kDPnGfET1b"}],"key":"T1TpfOvvHO"},{"type":"block","kind":"notebook-content","data":{"cell_marker":"######################################################################"},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Subset data based on latitude and longitude values and select only data\nfrom 850 hPa","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"fFwDgpiXh0"}],"key":"KnD8WSkoEV"}],"key":"ghUdMadhf1"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Set subset slice for the geographic extent of data to limit download\nlon_slice = slice(200, 350)\nlat_slice = slice(85, 10)\n\n# Grab data and smooth using a nine-point filter applied 50 times to grab\n# the synoptic signal\nlevel = 850 * units.hPa\nhght_850 = mpcalc.smooth_n_point(ds.Geopotential_height_isobaric.metpy.sel(\n    vertical=level, lat=lat_slice, lon=lon_slice).squeeze(), 9, 50)\ntmpk_850 = mpcalc.smooth_n_point(ds.Temperature_isobaric.metpy.sel(\n    vertical=level, lat=lat_slice, lon=lon_slice).squeeze(), 9, 25)\nuwnd_850 = mpcalc.smooth_n_point(ds['u-component_of_wind_isobaric'].metpy.sel(\n    vertical=level, lat=lat_slice, lon=lon_slice).squeeze(), 9, 50)\nvwnd_850 = mpcalc.smooth_n_point(ds['v-component_of_wind_isobaric'].metpy.sel(\n    vertical=level, lat=lat_slice, lon=lon_slice).squeeze(), 9, 50)\n\n# Grab lat/lon values (GFS will be 1D) from a subset variable\nlons, lats = hght_850.lon, hght_850.lat\n\n# Convert temperatures to degree Celsius for plotting purposes\ntmpc_850 = tmpk_850.metpy.convert_units('degC')\n\n# Get a sensible datetime format\nvtime = ds.time.data[0].astype('datetime64[ms]').astype('O')","key":"Ta3SFgy0yO"},{"type":"output","id":"iDxskLLSA1B9FhDcaBg7X","data":[],"key":"qEP9aUK3dl"}],"key":"ekUmHkNmZX"},{"type":"block","kind":"notebook-content","data":{"cell_marker":"######################################################################"},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Compute Q-vectors","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"gAkzc7ctwq"}],"identifier":"compute-q-vectors","label":"Compute Q-vectors","html_id":"compute-q-vectors","implicit":true,"key":"naQjoctmyq"},{"type":"paragraph","position":{"start":{"line":4,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Use the MetPy module to compute Q-vectors from requisite data and\nadditionally compute the Q-vector divergence (and multiply by -2) to\ncalculate the right hand side forcing of the Q-G Omega equation.","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"rHMKObTDCN"}],"key":"oK4QUnR4rQ"}],"key":"f6np9T4z0p"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Compute grid spacings for data\n#dx, dy = mpcalc.lat_lon_grid_deltas(lons, lats)\n\n# Compute the Q-vector components\nuqvect, vqvect = mpcalc.q_vector(uwnd_850, vwnd_850, tmpk_850, 850*units.hPa)\n\n# Compute the divergence of the Q-vectors calculated above\nq_div = -2*mpcalc.divergence(uqvect, vqvect)","key":"dDdxczH3M7"},{"type":"output","id":"kUnRF8zk54u4YbTdpxqKN","data":[],"key":"HicNvMn8ht"}],"key":"vq9cpVt4LG"},{"type":"block","kind":"notebook-content","data":{"cell_marker":"######################################################################"},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Plot Data","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"dfcP4JhXjt"}],"identifier":"plot-data","label":"Plot Data","html_id":"plot-data","implicit":true,"key":"hE1CMjdCnI"},{"type":"paragraph","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"Use Cartopy to plot data on a map using a Lambert Conformal projection.","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"LtQPW8Yhc4"}],"key":"LT3XnQMjiL"}],"key":"JcuDYt2G1z"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Set the map projection (how the data will be displayed)\nmapcrs = named_areas['uslcc'].projection\n\n# Set the data project (GFS is lat/lon format)\ndatacrs = ccrs.PlateCarree()\n\n# Start the figure and set an extent to only display a smaller graphics area\nfig = plt.figure(1, figsize=(14, 12))\nax = plt.subplot(111, projection=mapcrs)\nax.set_extent(named_areas['uslcc'].bounds, ccrs.PlateCarree())\n\n# Add map features to plot coastlines and state boundaries\nax.add_feature(cfeature.COASTLINE.with_scale('50m'))\nax.add_feature(cfeature.STATES.with_scale('50m'))\n\n# Plot 850-hPa Q-Vector Divergence and scale\nclevs_850_tmpc = np.arange(-40, 41, 2)\nclevs_qdiv = list(range(-35, -4, 5))+list(range(5, 36, 5))\ncf = ax.contourf(lons, lats, q_div*1e18, clevs_qdiv, cmap=plt.cm.bwr,\n                 extend='both', transform=datacrs)\ncb = plt.colorbar(cf, orientation='horizontal', pad=0, aspect=50,\n                  extendrect=True, ticks=clevs_qdiv)\ncb.set_label('Q-Vector Div. (*10$^{18}$ m s$^{-1}$ kg$^{-1}$)')\n\n# Plot 850-hPa Temperatures\ncsf = ax.contour(lons, lats, tmpc_850, clevs_850_tmpc, colors='grey',\n                 linestyles='dashed', transform=datacrs)\nplt.clabel(csf, fmt='%d')\n\n# Plot 850-hPa Geopotential Heights\nclevs_850_hght = np.arange(0, 8000, 30)\ncs = ax.contour(lons, lats, hght_850, clevs_850_hght, colors='black',\n                transform=datacrs)\nplt.clabel(cs, fmt='%d')\n\n# Plot 850-hPa Q-vectors, scale to get nice sized arrows\nwind_slice = (slice(None, None, 5), slice(None, None, 5))\nax.quiver(lons[wind_slice[0]], lats[wind_slice[1]],\n          uqvect[wind_slice].values,\n          vqvect[wind_slice].values,\n          pivot='mid', color='black',\n          scale=5e-12, scale_units='inches',\n          transform=datacrs)\n\n# Add some titles\nplt.title('850-hPa GFS Geo. Heights (m), Temp (C),'\n          ' and Q-Vectors (m$^2$ kg$^{-1}$ s$^{-1}$)', loc='left')\nplt.title(f'Valid Time: {vtime}', loc='right')","key":"LYiodQrJJl"},{"type":"output","id":"0sQTa-AD27EyKsBrBTKtx","data":[{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 1400x1200 with 2 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"cb66c7b4a4d16b3f05e0910ca91a66ae","path":"/metpy-cookbook/build/cb66c7b4a4d16b3f05e0910ca91a66ae.png"}}}],"key":"igIPPZYFjU"}],"key":"tALyLsn7Zh"}],"key":"an5X3eejHX"},"references":{"cite":{"order":[],"data":{}}},"footer":{"navigation":{"prev":{"title":"850-hPa Geopotential Heights, Temperature, Frontogenesis, and Winds","url":"/notebooks/synoptic/hpa-frontogenesis","group":"The MetPy Gallery"},"next":{"title":"850 hPa Temperature Advection","url":"/notebooks/synoptic/hpa-temperature-advection","group":"The MetPy Gallery"}}},"domain":"http://localhost:3000"}