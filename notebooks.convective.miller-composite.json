{"version":2,"kind":"Notebook","sha256":"1145bf4751416c3af4e795747febd0115cba1528d18ac3cf09dda9e2534911be","slug":"notebooks.convective.miller-composite","location":"/notebooks/convective/miller_composite.ipynb","dependencies":[],"frontmatter":{"title":"Miller Composite Chart","content_includes_title":false,"kernelspec":{"name":"python3","display_name":"Python 3 (ipykernel)","language":"python"},"authors":[{"nameParsed":{"literal":"MetPy Maintainers","given":"MetPy","family":"Maintainers"},"name":"MetPy Maintainers","id":"contributors-myst-generated-uid-0"}],"open_access":true,"license":{"content":{"id":"CC-BY-4.0","url":"https://creativecommons.org/licenses/by/4.0/","name":"Creative Commons Attribution 4.0 International","free":true,"CC":true},"code":{"id":"Apache-2.0","url":"https://opensource.org/licenses/Apache-2.0","name":"Apache License 2.0","free":true,"osi":true}},"github":"https://github.com/projectpythia/metpy-cookbook","copyright":"2025","affiliations":[{"id":"UAlbany","name":"University at Albany (SUNY)","department":"Atmospheric and Environmental Sciences","url":"https://www.albany.edu/daes"},{"id":"CISL","name":"NSF National Center for Atmospheric Research","department":"Computational and Information Systems Lab","url":"https://www.cisl.ucar.edu"},{"id":"Unidata","name":"NSF Unidata","url":"https://www.unidata.ucar.edu"},{"id":"Argonne","name":"Argonne National Laboratory","department":"Environmental Science Division","url":"https://www.anl.gov/evs"},{"id":"CarbonPlan","name":"CarbonPlan","url":"https://carbonplan.org"},{"id":"NVIDIA","name":"NVIDIA Corporation","url":"https://www.nvidia.com/"}],"settings":{"output_matplotlib_strings":"remove"},"numbering":{"title":{"offset":2}},"edit_url":"https://github.com/projectpythia/metpy-cookbook/blob/main/notebooks/convective/miller_composite.ipynb","exports":[{"format":"ipynb","filename":"miller_composite.ipynb","url":"/metpy-cookbook/build/miller_composite-e9e4c8bdd44e407f8be8f442dbc28512.ipynb"}]},"widgets":{},"mdast":{"type":"root","children":[{"type":"block","kind":"notebook-content","data":{"cell_marker":"\"\"\"","lines_to_next_cell":0},"children":[{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"Create a Miller Composite chart based on Miller 1972 in Python with MetPy and\nMatplotlib.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"IJptXxY3PR"}],"key":"iNZIpFPEqE"}],"key":"FWKrcDBjz0"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"from datetime import datetime, timedelta\n\nimport cartopy.crs as ccrs\nimport cartopy.feature as cfeature\nimport matplotlib.lines as lines\nimport matplotlib.patches as mpatches\nimport matplotlib.pyplot as plt\nimport metpy.calc as mpcalc\nimport numpy as np\nimport numpy.ma as ma\n\nfrom metpy.units import units\nfrom netCDF4 import num2date\nfrom scipy.ndimage import gaussian_filter\nfrom siphon.catalog import TDSCatalog\nfrom xarray.backends import NetCDF4DataStore\nimport xarray as xr","key":"aPf47vGYdh"},{"type":"output","id":"LKWlrD8KohC-M6ft80v1r","data":[],"key":"FFIMbJDufQ"}],"key":"SUMQZjKXKK"},{"type":"block","kind":"notebook-content","data":{"cell_marker":"###########################"},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Get the data","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"W1YIaCTpaj"}],"key":"mMzV81yixl"}],"key":"lVMFd7b8ml"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"This example will use data from the North American Mesoscale Model Analysis for 18 UTC 27 April 2011.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"XSZSyXVt3L"}],"key":"WbHYJDfyBQ"}],"key":"g41GvJ9c6X"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Specify our date/time of product desired\ndt = datetime(2011, 4, 27, 18)\n\n# Construct the URL for our THREDDS Data Server Catalog,\n# and access our desired dataset within via NCSS\nbase_url = 'https://www.ncei.noaa.gov/thredds/model-namanl-old/'\ncat = TDSCatalog(f'{base_url}{dt:%Y%m}/{dt:%Y%m%d}/catalog.xml')\nncss = cat.datasets[f'namanl_218_{dt:%Y%m%d}_{dt:%H}00_000.grb'].subset()\n\n# Create our NCSS query with desired specifications\nquery = ncss.query()\nquery.all_times()\nquery.add_lonlat()\nquery.lonlat_box(-135, -60, 15, 65)\nquery.variables('Geopotential_height_isobaric',\n                'u-component_of_wind_isobaric',\n                'v-component_of_wind_isobaric',\n                'Temperature_isobaric',\n                'Relative_humidity_isobaric',\n                'Best_4_layer_lifted_index_layer_between_two_pressure_'\n                'difference_from_ground_layer',\n                'Absolute_vorticity_isobaric',\n                'Pressure_reduced_to_MSL_msl',\n                'Dew_point_temperature_height_above_ground')\n\n# Obtain the data we've queried for\ndata_18z = ncss.get_data(query)\n\n# Make into an xarray Dataset object\nds_18z = xr.open_dataset(NetCDF4DataStore(data_18z)).metpy.parse_cf()\n\n# Assign variable names to collected data\nlat = ds_18z.lat\nlon = ds_18z.lon\n\n# Create more useable times for output\ntimes = ds_18z.Geopotential_height_isobaric.metpy.time.squeeze()\nvtimes = times.values.astype('datetime64[ms]').astype('O')\n\ntemps = ds_18z.Temperature_isobaric.squeeze()\nuwnd = ds_18z['u-component_of_wind_isobaric'].squeeze()\nvwnd = ds_18z['v-component_of_wind_isobaric'].squeeze()\nhgt = ds_18z.Geopotential_height_isobaric.squeeze()\nrelh = ds_18z.Relative_humidity_isobaric.squeeze()\nlifted_index = ds_18z['Best_4_layer_lifted_index_layer_between_two_'\n                      'pressure_difference_from_ground_layer'].squeeze()\nTd_sfc = ds_18z.Dew_point_temperature_height_above_ground.squeeze()\navor = ds_18z.Absolute_vorticity_isobaric.squeeze()\npmsl = ds_18z.Pressure_reduced_to_MSL_msl.squeeze()","key":"x9xZJX4YvV"},{"type":"output","id":"LtwdA_LPMcA0gLKgADkXS","data":[{"output_type":"error","traceback":"\u001b[31m---------------------------------------------------------------------------\u001b[39m\n\u001b[31mHTTPError\u001b[39m                                 Traceback (most recent call last)\n\u001b[36mCell\u001b[39m\u001b[36m \u001b[39m\u001b[32mIn[2]\u001b[39m\u001b[32m, line 7\u001b[39m\n\u001b[32m      4\u001b[39m \u001b[38;5;66;03m# Construct the URL for our THREDDS Data Server Catalog,\u001b[39;00m\n\u001b[32m      5\u001b[39m \u001b[38;5;66;03m# and access our desired dataset within via NCSS\u001b[39;00m\n\u001b[32m      6\u001b[39m base_url = \u001b[33m'\u001b[39m\u001b[33mhttps://www.ncei.noaa.gov/thredds/model-namanl-old/\u001b[39m\u001b[33m'\u001b[39m\n\u001b[32m----> \u001b[39m\u001b[32m7\u001b[39m cat = \u001b[43mTDSCatalog\u001b[49m\u001b[43m(\u001b[49m\u001b[33;43mf\u001b[39;49m\u001b[33;43m'\u001b[39;49m\u001b[38;5;132;43;01m{\u001b[39;49;00m\u001b[43mbase_url\u001b[49m\u001b[38;5;132;43;01m}\u001b[39;49;00m\u001b[38;5;132;43;01m{\u001b[39;49;00m\u001b[43mdt\u001b[49m\u001b[38;5;132;43;01m:\u001b[39;49;00m\u001b[33;43m%Y%m\u001b[39;49m\u001b[38;5;132;43;01m}\u001b[39;49;00m\u001b[33;43m/\u001b[39;49m\u001b[38;5;132;43;01m{\u001b[39;49;00m\u001b[43mdt\u001b[49m\u001b[38;5;132;43;01m:\u001b[39;49;00m\u001b[33;43m%Y%m%d\u001b[39;49m\u001b[38;5;132;43;01m}\u001b[39;49;00m\u001b[33;43m/catalog.xml\u001b[39;49m\u001b[33;43m'\u001b[39;49m\u001b[43m)\u001b[49m\n\u001b[32m      8\u001b[39m ncss = cat.datasets[\u001b[33mf\u001b[39m\u001b[33m'\u001b[39m\u001b[33mnamanl_218_\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mdt\u001b[38;5;132;01m:\u001b[39;00m\u001b[33m%Y%m%d\u001b[39m\u001b[38;5;132;01m}\u001b[39;00m\u001b[33m_\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mdt\u001b[38;5;132;01m:\u001b[39;00m\u001b[33m%H\u001b[39m\u001b[38;5;132;01m}\u001b[39;00m\u001b[33m00_000.grb\u001b[39m\u001b[33m'\u001b[39m].subset()\n\u001b[32m     10\u001b[39m \u001b[38;5;66;03m# Create our NCSS query with desired specifications\u001b[39;00m\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/metpy-cookbook/lib/python3.13/site-packages/siphon/catalog.py:289\u001b[39m, in \u001b[36mTDSCatalog.__init__\u001b[39m\u001b[34m(self, catalog_url)\u001b[39m\n\u001b[32m    287\u001b[39m \u001b[38;5;66;03m# get catalog.xml file\u001b[39;00m\n\u001b[32m    288\u001b[39m resp = \u001b[38;5;28mself\u001b[39m.session.get(catalog_url)\n\u001b[32m--> \u001b[39m\u001b[32m289\u001b[39m \u001b[43mresp\u001b[49m\u001b[43m.\u001b[49m\u001b[43mraise_for_status\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m    291\u001b[39m \u001b[38;5;66;03m# top level server url\u001b[39;00m\n\u001b[32m    292\u001b[39m \u001b[38;5;28mself\u001b[39m.catalog_url = resp.url\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/metpy-cookbook/lib/python3.13/site-packages/requests/models.py:1026\u001b[39m, in \u001b[36mResponse.raise_for_status\u001b[39m\u001b[34m(self)\u001b[39m\n\u001b[32m   1021\u001b[39m     http_error_msg = (\n\u001b[32m   1022\u001b[39m         \u001b[33mf\u001b[39m\u001b[33m\"\u001b[39m\u001b[38;5;132;01m{\u001b[39;00m\u001b[38;5;28mself\u001b[39m.status_code\u001b[38;5;132;01m}\u001b[39;00m\u001b[33m Server Error: \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mreason\u001b[38;5;132;01m}\u001b[39;00m\u001b[33m for url: \u001b[39m\u001b[38;5;132;01m{\u001b[39;00m\u001b[38;5;28mself\u001b[39m.url\u001b[38;5;132;01m}\u001b[39;00m\u001b[33m\"\u001b[39m\n\u001b[32m   1023\u001b[39m     )\n\u001b[32m   1025\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m http_error_msg:\n\u001b[32m-> \u001b[39m\u001b[32m1026\u001b[39m     \u001b[38;5;28;01mraise\u001b[39;00m HTTPError(http_error_msg, response=\u001b[38;5;28mself\u001b[39m)\n\n\u001b[31mHTTPError\u001b[39m: 404 Client Error:  for url: https://www.ncei.noaa.gov/thredds/model-namanl-old/201104/20110427/catalog.xml","ename":"HTTPError","evalue":"404 Client Error:  for url: https://www.ncei.noaa.gov/thredds/model-namanl-old/201104/20110427/catalog.xml"}],"key":"t419rvzccK"}],"key":"Yg5SYMFmV1"},{"type":"block","kind":"notebook-content","data":{"cell_marker":"########################"},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Repeat the above process to query for the analysis from 12 hours earlier (06 UTC) to calculate pressure falls and height change.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"rwREyv8tj7"}],"key":"XIbf3KKvKq"}],"key":"JVCgJunhJU"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"td = timedelta(hours=12)\n\nncss_06z = cat.datasets[f'namanl_218_{dt:%Y%m%d}_{dt-td:%H}00_000.grb'].subset()\n\nquery = ncss_06z.query()\nquery.all_times()\nquery.add_lonlat()\nquery.lonlat_box(-135, -60, 15, 65)\nquery.variables('Geopotential_height_isobaric',\n                'Pressure_reduced_to_MSL_msl')\n\n# Actually getting the data\ndata_06z = ncss_06z.get_data(query)\n\n# Make into an xarray Dataset object\nds_06z = xr.open_dataset(NetCDF4DataStore(data_06z)).metpy.parse_cf()\n\nhgt_06z = ds_06z.Geopotential_height_isobaric.squeeze()\npmsl_06z = ds_06z.Pressure_reduced_to_MSL_msl.squeeze()","key":"wyM89gDv93"},{"type":"output","id":"nyrOof9PpA1F6SkI9kYDR","data":[],"key":"F3FYIBMdfq"}],"key":"z9LleCbz6M"},{"type":"block","kind":"notebook-content","data":{"cell_marker":"###########################"},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Subset the Data","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"OIiKblz2KR"}],"key":"xEkKrFAgph"}],"key":"WUs5ftxJJX"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"With the data pulled in, we will now subset to the specific levels desired","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"Pa2u9fyFoS"}],"key":"uUouZxI15q"}],"key":"nQ3CEwUKYu"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# 300 hPa\nu_300 = uwnd.metpy.sel(vertical=300*units.hPa).metpy.convert_units('kt').squeeze()\nv_300 = vwnd.metpy.sel(vertical=300*units.hPa).metpy.convert_units('kt').squeeze()\n\n# 500 hPa\navor_500 = avor.metpy.sel(vertical=500*units.hPa)\nu_500 = uwnd.metpy.sel(vertical=500*units.hPa).metpy.convert_units('kt').squeeze()\nv_500 = vwnd.metpy.sel(vertical=500*units.hPa).metpy.convert_units('kt').squeeze()\nhgt_500 = hgt.metpy.sel(vertical=500*units.hPa).squeeze()\nhgt_500_06z = hgt_06z.metpy.sel(vertical=500*units.hPa).squeeze()\n\n# 700 hPa\ntmp_700 = temps.metpy.sel(vertical=700*units.hPa).metpy.convert_units('degC').squeeze()\nrh_700 = relh.metpy.sel(vertical=700*units.hPa).squeeze()\n\n# 850 hPa\nu_850 = uwnd.metpy.sel(vertical=850*units.hPa).metpy.convert_units('kt').squeeze()\nv_850 = vwnd.metpy.sel(vertical=850*units.hPa).metpy.convert_units('kt').squeeze()","key":"tfwmsmbO7a"},{"type":"output","id":"OFeb3zgvpNKjIbWGlLphJ","data":[],"key":"v7Vuk3OJD1"}],"key":"fdE8MOIpc9"},{"type":"block","kind":"notebook-content","data":{"cell_marker":"########################################"},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Prepare Variables for Plotting","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"jr7tVRKfdb"}],"key":"jKD4tIfNA6"}],"key":"WBVP5308AU"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"With the data queried and subset, we will make any needed calculations in preparation for\nplotting.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"PTG2SXCwRw"}],"key":"UhpcP1x7sU"},{"type":"paragraph","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"strong","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"The following fields should be plotted:","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"DWagBrFPMW"}],"key":"pb49f7ebhA"}],"key":"Lgqv2z05WE"},{"type":"paragraph","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"500-hPa cyclonic vorticity advection","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"X20BLTewXg"}],"key":"MNAAUlKEwM"},{"type":"paragraph","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"Surface-based Lifted Index","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"mCOVvg21eL"}],"key":"h16Q9ymXjQ"},{"type":"paragraph","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"children":[{"type":"text","value":"The axis of the 300-hPa, 500-hPa, and 850-hPa jets","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"key":"an5u01DWwg"}],"key":"UXTNgXvgzu"},{"type":"paragraph","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"text","value":"Surface dewpoint","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"key":"kOWFhv6NBH"}],"key":"ijoqWh7LUg"},{"type":"paragraph","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"children":[{"type":"text","value":"700-hPa dewpoint depression","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"z6OE9jUpKu"}],"key":"r30HBAxqgO"},{"type":"paragraph","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"children":[{"type":"text","value":"12-hr surface pressure falls and 500-hPa height changes","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"Tb6UX3ffvy"}],"key":"S9a39eij42"}],"key":"PbSfBuWZ0p"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# 500 hPa CVA\nvort_adv_500 = mpcalc.advection(avor_500, u_500, v_500,) * 1e9\nvort_adv_500_smooth = gaussian_filter(vort_adv_500, 4)","key":"TqzIYQxSi6"},{"type":"output","id":"z6Bsfqp1u9QKTNFTXei3V","data":[],"key":"sVpTY8ukV3"}],"key":"bIcvcgD0HP"},{"type":"block","kind":"notebook-content","data":{"cell_marker":"####################################","lines_to_next_cell":0},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"For the jet axes, we will calculate the windspeed at each level, and plot the highest values","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"MHXn4bpVLT"}],"key":"ATXsDf4I6l"}],"key":"hzw0M1RpcX"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"wspd_300 = gaussian_filter(mpcalc.wind_speed(u_300, v_300), 5)\nwspd_500 = gaussian_filter(mpcalc.wind_speed(u_500, v_500), 5)\nwspd_850 = gaussian_filter(mpcalc.wind_speed(u_850, v_850), 5)","key":"TTJGuqNS3F"},{"type":"output","id":"l0gcpnaN_-4FjuTI2pM4x","data":[],"key":"V1tSvNRrMx"}],"key":"SmZ3hpSWPV"},{"type":"block","kind":"notebook-content","data":{"cell_marker":"################################","lines_to_next_cell":0},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"700-hPa dewpoint depression will be calculated from Temperature_isobaric and RH","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"LtnaE3Jsur"}],"key":"sEOWLpzXFu"}],"key":"Johuk92uhP"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"Td_dep_700 = tmp_700 - mpcalc.dewpoint_from_relative_humidity(tmp_700, rh_700)","key":"XHuHOTavfZ"},{"type":"output","id":"qCO6Bp822Dyrxj6xwgg2O","data":[],"key":"E0ojBNYO9O"}],"key":"rEVBv1XzU2"},{"type":"block","kind":"notebook-content","data":{"cell_marker":"######################################","lines_to_next_cell":0},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"12-hr surface pressure falls and 500-hPa height changes","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"yzasIpAXNP"}],"key":"QyJpMB9cxB"}],"key":"hnt63KIhdr"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"pmsl_change = pmsl.metpy.quantify() - pmsl_06z.metpy.quantify()\nhgt_500_change = hgt_500.metpy.quantify() - hgt_500_06z.metpy.quantify()","key":"nTmlEBorTq"},{"type":"output","id":"KYd7oWbHBCqlS1cNcnKHy","data":[],"key":"H7VD8JWTUx"}],"key":"lu6Wiu4EWA"},{"type":"block","kind":"notebook-content","data":{"cell_marker":"######################################"},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"To plot the jet axes, we will mask the wind fields below the upper 1/3 of windspeed.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"VSfm5x5D28"}],"key":"Z9mHSoiMDA"}],"key":"pq7JmrU1iW"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# 500 hPa\nu_500_masked = u_500.where(wspd_500 > 0.66 * wspd_500.max(), np.nan)\nv_500_masked = v_500.where(wspd_500 > 0.66 * wspd_500.max(), np.nan)\n\n# 300 hPa\nu_300_masked = u_300.where(wspd_300 > 0.66 * wspd_300.max(), np.nan)\nv_300_masked = v_300.where(wspd_300 > 0.66 * wspd_300.max(), np.nan)\n\n# 850 hPa\nu_850_masked = u_850.where(wspd_850 > 0.66 * wspd_850.max(), np.nan)\nv_850_masked = v_850.where(wspd_850 > 0.66 * wspd_850.max(), np.nan)","key":"L9XEzznMVO"},{"type":"output","id":"_WdQ1wbHmJ2izE9MrVDFA","data":[],"key":"OSF7tdo5Ux"}],"key":"CkoXbu5z2p"},{"type":"block","kind":"notebook-content","data":{"cell_marker":"################################"},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Create the Plot","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"YQxI64a0Ef"}],"key":"WemtYrfde4"}],"key":"FjSRsHjjrr"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"With the data now ready, we will create the plot","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"Psb3wILeps"}],"key":"K1dfVBPUtm"}],"key":"dUETF1Wqo8"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Set up our projection\ncrs = ccrs.LambertConformal(central_longitude=-100.0, central_latitude=45.0)\n\n# Coordinates to limit map area\nbounds = [-122., -75., 25., 50.]","key":"AdbPESGRJy"},{"type":"output","id":"GejGHx-O7BJVL2Meocast","data":[],"key":"FRfhNZ1KKb"}],"key":"UpzUnOFnoJ"},{"type":"block","kind":"notebook-content","data":{"cell_marker":"#########################","lines_to_next_cell":0},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Plot the composite","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"FL0jI7xpMS"}],"key":"OBnM6rbTcE"}],"key":"cy1UdC3aHK"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"fig = plt.figure(1, figsize=(17, 12))\nax = fig.add_subplot(1, 1, 1, projection=crs)\nax.set_extent(bounds, crs=ccrs.PlateCarree())\nax.coastlines('50m', edgecolor='black', linewidth=0.75)\nax.add_feature(cfeature.STATES, linewidth=0.25)\n\n# Plot Lifted Index\ncs1 = ax.contour(lon, lat, lifted_index, range(-8, -2, 2), transform=ccrs.PlateCarree(),\n                 colors='red', linewidths=0.75, linestyles='solid', zorder=7)\ncs1.clabel(fontsize=10, inline=1, inline_spacing=7,\n           fmt='%i', rightside_up=True, use_clabeltext=True)\n\n# Plot Surface pressure falls\ncs2 = ax.contour(lon, lat, pmsl_change.metpy.convert_units('hPa'), range(-10, -1, 4),\n                 transform=ccrs.PlateCarree(),\n                 colors='k', linewidths=0.75, linestyles='dashed', zorder=6)\ncs2.clabel(fontsize=10, inline=1, inline_spacing=7,\n           fmt='%i', rightside_up=True, use_clabeltext=True)\n\n# Plot 500-hPa height falls\ncs3 = ax.contour(lon, lat, hgt_500_change, range(-60, -29, 15),\n                 transform=ccrs.PlateCarree(), colors='k', linewidths=0.75,\n                 linestyles='solid', zorder=5)\ncs3.clabel(fontsize=10, inline=1, inline_spacing=7,\n           fmt='%i', rightside_up=True, use_clabeltext=True)\n\n# Plot surface pressure\nax.contourf(lon, lat, pmsl.metpy.convert_units('hPa'), range(990, 1011, 20), alpha=0.5,\n            transform=ccrs.PlateCarree(),\n            colors='yellow', zorder=1)\n\n# Plot surface dewpoint\nax.contourf(lon, lat, Td_sfc.metpy.convert_units('degF'), range(65, 76, 10), alpha=0.4,\n            transform=ccrs.PlateCarree(),\n            colors=['green'], zorder=2)\n\n# Plot 700-hPa dewpoint depression\nax.contourf(lon, lat, Td_dep_700, range(15, 46, 30), alpha=0.5, transform=ccrs.PlateCarree(),\n            colors='tan', zorder=3)\n\n# Plot Vorticity Advection\npurple = ax.contourf(lon, lat, vort_adv_500_smooth, range(5, 106, 100), alpha=0.5,\n            transform=ccrs.PlateCarree(),\n            colors='BlueViolet', zorder=4)\n\n# Define a skip to reduce the barb point density\nskip_300 = (slice(None, None, 12), slice(None, None, 12))\nskip_500 = (slice(None, None, 10), slice(None, None, 10))\nskip_850 = (slice(None, None, 8), slice(None, None, 8))\n\n# 300-hPa wind barbs\njet300 = ax.barbs(lon[skip_300].values, lat[skip_300].values,\n                  u_300_masked[skip_300].values, v_300_masked[skip_300].values,\n                  length=6,\n                  transform=ccrs.PlateCarree(),\n                  color='green', zorder=10, label='300-hPa Jet Core Winds (kt)')\n\n\n# 500-hPa wind barbs\njet500 = ax.barbs(lon[skip_500].values, lat[skip_500].values,\n                  u_500_masked[skip_500].values, v_500_masked[skip_500].values,\n                  length=6,\n                  transform=ccrs.PlateCarree(),\n                  color='blue', zorder=9, label='500-hPa Jet Core Winds (kt)')\n\n# 850-hPa wind barbs\njet850 = ax.barbs(lon[skip_850].values, lat[skip_850].values,\n                  u_850_masked[skip_850].values, v_850_masked[skip_850].values,\n                  length=6,\n                  transform=ccrs.PlateCarree(),\n                  color='k', zorder=8, label='850-hPa Jet Core Winds (kt)')\n\n# Legend\npurple = mpatches.Patch(color='BlueViolet', alpha=0.5, label='Cyclonic Absolute Vorticity Advection')\nyellow = mpatches.Patch(color='yellow', alpha=0.5, label='Surface MSLP < 1010 hPa')\ngreen = mpatches.Patch(color='green', alpha=0.5, label='Surface Td > 65 F')\ntan = mpatches.Patch(color='tan', alpha=0.5, label='700 hPa Dewpoint Depression > 15 C')\nred_line = lines.Line2D([], [], color='red', label='Best Lifted Index (C)')\ndashed_black_line = lines.Line2D([], [], linestyle='dashed', color='k',\n                                 label='12-hr Surface Pressure Falls (hPa)')\nblack_line = lines.Line2D([], [], linestyle='solid', color='k',\n                          label='12-hr 500-hPa Height Falls (m)')\nleg = plt.legend(handles=[jet300, jet500, jet850, dashed_black_line, black_line, red_line,\n                          purple, tan, green, yellow], loc=3,\n                 title=f'Composite Analysis Valid: {vtimes}',\n                 framealpha=1)\nleg.set_zorder(100)","key":"p0BU0mn672"},{"type":"output","id":"l90dzdo4caXknIutk3rX-","data":[],"key":"goJ0q75Gyk"}],"key":"BOILHzpOgz"}],"key":"hodau8flnv"},"references":{"cite":{"order":[],"data":{}}},"footer":{"navigation":{"prev":{"title":"Convective Calculations","url":"/notebooks/convective","group":"The MetPy Gallery"},"next":{"title":"Most-Unstable Convective Available Potential Energy (MUCAPE)","url":"/notebooks/convective/mucape","group":"The MetPy Gallery"}}},"domain":"http://localhost:3000"}