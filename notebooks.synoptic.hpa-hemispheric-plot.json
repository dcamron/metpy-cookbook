{"version":2,"kind":"Notebook","sha256":"0a1be1557bcc6d4c0d0e7339a953f61c05262c0160654c5d1ed1eb7957df3e5d","slug":"notebooks.synoptic.hpa-hemispheric-plot","location":"/notebooks/synoptic/250hPa_Hemispheric_Plot.ipynb","dependencies":[],"frontmatter":{"title":"A 250-hPa Hemispheric Map using Python","content_includes_title":false,"kernelspec":{"name":"python3","display_name":"Python 3 (ipykernel)","language":"python"},"authors":[{"nameParsed":{"literal":"MetPy Maintainers","given":"MetPy","family":"Maintainers"},"name":"MetPy Maintainers","id":"contributors-myst-generated-uid-0"}],"open_access":true,"license":{"content":{"id":"CC-BY-4.0","url":"https://creativecommons.org/licenses/by/4.0/","name":"Creative Commons Attribution 4.0 International","free":true,"CC":true},"code":{"id":"Apache-2.0","url":"https://opensource.org/licenses/Apache-2.0","name":"Apache License 2.0","free":true,"osi":true}},"github":"https://github.com/projectpythia/metpy-cookbook","copyright":"2025","affiliations":[{"id":"UAlbany","name":"University at Albany (SUNY)","department":"Atmospheric and Environmental Sciences","url":"https://www.albany.edu/daes"},{"id":"CISL","name":"NSF National Center for Atmospheric Research","department":"Computational and Information Systems Lab","url":"https://www.cisl.ucar.edu"},{"id":"Unidata","name":"NSF Unidata","url":"https://www.unidata.ucar.edu"},{"id":"Argonne","name":"Argonne National Laboratory","department":"Environmental Science Division","url":"https://www.anl.gov/evs"},{"id":"CarbonPlan","name":"CarbonPlan","url":"https://carbonplan.org"},{"id":"NVIDIA","name":"NVIDIA Corporation","url":"https://www.nvidia.com/"}],"settings":{"output_matplotlib_strings":"remove"},"numbering":{"title":{"offset":2}},"edit_url":"https://github.com/projectpythia/metpy-cookbook/blob/main/notebooks/synoptic/250hPa_Hemispheric_Plot.ipynb","exports":[{"format":"ipynb","filename":"250hPa_Hemispheric_Plot.ipynb","url":"/metpy-cookbook/build/250hPa_Hemispheric_P-2dd783b32defd427d2e918a2e88bb523.ipynb"}]},"widgets":{},"mdast":{"type":"root","children":[{"type":"block","kind":"notebook-content","data":{"cell_marker":"\"\"\"","lines_to_next_cell":0},"children":[{"type":"paragraph","position":{"start":{"line":4,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"This example plots a hemispheric plot of GFS 250-hPa Geopotential Heights and\nwind speed in knots.","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"ezCwQGbMpx"}],"key":"q6j0sJImUb"}],"key":"LceIiyp59X"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"from datetime import datetime, UTC\n\nimport cartopy.crs as ccrs\nimport cartopy.feature as cfeature\nimport cartopy.util as cutil\nimport matplotlib.pyplot as plt\nimport metpy.calc as mpcalc\nimport numpy as np\nfrom siphon.catalog import TDSCatalog\nfrom siphon.ncss import NCSS\nfrom xarray.backends import NetCDF4DataStore\nimport xarray as xr\n\n# Latest GFS Dataset\ncat = TDSCatalog('http://thredds.ucar.edu/thredds/catalog/grib/'\n                 'NCEP/GFS/Global_0p5deg/latest.xml')\nbest_ds = list(cat.datasets.values())[0]\nncss = NCSS(best_ds.access_urls['NetcdfSubset'])\n\n# Set the time to current\nnow = datetime.now(UTC)\n\n# Query for Latest GFS Run\ngfsdata_hght = ncss.query().time(now).accept('netcdf4')\ngfsdata_hght.variables('Geopotential_height_isobaric')\n\n# Set the lat/lon box for the data you want to pull in.\n# lonlat_box(north_lat,south_lat,east_lon,west_lon)\ngfsdata_hght.lonlat_box(0, 359.9, 0, 90)\n\n# Set desired level 50000 = 50000 Pa = 500 hPa\ngfsdata_hght.vertical_level(25000)\n\n# Actually getting the data\ndata_hght = ncss.get_data(gfsdata_hght)\n\n# Make into an xarray Dataset object\nds_hght = xr.open_dataset(NetCDF4DataStore(data_hght))\n\n# Query for Latest GFS Run\ngfsdata_wind = ncss.query().time(now).accept('netcdf4')\ngfsdata_wind.variables('u-component_of_wind_isobaric',\n                       'v-component_of_wind_isobaric')\n\n# Set the lat/lon box for the data you want to pull in.\n# lonlat_box(north_lat,south_lat,east_lon,west_lon)\ngfsdata_wind.lonlat_box(0, 359.9, 0, 90)\n\n# Set desired level 50000 = 50000 Pa = 500 hPa\ngfsdata_wind.vertical_level(25000)\n\n# Actually getting the data\ndata_wind = ncss.get_data(gfsdata_wind)\n\n# Make into an xarray Dataset object\nds_wind = xr.open_dataset(NetCDF4DataStore(data_wind))","key":"KPAVmWln5u"},{"type":"output","id":"VTzBvdEyT3rZ2RCYE2XbU","data":[],"key":"X8NhdDHqMK"}],"key":"KImFQcUNUi"},{"type":"block","kind":"notebook-content","data":{"cell_marker":"#################################################"},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"The next cell will take the downloaded data and parse it to different variables\nfor use later on. Add a cyclic point using the cartopy utility add_cyclic_point\nto the longitudes (the cyclic dimension) as well as any data that is being\ncontoured or filled.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"cMocrVczk8"}],"key":"TSQ9ymhYFo"}],"key":"eoPpxonYrt"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"lat = ds_hght.latitude.values\nlon = ds_hght.longitude.values\n\n# Converting times using the num2date function available through netCDF4\nvtimes = ds_hght.Geopotential_height_isobaric.metpy.time.values.astype('datetime64[ms]').astype('O')\n\n# Smooth the 250-hPa heights using a gaussian filter from scipy.ndimage\nhgt = ds_hght.Geopotential_height_isobaric.squeeze()\nhgt_250, lon = cutil.add_cyclic_point(hgt, coord=lon)\n\nZ_250 = mpcalc.smooth_n_point(hgt_250, 9, 2)\n\n# Calculate wind speed from u and v components, add cyclic point,\n# and smooth slightly\nu250 = ds_wind['u-component_of_wind_isobaric'].squeeze()\nv250 = ds_wind['v-component_of_wind_isobaric'].squeeze()\n\nwspd250 = mpcalc.wind_speed(u250, v250).metpy.convert_units('knots')\nwspd250 = cutil.add_cyclic_point(wspd250)\n\nsmooth_wspd250 = mpcalc.smooth_n_point(wspd250, 9, 2)","key":"YEy46IyewZ"},{"type":"output","id":"LEQRZJR_U-12YwyrBepTP","data":[],"key":"nLBq2gVq4z"}],"key":"UuAQUXC8rI"},{"type":"block","kind":"notebook-content","data":{"cell_marker":"#################################################","lines_to_next_cell":0},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"The next cell sets up the geographic details for the plot that we are going to do later.\nThis is done using the Cartopy package. We will also bring in some geographic data to\ngeo-reference the image for us.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"mGIqlFUFNd"}],"key":"VfO5kflV30"}],"key":"BveGUr4oSk"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"datacrs = ccrs.PlateCarree()\nplotcrs = ccrs.NorthPolarStereo(central_longitude=-100.0)\n\n# Make a grid of lat/lon values to use for plotting.\nlons, lats = np.meshgrid(lon, lat)\n\nfig = plt.figure(1, figsize=(12., 15.))\nax = plt.subplot(111, projection=plotcrs)\n\n# Set some titles for the plots\nax.set_title('250-hPa Geopotential Heights (m)', loc='left')\nax.set_title(f'VALID: {vtimes[0]}', loc='right')\n\n# Set the extent of the image for the NH and add\n#   ax.set_extent([west long, east long, south lat, north lat])\nax.set_extent([-180, 180, 10, 90], ccrs.PlateCarree())\nax.add_feature(cfeature.COASTLINE.with_scale('50m'), edgecolor='black',\n               linewidth=0.5)\nax.add_feature(cfeature.STATES.with_scale('50m'), linewidth=0.5)\n\n# Add geopotential height contours every 120 m\nclev250 = np.arange(9000, 12000, 120)\ncs = ax.contour(lons, lats, Z_250, clev250, colors='k',\n                linewidths=1.0, linestyles='solid', transform=datacrs)\nplt.clabel(cs, fontsize=8, inline=1, inline_spacing=10, fmt='%i',\n           rightside_up=True, use_clabeltext=True)\n\n# Add colorfilled wind speed in knots every 20 kts\nclevsped250 = np.arange(50, 200, 20)\ncmap = plt.cm.get_cmap('BuPu')\ncf = ax.contourf(lons, lats, smooth_wspd250, clevsped250, cmap=cmap,\n                 extend='max', transform=datacrs)\ncbar = plt.colorbar(cf, orientation='horizontal', pad=0, aspect=50,\n                    extendrect=True)","key":"CMrYMRRFnk"},{"type":"output","id":"z9w38ZB15jWmRxOW2oEvh","data":[{"output_type":"stream","name":"stderr","text":"/tmp/ipykernel_3597/1982158916.py:30: MatplotlibDeprecationWarning: The get_cmap function was deprecated in Matplotlib 3.7 and will be removed in 3.11. Use ``matplotlib.colormaps[name]`` or ``matplotlib.colormaps.get_cmap()`` or ``pyplot.get_cmap()`` instead.\n  cmap = plt.cm.get_cmap('BuPu')\n"},{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 1200x1500 with 2 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"b0501831a677bd6c19827f5a79704801","path":"/metpy-cookbook/build/b0501831a677bd6c19827f5a79704801.png"}}}],"key":"DVUB9Oy44x"}],"key":"fsDu1bqojW"}],"key":"xfiluGY3iZ"},"references":{"cite":{"order":[],"data":{}}},"footer":{"navigation":{"prev":{"title":"Synoptic Analysis","url":"/notebooks/synoptic","group":"The MetPy Gallery"},"next":{"title":"500 hPa Geopotential Heights, Absolute Vorticity, and Winds","url":"/notebooks/synoptic/hpa-absolute-vorticity-winds","group":"The MetPy Gallery"}}},"domain":"http://localhost:3000"}