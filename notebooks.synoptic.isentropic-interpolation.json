{"version":2,"kind":"Notebook","sha256":"16d4409803f411e63212530e2b2d849daa191366659de87fdfe8c8c02db8897a","slug":"notebooks.synoptic.isentropic-interpolation","location":"/notebooks/synoptic/Isentropic_Interpolation.ipynb","dependencies":[],"frontmatter":{"title":"Isentropic Analysis","content_includes_title":false,"kernelspec":{"name":"python3","display_name":"Python 3 (ipykernel)","language":"python"},"authors":[{"nameParsed":{"literal":"MetPy Maintainers","given":"MetPy","family":"Maintainers"},"name":"MetPy Maintainers","id":"contributors-myst-generated-uid-0"}],"open_access":true,"license":{"content":{"id":"CC-BY-4.0","url":"https://creativecommons.org/licenses/by/4.0/","name":"Creative Commons Attribution 4.0 International","free":true,"CC":true},"code":{"id":"Apache-2.0","url":"https://opensource.org/licenses/Apache-2.0","name":"Apache License 2.0","free":true,"osi":true}},"github":"https://github.com/projectpythia/metpy-cookbook","copyright":"2025","affiliations":[{"id":"UAlbany","name":"University at Albany (SUNY)","department":"Atmospheric and Environmental Sciences","url":"https://www.albany.edu/daes"},{"id":"CISL","name":"NSF National Center for Atmospheric Research","department":"Computational and Information Systems Lab","url":"https://www.cisl.ucar.edu"},{"id":"Unidata","name":"NSF Unidata","url":"https://www.unidata.ucar.edu"},{"id":"Argonne","name":"Argonne National Laboratory","department":"Environmental Science Division","url":"https://www.anl.gov/evs"},{"id":"CarbonPlan","name":"CarbonPlan","url":"https://carbonplan.org"},{"id":"NVIDIA","name":"NVIDIA Corporation","url":"https://www.nvidia.com/"}],"settings":{"output_matplotlib_strings":"remove"},"numbering":{"title":{"offset":2}},"edit_url":"https://github.com/projectpythia/metpy-cookbook/blob/main/notebooks/synoptic/Isentropic_Interpolation.ipynb","exports":[{"format":"ipynb","filename":"Isentropic_Interpolation.ipynb","url":"/metpy-cookbook/build/Isentropic_Interpola-3ade945ef9e2fd1be8508bba29e1656a.ipynb"}]},"widgets":{},"mdast":{"type":"root","children":[{"type":"block","kind":"notebook-content","data":{"cell_marker":"\"\"\""},"children":[{"type":"paragraph","position":{"start":{"line":4,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"The MetPy function ","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"cM5e1i11u0"},{"type":"inlineCode","value":"metpy.calc.isentropic_interpolation","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"SCsFYl8fMI"},{"type":"text","value":" allows for isentropic analysis from\nmodel analysis data in isobaric coordinates.","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"iaTtFVUllu"}],"key":"bcG5lsPj24"}],"key":"aCt8KQW5do"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"from datetime import datetime, timedelta\n\nimport cartopy.crs as ccrs\nimport cartopy.feature as cfeature\nimport matplotlib.pyplot as plt\nimport metpy.calc as mpcalc\nfrom metpy.units import units\nimport numpy as np\nfrom siphon.catalog import TDSCatalog\nfrom xarray.backends import NetCDF4DataStore\nimport xarray as xr","key":"Sxx2oT1apn"},{"type":"output","id":"F6zkoKm64eSMX2K9Pyq2z","data":[],"key":"cV8xPHYTnM"}],"key":"db7MxY8f87"},{"type":"block","kind":"notebook-content","data":{"cell_marker":"###########################"},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Getting the data","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"IBmn4z95l0"}],"key":"bfflGFgvEV"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"In this example, the latest GFS forecasts data from the National Centers for\nEnvironmental Information (","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"FmxFDtgN5F"},{"type":"link","url":"https://www.ncei.noaa.gov","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"https://​www​.ncei​.noaa​.gov","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"SyIf2dpfaJ"}],"urlSource":"https://www.ncei.noaa.gov","key":"lE0thn2heE"},{"type":"text","value":") will be used, courtesy of the\nUniveristy Corporation for Atmospheric Research Thredds Data Server.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"SMLhvyqtEU"}],"key":"jF19cbLAAw"}],"key":"wUQCMkQ6j8"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Latest GFS Dataset\ncat = TDSCatalog('http://thredds.ucar.edu/thredds/catalog/grib/'\n                 'NCEP/GFS/Global_0p5deg/catalog.xml')\nncss = cat.latest.subset()\n\n# Find the start of the model run and define time range\nstart_time = ncss.metadata.time_span['begin']\nstart = datetime.strptime(start_time, '%Y-%m-%dT%H:%M:%Sz')\nend = start + timedelta(hours=9)\n\n# Query for Latest GFS Run\ngfsdata = ncss.query().time_range(start, end).accept('netcdf4')\n\ngfsdata.variables('Temperature_isobaric',\n                  'u-component_of_wind_isobaric',\n                  'v-component_of_wind_isobaric',\n                  'Relative_humidity_isobaric').add_lonlat()\n\n# Set the lat/lon box for the data you want to pull in.\n# lonlat_box(north_lat,south_lat,east_lon,west_lon)\ngfsdata.lonlat_box(-150, -50, 15, 65)\n\n# Actually getting the data\ndata = ncss.get_data(gfsdata)\n\n# Make into an xarray Dataset object\nds = xr.open_dataset(NetCDF4DataStore(data)).metpy.parse_cf()\n\ndlev_hght = ds.Temperature_isobaric.dims[1]\ndlev_uwnd = ds['u-component_of_wind_isobaric'].dims[1]\nlat = ds.latitude\nlon = ds.longitude\n\nlev_hght = ds[dlev_hght]\nlev_uwnd = ds[dlev_uwnd]\n\n# Due to a different number of vertical levels find where they are common\n_, _, common_ind = np.intersect1d(lev_uwnd, lev_hght, return_indices=True)\n\ncommon_levels = lev_hght[common_ind].metpy.unit_array\ntimes = ds.Temperature_isobaric.metpy.time\nvtimes = times.values.astype('datetime64[ms]').astype('O')\ntemps = ds.Temperature_isobaric.metpy.unit_array\nuwnd = ds['u-component_of_wind_isobaric'].metpy.unit_array\nvwnd = ds['v-component_of_wind_isobaric'].metpy.unit_array\nrelh = ds.Relative_humidity_isobaric.metpy.unit_array","key":"Lotk14mftB"},{"type":"output","id":"TcsbttH_v3SfZLGPeQe8H","data":[],"key":"YkvtgdTu8O"}],"key":"JdPI03dT3e"},{"type":"block","kind":"notebook-content","data":{"cell_marker":"########################"},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"To properly interpolate to isentropic coordinates, the function must know the desired output\nisentropic levels. An array with these levels will be created below.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"joYapnmjOC"}],"key":"HPcdQA3ZNM"}],"key":"cKdVhr5Ygw"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"isentlevs = np.arange(310, 316, 5) * units.kelvin","key":"AgnQlPjd8d"},{"type":"output","id":"Pc741AfEGoutZRkgAg_5T","data":[],"key":"ZPYupN4Zqr"}],"key":"eQ0Xi8b42w"},{"type":"block","kind":"notebook-content","data":{"cell_marker":"########################"},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Conversion to Isentropic Coordinates","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"nQAis4rMdp"}],"key":"exyg32Sg2x"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Once model data in isobaric coordinates has been pulled and the desired isentropic levels\ncreated, the conversion to isentropic coordinates can begin. Data will be passed to the\nfunction as below. The function requires that isentropic levels, isobaric levels, and\ntemperature be input. Any additional inputs (in this case relative humidity, u, and v wind\ncomponents) will be linearly interpolated to isentropic space.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"om7hiPNW6Y"}],"key":"YtzoJCvTd2"}],"key":"HNTZBCsvV9"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"isent_anal = mpcalc.isentropic_interpolation(isentlevs,\n                                             common_levels,\n                                             temps[:, common_ind, :, :],\n                                             relh,\n                                             uwnd,\n                                             vwnd,\n                                             vertical_dim=1)","key":"b0lZsvMLyu"},{"type":"output","id":"4OFs0yMQkywtVS2XfPA_p","data":[{"output_type":"stream","name":"stderr","text":"/tmp/ipykernel_3609/414936893.py:1: UserWarning: Interpolation point out of data bounds encountered\n  isent_anal = mpcalc.isentropic_interpolation(isentlevs,\n"}],"key":"GLqn8kpLMA"}],"key":"F4JA1g9qT5"},{"type":"block","kind":"notebook-content","data":{"cell_marker":"####################"},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"The output is a list, so now we will separate the variables to different names before\nplotting.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"g0Ck1JJNsq"}],"key":"DO61HWqAmF"}],"key":"o2V4ZkEjiK"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"isentprs, isentrh, isentu, isentv = isent_anal","key":"f2ZMcGnh5R"},{"type":"output","id":"8WpZ-kN7jGDjkUUA2z1oi","data":[],"key":"e3ZisjEvTy"}],"key":"PuWlRVl1Q9"},{"type":"block","kind":"notebook-content","data":{"cell_marker":"##########################"},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"A quick look at the shape of these variables will show that the data is now in isentropic\ncoordinates, with the number of vertical levels as specified above.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"aYkIwgAAsJ"}],"key":"KJob7AX1zL"}],"key":"wN6A8SeJ0c"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"print(isentprs.shape)\nprint(isentrh.shape)\nprint(isentu.shape)\nprint(isentv.shape)","key":"ibR0x307g8"},{"type":"output","id":"XA5ZMlQSlQCdgbnzXF-Df","data":[{"output_type":"stream","name":"stdout","text":"(4, 2, 101, 201)\n(4, 2, 101, 201)\n(4, 2, 101, 201)\n(4, 2, 101, 201)\n"}],"key":"bcnYFUsDb9"}],"key":"tX6kTDpjmH"},{"type":"block","kind":"notebook-content","data":{"cell_marker":"####################"},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Plotting the Isentropic Analysis","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"KQpiGSqh67"}],"key":"RpuqYvsl8u"}],"key":"tTeKPBSyPX"}],"key":"W6ggjV10hx"},{"type":"block","kind":"notebook-content","data":{"cell_marker":"#####################","lines_to_next_cell":0},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Set up our projection","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"ADd06PUUV8"}],"key":"QMLWMzBqmw"}],"key":"wPlrl5EbEN"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"crs = ccrs.LambertConformal(central_longitude=-100.0, central_latitude=45.0)\n\n# Set up our array of latitude and longitude values and transform to\n# the desired projection.\nclons, clats = np.meshgrid(lon, lat)\n\n# Get data to plot state and province boundaries\nstates_provinces = cfeature.NaturalEarthFeature(\n    category='cultural',\n    name='admin_1_states_provinces_lakes',\n    scale='50m',\n    facecolor='none')\n\n# Choose Isentropic Level index value\nlevel = 0 # [310, 315]\n\n# Choose forecast hour index value\nFH = 0 # [0, 3, 6, 9]\n\n# Start Figure\nfig = plt.figure(1, figsize=(14., 12.))\nax = plt.subplot(111, projection=crs)\n\n# Set plot extent\nax.set_extent((-121., -74., 25., 50.), crs=ccrs.PlateCarree())\nax.coastlines('50m', edgecolor='black', linewidth=0.75)\nax.add_feature(states_provinces, edgecolor='black', linewidth=0.5)\n\n# Plot the 300K surface\nclevisent = np.arange(0, 1000, 25)\ncs = ax.contour(clons, clats,\n                mpcalc.smooth_n_point(isentprs[FH, level, :, :], 9, 4),\n                clevisent,\n                transform=ccrs.PlateCarree(),\n                colors='k', linewidths=1.5, linestyles='solid')\nplt.clabel(cs, fontsize=10, inline=1, inline_spacing=7,\n           fmt='%i', rightside_up=True, use_clabeltext=True)\n\ncf = ax.contourf(clons, clats,\n                 mpcalc.smooth_n_point(isentrh[FH, level, :, :], 9, 4),\n                 np.arange(50, 101, 1),\n                 transform=ccrs.PlateCarree(),\n                 cmap=plt.cm.YlGn)\nplt.colorbar(cf, orientation='horizontal', aspect=65, pad=0, extendrect='True')\n\nwind_slice = (FH, level, slice(None, None, 5), slice(None, None, 5))\nax.barbs(clons[wind_slice[2:]], clats[wind_slice[2:]],\n         isentu[wind_slice].m, isentv[wind_slice].m, length=6,\n         transform=ccrs.PlateCarree())\n\n# Make some titles\nplt.title(f'{isentlevs[level].m:.0f} K Isentropic Level', loc='left')\nplt.title(f'VALID: {vtimes[FH]} UTC', loc='right')","key":"S4QGO50NLT"},{"type":"output","id":"TaDAt0vdMIlTWy7sH3doH","data":[{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 1400x1200 with 2 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"2314dbcab2bf77ad5992aec267ea94ce","path":"/metpy-cookbook/build/2314dbcab2bf77ad5992aec267ea94ce.png"}}}],"key":"ZxW0jeJbry"}],"key":"QKFWEr0HC6"}],"key":"N65GzX2KXU"},"references":{"cite":{"order":[],"data":{}}},"footer":{"navigation":{"prev":{"title":"Geostrophic Wind and Other Calcuations","url":"/notebooks/synoptic/geostrophic-wind-and-few-more","group":"The MetPy Gallery"},"next":{"title":"Baroclinic Potential Vorticity Analysis, Divergence, and Winds","url":"/notebooks/synoptic/pv-baroclinic-isobaric","group":"The MetPy Gallery"}}},"domain":"http://localhost:3000"}