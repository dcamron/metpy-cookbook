{"version":2,"kind":"Notebook","sha256":"9ae8e783ab7659caf46df5b629a33fa46b52b227bdd3def5055beccfda774b4c","slug":"notebooks.specialty.hovmoller-diagram","location":"/notebooks/specialty/Hovmoller_Diagram.ipynb","dependencies":[],"frontmatter":{"title":"Hovmoller Diagram Example","content_includes_title":false,"kernelspec":{"name":"python3","display_name":"Python 3 (ipykernel)","language":"python"},"authors":[{"nameParsed":{"literal":"MetPy Maintainers","given":"MetPy","family":"Maintainers"},"name":"MetPy Maintainers","id":"contributors-myst-generated-uid-0"}],"open_access":true,"license":{"content":{"id":"CC-BY-4.0","url":"https://creativecommons.org/licenses/by/4.0/","name":"Creative Commons Attribution 4.0 International","free":true,"CC":true},"code":{"id":"Apache-2.0","url":"https://opensource.org/licenses/Apache-2.0","name":"Apache License 2.0","free":true,"osi":true}},"github":"https://github.com/projectpythia/metpy-cookbook","copyright":"2025","affiliations":[{"id":"UAlbany","name":"University at Albany (SUNY)","department":"Atmospheric and Environmental Sciences","url":"https://www.albany.edu/daes"},{"id":"CISL","name":"NSF National Center for Atmospheric Research","department":"Computational and Information Systems Lab","url":"https://www.cisl.ucar.edu"},{"id":"Unidata","name":"NSF Unidata","url":"https://www.unidata.ucar.edu"},{"id":"Argonne","name":"Argonne National Laboratory","department":"Environmental Science Division","url":"https://www.anl.gov/evs"},{"id":"CarbonPlan","name":"CarbonPlan","url":"https://carbonplan.org"},{"id":"NVIDIA","name":"NVIDIA Corporation","url":"https://www.nvidia.com/"}],"settings":{"output_matplotlib_strings":"remove"},"numbering":{"title":{"offset":2}},"edit_url":"https://github.com/projectpythia/metpy-cookbook/blob/main/notebooks/specialty/Hovmoller_Diagram.ipynb","exports":[{"format":"ipynb","filename":"Hovmoller_Diagram.ipynb","url":"/metpy-cookbook/build/Hovmoller_Diagram-912741b0c3eaf6d52db9a38cafdfc7ab.ipynb"}]},"widgets":{},"mdast":{"type":"root","children":[{"type":"block","kind":"notebook-content","data":{"cell_marker":"\"\"\""},"children":[{"type":"paragraph","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"By: Kevin Goebbert","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"TK6W075IFn"}],"key":"soJ7o2ZXWP"},{"type":"paragraph","position":{"start":{"line":6,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"Northern Hemispheric v-wind component over the mid-latitudes in a\nHovmoller diagram. This diagram can be used to illustrate upper-level\nwave and energy propogation (e.g., downstream baroclinic development)","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"UJ6zkmljrJ"}],"key":"KhonJhPRWH"}],"key":"uF0mJolSaD"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"import cartopy.crs as ccrs\nimport cartopy.feature as cfeature\nimport matplotlib.gridspec as gridspec\nimport matplotlib.pyplot as plt\nimport metpy.calc as mpcalc\nimport numpy as np\nimport xarray as xr","key":"AkxIblTeEd"},{"type":"output","id":"hge71iuppPCXu1iwTXguT","data":[],"key":"aCkSnwipLL"}],"key":"vsZkQSoyoI"},{"type":"block","kind":"notebook-content","data":{"cell_marker":"######################################################################"},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Get the data","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"jjX2LfqX5R"}],"identifier":"get-the-data","label":"Get the data","html_id":"get-the-data","implicit":true,"key":"kiVv7Rdlgg"},{"type":"paragraph","position":{"start":{"line":4,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Using NCEP/NCAR reanalysis data via xarray remote access using the\nOPeNDAP protocol.","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"ebmwoJtshz"}],"key":"KVfSg3KubP"},{"type":"paragraph","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Set the time range, parameter, and level to desired values","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"WqG67Ze1TX"}],"key":"A7LJNibVSF"}],"key":"fUkMsVr5pM"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Create time slice from dates\nstart_time = '2011-01-20'\nend_time = '2011-02-06'\n\n# Select NCEP/NCAR parameter and level\nparam = 'vwnd'\nlevel = 250\n\n# Remote get dataset using OPeNDAP method via xarray\nds = xr.open_dataset('http://www.esrl.noaa.gov/psd/thredds/dodsC/Datasets/'\n                     f'ncep.reanalysis/pressure/{param}.{start_time[:4]}.nc')\n\n# Create slice variables subset domain\ntime_slice = slice(start_time, end_time)\nlat_slice = slice(60, 40)\nlon_slice = slice(0, 360)\n\n# Get data, selecting time, level, lat/lon slice\ndata = ds[param].sel(time=time_slice,\n                     level=level,\n                     lat=lat_slice,\n                     lon=lon_slice)\n\n# Compute weights and take weighted average over latitude dimension\nweights = np.cos(np.deg2rad(data.lat.values))\navg_data = (data * weights[None, :, None]).sum(dim='lat') / np.sum(weights)\n\n# Get times and make array of datetime objects\nvtimes = data.time.values.astype('datetime64[ms]').astype('O')\n\n# Specify longitude values for chosen domain\nlons = data.lon.values","key":"amnzhhzdi3"},{"type":"output","id":"4ocMt0ky1AuIF0nmLGyrm","data":[],"key":"Am2dK7yAg4"}],"key":"vCKSE8B5kP"},{"type":"block","kind":"notebook-content","data":{"cell_marker":"######################################################################"},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Make the Hovmoller Plot","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"z3mCLWGeA7"}],"identifier":"make-the-hovmoller-plot","label":"Make the Hovmoller Plot","html_id":"make-the-hovmoller-plot","implicit":true,"key":"rijA0C5WNN"},{"type":"paragraph","position":{"start":{"line":4,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Pretty simple to use common matplotlib/cartopy to create the diagram.\nCartopy is used to create a geographic reference map to highlight the\narea being averaged as well as the visual reference for longitude.","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"u1v7sad4Ez"}],"key":"Jnr5wZmtyc"}],"key":"TzhrkB0EXa"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Start figure\nfig = plt.figure(figsize=(10, 13))\n\n# Use gridspec to help size elements of plot; small top plot\n# and big bottom plot\ngs = gridspec.GridSpec(nrows=2, ncols=1, height_ratios=[1, 6], hspace=0.03)\n\n# Tick labels\nx_tick_labels = [u'0\\N{DEGREE SIGN}E', u'90\\N{DEGREE SIGN}E',\n                 u'180\\N{DEGREE SIGN}E', u'90\\N{DEGREE SIGN}W',\n                 u'0\\N{DEGREE SIGN}E']\n\n# Top plot for geographic reference (makes small map)\nax1 = fig.add_subplot(gs[0, 0],\n                      projection=ccrs.PlateCarree(central_longitude=180))\nax1.set_extent([0, 357.5, 35, 65], ccrs.PlateCarree(central_longitude=180))\nax1.set_yticks([40, 60])\nax1.set_yticklabels([u'40\\N{DEGREE SIGN}N', u'60\\N{DEGREE SIGN}N'])\nax1.set_xticks([-180, -90, 0, 90, 180])\nax1.set_xticklabels(x_tick_labels)\nax1.grid(linestyle='dotted', linewidth=2)\n\n# Add geopolitical boundaries for map reference\nax1.add_feature(cfeature.COASTLINE.with_scale('50m'))\nax1.add_feature(cfeature.LAKES.with_scale('50m'), color='black',\n                linewidths=0.5)\n\n# Set some titles\nplt.title('Hovmoller Diagram', loc='left')\nplt.title('NCEP/NCAR Reanalysis', loc='right')\n\n# Bottom plot for Hovmoller diagram\nax2 = fig.add_subplot(gs[1, 0])\nax2.invert_yaxis()  # Reverse the time order to do oldest first\n\n# Plot of chosen variable averaged over latitude and slightly smoothed\nclevs = np.arange(-50, 51, 5)\ncf = ax2.contourf(lons, vtimes, mpcalc.smooth_n_point(\n    avg_data, 9, 2), clevs, cmap=plt.cm.bwr, extend='both')\ncs = ax2.contour(lons, vtimes, mpcalc.smooth_n_point(\n    avg_data, 9, 2), clevs, colors='k', linewidths=1)\ncbar = plt.colorbar(cf, orientation='horizontal', pad=0.04, aspect=50,\n                    extendrect=True)\ncbar.set_label('m $s^{-1}$')\n\n# Make some ticks and tick labels\nax2.set_xticks([0, 90, 180, 270, 357.5])\nax2.set_xticklabels(x_tick_labels)\nax2.set_yticks(vtimes[4::8])\nax2.set_yticklabels(vtimes[4::8])\n\n# Set some titles\nplt.title('250-hPa V-wind', loc='left', fontsize=10)\nplt.title(f'Time Range: {vtimes[0]:%Y%m%d %HZ} - {vtimes[-1]:%Y%m%d %HZ}',\n          loc='right', fontsize=10)","key":"fflJcw6QGt"},{"type":"output","id":"UETm32XdVr1sb4Sz7eFq0","data":[{"output_type":"stream","name":"stderr","text":"/home/runner/micromamba/envs/metpy-cookbook/lib/python3.13/site-packages/cartopy/io/__init__.py:242: DownloadWarning: Downloading: https://naturalearth.s3.amazonaws.com/50m_physical/ne_50m_lakes.zip\n  warnings.warn(f'Downloading: {url}', DownloadWarning)\n"},{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 1000x1300 with 3 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"fea8bb305d0dd79234bc2ccf15d79e71","path":"/metpy-cookbook/build/fea8bb305d0dd79234bc2ccf15d79e71.png"}}}],"key":"uJUUbptCjd"}],"key":"aFbADCcC8y"}],"key":"dgG6xpdgEp"},"references":{"cite":{"order":[],"data":{}}},"footer":{"navigation":{"prev":{"title":"Specialty Plotting","url":"/notebooks/specialty","group":"The MetPy Gallery"},"next":{"title":"Real Data Cross-Section Example","url":"/notebooks/specialty/observational-data-cross-section","group":"The MetPy Gallery"}}},"domain":"http://localhost:3000"}