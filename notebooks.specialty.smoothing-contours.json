{"version":2,"kind":"Notebook","sha256":"d986deaee31794b119acff30870bc53d3dec5ac7897bb7f22b18e357a90bcecc","slug":"notebooks.specialty.smoothing-contours","location":"/notebooks/specialty/Smoothing_Contours.ipynb","dependencies":[],"frontmatter":{"title":"Smoothing Contours","content_includes_title":false,"kernelspec":{"name":"python3","display_name":"Python 3 (ipykernel)","language":"python"},"authors":[{"nameParsed":{"literal":"MetPy Maintainers","given":"MetPy","family":"Maintainers"},"name":"MetPy Maintainers","id":"contributors-myst-generated-uid-0"}],"open_access":true,"license":{"content":{"id":"CC-BY-4.0","url":"https://creativecommons.org/licenses/by/4.0/","name":"Creative Commons Attribution 4.0 International","free":true,"CC":true},"code":{"id":"Apache-2.0","url":"https://opensource.org/licenses/Apache-2.0","name":"Apache License 2.0","free":true,"osi":true}},"github":"https://github.com/projectpythia/metpy-cookbook","copyright":"2025","affiliations":[{"id":"UAlbany","name":"University at Albany (SUNY)","department":"Atmospheric and Environmental Sciences","url":"https://www.albany.edu/daes"},{"id":"CISL","name":"NSF National Center for Atmospheric Research","department":"Computational and Information Systems Lab","url":"https://www.cisl.ucar.edu"},{"id":"Unidata","name":"NSF Unidata","url":"https://www.unidata.ucar.edu"},{"id":"Argonne","name":"Argonne National Laboratory","department":"Environmental Science Division","url":"https://www.anl.gov/evs"},{"id":"CarbonPlan","name":"CarbonPlan","url":"https://carbonplan.org"},{"id":"NVIDIA","name":"NVIDIA Corporation","url":"https://www.nvidia.com/"}],"settings":{"output_matplotlib_strings":"remove"},"numbering":{"title":{"offset":2}},"edit_url":"https://github.com/projectpythia/metpy-cookbook/blob/main/notebooks/specialty/Smoothing_Contours.ipynb","exports":[{"format":"ipynb","filename":"Smoothing_Contours.ipynb","url":"/metpy-cookbook/build/Smoothing_Contours-78fe63cd35a01397681dee04f091b369.ipynb"}]},"widgets":{},"mdast":{"type":"root","children":[{"type":"block","kind":"notebook-content","data":{"cell_marker":"\"\"\""},"children":[{"type":"paragraph","position":{"start":{"line":4,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Demonstrate how to smooth contour values from a higher resolution\nmodel field.","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"YiofJdPOXy"}],"key":"LAqibdxkvV"},{"type":"paragraph","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"By: Kevin Goebbert","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"NSvOynrtrm"}],"key":"adguOEjJ4G"},{"type":"paragraph","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"text","value":"Date: 13 April 2017","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"WJFVWzatTQ"}],"key":"wSjQ8B9v8s"}],"key":"LrtA1qU5VG"},{"type":"block","kind":"notebook-content","data":{"cell_marker":"##################################","lines_to_next_cell":0},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Do the needed imports","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Qw0EFiNOwm"}],"key":"xFejgxhipF"}],"key":"rARXFeZINS"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"from datetime import datetime, UTC\n\nimport cartopy.crs as ccrs\nimport cartopy.feature as cfeature\nimport matplotlib.pyplot as plt\nimport metpy.calc as mpcalc\nimport numpy as np\nfrom metpy.units import units\nfrom siphon.catalog import TDSCatalog\nfrom xarray.backends import NetCDF4DataStore\nimport xarray as xr","key":"NV6zbO17HG"},{"type":"output","id":"cglD9fMx6ppt4Aefw7PbK","data":[],"key":"h4YLvpft0I"}],"key":"Lj6sSNKJz6"},{"type":"block","kind":"notebook-content","data":{"cell_marker":"##################################","lines_to_next_cell":0},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Set up netCDF Subset Service link","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"iwE8oDG5l4"}],"key":"CDqYs84c0P"}],"key":"rQvtjsZddW"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Specify our date/time of product desired\ndt = datetime.now(UTC)\n\n# Construct the URL for our THREDDS Data Server Catalog,\n# and access our desired dataset within via NCSS\ncat = TDSCatalog('https://thredds.ucar.edu/thredds/catalog/grib/'\n                 'NCEP/NAM/CONUS_12km/latest.xml')\nncss = cat.datasets[0].subset()\n\n# Create our NCSS query with desired specifications\nquery = ncss.query()\nquery.time(dt)\nquery.add_lonlat()\nquery.variables('Geopotential_height_isobaric',\n                'u-component_of_wind_isobaric',\n                'v-component_of_wind_isobaric')\n\n# Obtain the data we've queried for\ndata = ncss.get_data(query)\n\n# Make into an xarray Dataset object\nds = xr.open_dataset(NetCDF4DataStore(data)).metpy.parse_cf()","key":"hmfTQkQEDQ"},{"type":"output","id":"qJLrF445MLXydfciTX8Zo","data":[],"key":"MS1QAXgLcS"}],"key":"lWz6JdG4v3"},{"type":"block","kind":"notebook-content","data":{"cell_marker":"##################################"},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Pull apart the data","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"AK3siRVwU4"}],"key":"jEjs4KtjOQ"}],"key":"h02l58pj1T"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Get dimension names to pull appropriate variables\n# dtime = ds.Geopotential_height_isobaric.dims[0]\n# dlev = ds.Geopotential_height_isobaric.dims[1]\n# dlat = ds.Geopotential_height_isobaric.dims[2]\n# dlon = ds.Geopotential_height_isobaric.dims[3]\n\n# Get lat and lon data, as well as time data and metadata\nlats = ds.lat\nlons = ds.lon\n\n# Need 2D lat/lons for plotting, do so if necessary\nif lats.ndim < 2:\n    lons, lats = np.meshgrid(lons, lats)\n\n# Determine the level of 500 hPa\nlev_500 = 500 * units.hPa\n\n# Create more useable times for output\ntimes = ds.Geopotential_height_isobaric.metpy.time.squeeze()\nvtimes = times.values.astype('datetime64[ms]').astype('O')\n\n# Pull out the 500 hPa Heights\nhght_500 = ds.Geopotential_height_isobaric.metpy.sel(\n    vertical=lev_500).squeeze()\nuwnd_500 = ds['u-component_of_wind_isobaric'].metpy.sel(\n    vertical=lev_500).squeeze()\nvwnd_500 = ds['v-component_of_wind_isobaric'].metpy.sel(\n    vertical=lev_500).squeeze()\n\n# Calculate the magnitude of the wind speed in kts\nsped = mpcalc.wind_speed(uwnd_500, vwnd_500).metpy.convert_units('knots')","key":"Ujzlf4ESFQ"},{"type":"output","id":"AcsL_VsWibUGk35XIf0le","data":[],"key":"n94QAhqhRv"}],"key":"nSsyXrzZ64"},{"type":"block","kind":"notebook-content","data":{"cell_marker":"##################################","lines_to_next_cell":0},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Set up the projection for LCC","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"NyAdcECMCB"}],"key":"c21v1zmIgY"}],"key":"RS37dgGE95"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"plotcrs = ccrs.LambertConformal(central_longitude=-100.0,\n                                central_latitude=45.0)\ndatacrs = ccrs.PlateCarree(central_longitude=0.)","key":"bwZuL8mLXm"},{"type":"output","id":"uAA-PJhoL11yFvAbRQecs","data":[],"key":"kwSXleqrzO"}],"key":"zG7ve7XDlh"},{"type":"block","kind":"notebook-content","data":{"cell_marker":"##################################"},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Subset and smooth","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"I6XIBQDlOl"}],"key":"Rn0vHE2vOB"}],"key":"rYn9nsznv2"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Smooth the 500-hPa geopotential height field\n# Be sure to only smooth the 2D field\nZ_500 = mpcalc.smooth_gaussian(hght_500, 50)","key":"CIM8T7C70L"},{"type":"output","id":"7uodbKswT6ZSHnG5RHQlR","data":[],"key":"M6W5MsjHtg"}],"key":"QmGjPoATJo"},{"type":"block","kind":"notebook-content","data":{"cell_marker":"##################################"},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Plot the contours","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"UJ2bhAMebw"}],"key":"jZV9WFQW59"}],"key":"vVcl97FBTY"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Start plot with new figure and axis\nfig = plt.figure(figsize=(17., 11.))\nax = plt.subplot(1, 1, 1, projection=plotcrs)\n\n# Add some titles to make the plot readable by someone else\nplt.title('500-hPa Geo Heights (m; black), Smoothed 500-hPa Geo. '\n          'Heights (m; red)', loc='left')\nplt.title(f'VALID: {vtimes}', loc='right')\n\n# Set GAREA and add map features\nax.set_extent([-125., -67., 22., 52.], ccrs.PlateCarree())\nax.coastlines('50m', edgecolor='black', linewidth=0.75)\nax.add_feature(cfeature.STATES, linewidth=0.5)\n\n# Set the CINT\nclev500 = np.arange(5100, 6000, 60)\n\n# Plot smoothed 500-hPa contours\ncs2 = ax.contour(lons, lats, Z_500, clev500, colors='black',\n                 linewidths=3, linestyles='solid', transform=datacrs)\nc2 = plt.clabel(cs2, fontsize=12, colors='black', inline=1, inline_spacing=8,\n                fmt='%i', rightside_up=True, use_clabeltext=True)\n\n# Contour the 500 hPa heights with labels\ncs = ax.contour(lons, lats, hght_500, clev500, colors='red',\n                linewidths=2.5, linestyles='solid', alpha=0.6,\n                transform=datacrs)\ncl = plt.clabel(cs, fontsize=12, colors='red', inline=1, inline_spacing=8,\n                fmt='%i', rightside_up=True, use_clabeltext=True)","key":"aWCS8l9tYN"},{"type":"output","id":"8RNSVXOxxqjm7qxT9OhJU","data":[{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 1700x1100 with 1 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"c66b3e054077b2fe24afc42e2b7790b8","path":"/metpy-cookbook/build/c66b3e054077b2fe24afc42e2b7790b8.png"}}}],"key":"A3qmxw7z2h"}],"key":"LR3UfXlqh2"}],"key":"GazC1wMbKv"},"references":{"cite":{"order":[],"data":{}}},"footer":{"navigation":{"prev":{"title":"Real Data Cross-Section Example","url":"/notebooks/specialty/observational-data-cross-section","group":"The MetPy Gallery"},"next":{"title":"MetPy’s Simplified Plotting Interface","url":"/notebooks/declarative","group":"The MetPy Gallery"}}},"domain":"http://localhost:3000"}