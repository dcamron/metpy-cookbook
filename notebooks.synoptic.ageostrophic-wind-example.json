{"version":2,"kind":"Notebook","sha256":"7eab2e37cf39c34eb69426b8aa87628cb44fbf4fe521d550e6dcb8a81ebc49bc","slug":"notebooks.synoptic.ageostrophic-wind-example","location":"/notebooks/synoptic/Ageostrophic_Wind_Example.ipynb","dependencies":[],"frontmatter":{"title":"Geostrophic and Ageostrophic Wind","content_includes_title":false,"kernelspec":{"name":"python3","display_name":"Python 3 (ipykernel)","language":"python"},"authors":[{"nameParsed":{"literal":"MetPy Maintainers","given":"MetPy","family":"Maintainers"},"name":"MetPy Maintainers","id":"contributors-myst-generated-uid-0"}],"open_access":true,"license":{"content":{"id":"CC-BY-4.0","url":"https://creativecommons.org/licenses/by/4.0/","name":"Creative Commons Attribution 4.0 International","free":true,"CC":true},"code":{"id":"Apache-2.0","url":"https://opensource.org/licenses/Apache-2.0","name":"Apache License 2.0","free":true,"osi":true}},"github":"https://github.com/projectpythia/metpy-cookbook","copyright":"2025","affiliations":[{"id":"UAlbany","name":"University at Albany (SUNY)","department":"Atmospheric and Environmental Sciences","url":"https://www.albany.edu/daes"},{"id":"CISL","name":"NSF National Center for Atmospheric Research","department":"Computational and Information Systems Lab","url":"https://www.cisl.ucar.edu"},{"id":"Unidata","name":"NSF Unidata","url":"https://www.unidata.ucar.edu"},{"id":"Argonne","name":"Argonne National Laboratory","department":"Environmental Science Division","url":"https://www.anl.gov/evs"},{"id":"CarbonPlan","name":"CarbonPlan","url":"https://carbonplan.org"},{"id":"NVIDIA","name":"NVIDIA Corporation","url":"https://www.nvidia.com/"}],"settings":{"output_matplotlib_strings":"remove"},"numbering":{"title":{"offset":2}},"edit_url":"https://github.com/projectpythia/metpy-cookbook/blob/main/notebooks/synoptic/Ageostrophic_Wind_Example.ipynb","exports":[{"format":"ipynb","filename":"Ageostrophic_Wind_Example.ipynb","url":"/metpy-cookbook/build/Ageostrophic_Wind_Ex-17cbea3500f842b90cf597af70341379.ipynb"}]},"widgets":{},"mdast":{"type":"root","children":[{"type":"block","kind":"notebook-content","data":{"cell_marker":"\"\"\""},"children":[{"type":"paragraph","position":{"start":{"line":4,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Plot a 1000-hPa map calculating the geostrophic from MetPy and finding the\nageostrophic wind from the total wind and the geostrophic wind.","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"CKsjGEnL8e"}],"key":"LvWPp9QuAS"},{"type":"paragraph","position":{"start":{"line":7,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"This uses the geostrophic wind calculation from ","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"m50s1UwDtB"},{"type":"inlineCode","value":"metpy.calc","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"rqtmMEWa8M"},{"type":"text","value":" to find\nthe geostrophic wind, then performs the simple subtraction to find the ageostrophic\nwind. Currently, this needs an extra helper function to calculate\nthe distance between lat/lon grid points.","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"a5k9r5Go9x"}],"key":"FPcqvcjxGm"},{"type":"paragraph","position":{"start":{"line":12,"column":1},"end":{"line":13,"column":1}},"children":[{"type":"text","value":"Additionally, we utilize the ","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"key":"Hmb97eZusF"},{"type":"inlineCode","value":"ndimage.zoom","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"key":"YST6ySPGDT"},{"type":"text","value":" method for smoothing the 1000-hPa\nheight contours without smoothing the data.","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"key":"cHTfEhIU3R"}],"key":"j0EBfzDIZ9"}],"key":"nVEtn2A6Nz"},{"type":"block","kind":"notebook-content","data":{"cell_marker":"########################################","lines_to_next_cell":0},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Imports","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"XmotAwsHkN"}],"key":"G60DsJ5AMy"}],"key":"Um80oXuAxM"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"from datetime import datetime, timedelta\n\nimport cartopy.crs as ccrs\nimport cartopy.feature as cfeature\nimport matplotlib.pyplot as plt\nimport metpy.calc as mpcalc\nimport numpy as np\nfrom scipy import ndimage\nfrom siphon.catalog import TDSCatalog\nfrom xarray.backends import NetCDF4DataStore\nimport xarray as xr","key":"xd8W2TI3Gc"},{"type":"output","id":"HTw1xw_krlcAc0zbr-PeR","data":[],"key":"p9V2YyftwI"}],"key":"FrUfHdDhYb"},{"type":"block","kind":"notebook-content","data":{"cell_marker":"########################################"},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Set up access to the data","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"toTovF8dN2"}],"key":"H5BipGbYL9"}],"key":"VmrUKaGhHe"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"dt = datetime(2016, 8, 22, 18)\nforecast_hour = 3\nh = timedelta(hours=forecast_hour)\n\n# Assemble our URL to the THREDDS Data Server catalog,\n# and access our desired dataset within via NCSS\nbase_url = 'https://www.ncei.noaa.gov/thredds/model-gfs-g4-anl-files-old/'\ncat = TDSCatalog(f'{base_url}{dt:%Y%m}/{dt:%Y%m%d}/catalog.xml')\nncss = cat.datasets[f'gfsanl_4_{dt:%Y%m%d}_{dt:%H}'\n                    f'00_00{forecast_hour}.grb2'].subset()\n\n# Create NCSS query for our desired time, region, and data variables\nquery = ncss.query()\n\nquery.lonlat_box(north=50, south=30, east=-80, west=-115)\nquery.time(dt + h)\nquery.variables('Geopotential_height_isobaric',\n                'u-component_of_wind_isobaric',\n                'v-component_of_wind_isobaric')\nquery.vertical_level(100000)\n\ndata = ncss.get_data(query)\n\nds = xr.open_dataset(NetCDF4DataStore(data)).metpy.parse_cf()","key":"nAF8kiUs8h"},{"type":"output","id":"TXs3OuLo2BMOm1EpgnM9D","data":[{"output_type":"error","traceback":"\u001b[31m---------------------------------------------------------------------------\u001b[39m\n\u001b[31mHTTPError\u001b[39m                                 Traceback (most recent call last)\n\u001b[36mCell\u001b[39m\u001b[36m \u001b[39m\u001b[32mIn[2]\u001b[39m\u001b[32m, line 8\u001b[39m\n\u001b[32m      5\u001b[39m \u001b[38;5;66;03m# Assemble our URL to the THREDDS Data Server catalog,\u001b[39;00m\n\u001b[32m      6\u001b[39m \u001b[38;5;66;03m# and access our desired dataset within via NCSS\u001b[39;00m\n\u001b[32m      7\u001b[39m base_url = \u001b[33m'\u001b[39m\u001b[33mhttps://www.ncei.noaa.gov/thredds/model-gfs-g4-anl-files-old/\u001b[39m\u001b[33m'\u001b[39m\n\u001b[32m----> \u001b[39m\u001b[32m8\u001b[39m cat = \u001b[43mTDSCatalog\u001b[49m\u001b[43m(\u001b[49m\u001b[33;43mf\u001b[39;49m\u001b[33;43m'\u001b[39;49m\u001b[38;5;132;43;01m{\u001b[39;49;00m\u001b[43mbase_url\u001b[49m\u001b[38;5;132;43;01m}\u001b[39;49;00m\u001b[38;5;132;43;01m{\u001b[39;49;00m\u001b[43mdt\u001b[49m\u001b[38;5;132;43;01m:\u001b[39;49;00m\u001b[33;43m%Y%m\u001b[39;49m\u001b[38;5;132;43;01m}\u001b[39;49;00m\u001b[33;43m/\u001b[39;49m\u001b[38;5;132;43;01m{\u001b[39;49;00m\u001b[43mdt\u001b[49m\u001b[38;5;132;43;01m:\u001b[39;49;00m\u001b[33;43m%Y%m%d\u001b[39;49m\u001b[38;5;132;43;01m}\u001b[39;49;00m\u001b[33;43m/catalog.xml\u001b[39;49m\u001b[33;43m'\u001b[39;49m\u001b[43m)\u001b[49m\n\u001b[32m      9\u001b[39m ncss = cat.datasets[\u001b[33mf\u001b[39m\u001b[33m'\u001b[39m\u001b[33mgfsanl_4_\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mdt\u001b[38;5;132;01m:\u001b[39;00m\u001b[33m%Y%m%d\u001b[39m\u001b[38;5;132;01m}\u001b[39;00m\u001b[33m_\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mdt\u001b[38;5;132;01m:\u001b[39;00m\u001b[33m%H\u001b[39m\u001b[38;5;132;01m}\u001b[39;00m\u001b[33m'\u001b[39m\n\u001b[32m     10\u001b[39m                     \u001b[33mf\u001b[39m\u001b[33m'\u001b[39m\u001b[33m00_00\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mforecast_hour\u001b[38;5;132;01m}\u001b[39;00m\u001b[33m.grb2\u001b[39m\u001b[33m'\u001b[39m].subset()\n\u001b[32m     12\u001b[39m \u001b[38;5;66;03m# Create NCSS query for our desired time, region, and data variables\u001b[39;00m\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/metpy-cookbook/lib/python3.13/site-packages/siphon/catalog.py:289\u001b[39m, in \u001b[36mTDSCatalog.__init__\u001b[39m\u001b[34m(self, catalog_url)\u001b[39m\n\u001b[32m    287\u001b[39m \u001b[38;5;66;03m# get catalog.xml file\u001b[39;00m\n\u001b[32m    288\u001b[39m resp = \u001b[38;5;28mself\u001b[39m.session.get(catalog_url)\n\u001b[32m--> \u001b[39m\u001b[32m289\u001b[39m \u001b[43mresp\u001b[49m\u001b[43m.\u001b[49m\u001b[43mraise_for_status\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m    291\u001b[39m \u001b[38;5;66;03m# top level server url\u001b[39;00m\n\u001b[32m    292\u001b[39m \u001b[38;5;28mself\u001b[39m.catalog_url = resp.url\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/metpy-cookbook/lib/python3.13/site-packages/requests/models.py:1026\u001b[39m, in \u001b[36mResponse.raise_for_status\u001b[39m\u001b[34m(self)\u001b[39m\n\u001b[32m   1021\u001b[39m     http_error_msg = (\n\u001b[32m   1022\u001b[39m         \u001b[33mf\u001b[39m\u001b[33m\"\u001b[39m\u001b[38;5;132;01m{\u001b[39;00m\u001b[38;5;28mself\u001b[39m.status_code\u001b[38;5;132;01m}\u001b[39;00m\u001b[33m Server Error: \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mreason\u001b[38;5;132;01m}\u001b[39;00m\u001b[33m for url: \u001b[39m\u001b[38;5;132;01m{\u001b[39;00m\u001b[38;5;28mself\u001b[39m.url\u001b[38;5;132;01m}\u001b[39;00m\u001b[33m\"\u001b[39m\n\u001b[32m   1023\u001b[39m     )\n\u001b[32m   1025\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m http_error_msg:\n\u001b[32m-> \u001b[39m\u001b[32m1026\u001b[39m     \u001b[38;5;28;01mraise\u001b[39;00m HTTPError(http_error_msg, response=\u001b[38;5;28mself\u001b[39m)\n\n\u001b[31mHTTPError\u001b[39m: 404 Client Error:  for url: https://www.ncei.noaa.gov/thredds/model-gfs-g4-anl-files-old/201608/20160822/catalog.xml","ename":"HTTPError","evalue":"404 Client Error:  for url: https://www.ncei.noaa.gov/thredds/model-gfs-g4-anl-files-old/201608/20160822/catalog.xml"}],"key":"nrVn7HDS2P"}],"key":"Svmv47ECSb"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Pull out variables you want to use\nheight = ds.Geopotential_height_isobaric.squeeze()\nu_wind = ds['u-component_of_wind_isobaric'].squeeze().metpy.quantify()\nv_wind = ds['v-component_of_wind_isobaric'].squeeze().metpy.quantify()\n\nvtime = height.time.values.squeeze().astype('datetime64[ms]').astype('O')\n\nlat = ds.lat\nlon = ds.lon","key":"tnaDUElt3q"},{"type":"output","id":"P_pV7X4Q7ZdQhD3W8IfUD","data":[],"key":"ks3X8H9AMM"}],"key":"X3Nk2EWWeA"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Combine 1D latitude and longitudes into a 2D grid of locations\nlon_2d, lat_2d = np.meshgrid(lon, lat)\n\n# Smooth height data\nheight = mpcalc.smooth_n_point(height, 9, 3)\n\n# Compute the geostrophic wind\ngeo_wind_u, geo_wind_v = mpcalc.geostrophic_wind(height)\n\n# Calculate ageostrophic wind components\nageo_wind_u = u_wind - geo_wind_u\nageo_wind_v = v_wind - geo_wind_v","key":"B3ZNN0SYPY"},{"type":"output","id":"EZh5zLvHcwC3od1NCUgKz","data":[],"key":"jkri0fpC8D"}],"key":"lpAU6YFDb4"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Create new figure\nfig = plt.figure(figsize=(15, 10), facecolor='black')\n\n# Add the map and set the extent\nax = plt.axes(projection=ccrs.PlateCarree())\nax.set_extent([-105., -93., 35., 43.])\nax.patch.set_fill(False)\n\n# Add state boundaries to plot\nax.add_feature(cfeature.STATES, edgecolor='white', linewidth=2)\n\n# Contour the heights every 10 m\ncontours = np.arange(10, 200, 10)\n# Because we have a very local graphics area, the contours have joints\n# to smooth those out we can use `ndimage.zoom`\nzoom_500 = mpcalc.zoom_xarray(height, 5)\nc = ax.contour(zoom_500.lon, zoom_500.lat, zoom_500, levels=contours,\n               colors='red', linewidths=4)\nax.clabel(c, fontsize=12, inline=1, inline_spacing=3, fmt='%i')\n\n# Set up parameters for quiver plot. The slices below are used to\n# subset the data (here taking every 4th point in x and y). The\n# quiver_kwargs are parameters to control the appearance of the\n# quiver so that they stay consistent between the calls.\nquiver_slices = (slice(None, None, 2), slice(None, None, 2))\nquiver_kwargs = {'headlength': 4, 'headwidth': 3, 'angles': 'uv',\n                 'scale_units': 'xy', 'scale': 20}\n\n# Plot the wind vectors\nwind = ax.quiver(lon_2d[quiver_slices], lat_2d[quiver_slices],\n                 u_wind[quiver_slices], v_wind[quiver_slices],\n                 color='blue', **quiver_kwargs)\ngeo = ax.quiver(lon_2d[quiver_slices], lat_2d[quiver_slices],\n                geo_wind_u[quiver_slices], geo_wind_v[quiver_slices],\n                color='darkorchid', **quiver_kwargs)\nageo = ax.quiver(lon_2d[quiver_slices], lat_2d[quiver_slices],\n                 ageo_wind_u[quiver_slices], ageo_wind_v[quiver_slices],\n                 color='lime', **quiver_kwargs)\n\n# Add a title to the plot\nplt.title('1000mb Geopotential Heights(m), Wind(blue), '\n          'Geostrophic Wind(purple), and \\n Ageostrophic Wind(green) '\n          f'for {vtime:%d %B %Y %H:%MZ}', color='white', size=14)","key":"Gp45a25Exe"},{"type":"output","id":"4i26rP-AUFsmyKR6qp7Vi","data":[],"key":"AOcV67pCOM"}],"key":"tfeEg226xk"}],"key":"CAGaotEAiW"},"references":{"cite":{"order":[],"data":{}}},"footer":{"navigation":{"prev":{"title":"850 hPa Temperature Advection","url":"/notebooks/synoptic/hpa-temperature-advection","group":"The MetPy Gallery"},"next":{"title":"Analytic 300-hPa Trough","url":"/notebooks/synoptic/analytic-300hpa-trough","group":"The MetPy Gallery"}}},"domain":"http://localhost:3000"}