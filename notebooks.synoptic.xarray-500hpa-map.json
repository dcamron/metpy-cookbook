{"version":2,"kind":"Notebook","sha256":"b7fa6c4c8e023343fe86561aaeb470b0ca139480f82f29d8471b7e7dc6db52d8","slug":"notebooks.synoptic.xarray-500hpa-map","location":"/notebooks/synoptic/xarray_500hPa_map.ipynb","dependencies":[],"frontmatter":{"title":"Using Xarray for Data read and selection","content_includes_title":false,"kernelspec":{"name":"python3","display_name":"Python 3 (ipykernel)","language":"python"},"authors":[{"nameParsed":{"literal":"MetPy Maintainers","given":"MetPy","family":"Maintainers"},"name":"MetPy Maintainers","id":"contributors-myst-generated-uid-0"}],"open_access":true,"license":{"content":{"id":"CC-BY-4.0","url":"https://creativecommons.org/licenses/by/4.0/","name":"Creative Commons Attribution 4.0 International","free":true,"CC":true},"code":{"id":"Apache-2.0","url":"https://opensource.org/licenses/Apache-2.0","name":"Apache License 2.0","free":true,"osi":true}},"github":"https://github.com/projectpythia/metpy-cookbook","copyright":"2025","affiliations":[{"id":"UAlbany","name":"University at Albany (SUNY)","department":"Atmospheric and Environmental Sciences","url":"https://www.albany.edu/daes"},{"id":"CISL","name":"NSF National Center for Atmospheric Research","department":"Computational and Information Systems Lab","url":"https://www.cisl.ucar.edu"},{"id":"Unidata","name":"NSF Unidata","url":"https://www.unidata.ucar.edu"},{"id":"Argonne","name":"Argonne National Laboratory","department":"Environmental Science Division","url":"https://www.anl.gov/evs"},{"id":"CarbonPlan","name":"CarbonPlan","url":"https://carbonplan.org"},{"id":"NVIDIA","name":"NVIDIA Corporation","url":"https://www.nvidia.com/"}],"settings":{"output_matplotlib_strings":"remove"},"numbering":{"title":{"offset":2}},"edit_url":"https://github.com/projectpythia/metpy-cookbook/blob/main/notebooks/synoptic/xarray_500hPa_map.ipynb","exports":[{"format":"ipynb","filename":"xarray_500hPa_map.ipynb","url":"/metpy-cookbook/build/xarray_500hPa_map-078bc275775dca211146f5d0b42ba0db.ipynb"}]},"widgets":{},"mdast":{"type":"root","children":[{"type":"block","kind":"notebook-content","data":{"cell_marker":"\"\"\"","lines_to_next_cell":0},"children":[{"type":"paragraph","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"Use Xarray module to read in model data from nomads server.","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"ZnkDiNpnR9"}],"key":"QqU0Q1AwvF"},{"type":"paragraph","position":{"start":{"line":6,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"text","value":"This example uses the xarray module to access data from the nomads server for\narchive NAM analysis data via OPeNDAP. Xarray makes it easier to select times\nand levels, although you still have to know the coordinate variable name. A\nsimple 500 hPa plot is created after selecting with xarray.","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"LHt9qGACtg"}],"key":"U1uZiz8D2T"}],"key":"tr5x71RnNM"},{"type":"block","kind":"notebook-content","data":{"cell_marker":"########################################","lines_to_next_cell":0},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Import all of our needed modules","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"b88wjibjeR"}],"key":"rduiPFwsvZ"}],"key":"k0y41Zm39e"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"from datetime import datetime\n\nimport cartopy.crs as ccrs\nimport cartopy.feature as cfeature\nimport matplotlib.pyplot as plt\nimport metpy.calc as mpcalc\nfrom metpy.units import units\nimport numpy as np\nimport xarray as xr","key":"hIRC7b1SOq"},{"type":"output","id":"U3eNd-8eZLbVVMtDiyCCt","data":[],"key":"Z9N8J3Fv2W"}],"key":"ClrtCW1xZw"},{"type":"block","kind":"notebook-content","data":{"cell_marker":"########################################"},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Accessing data using Xarray","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"cS6wxGulH3"}],"identifier":"accessing-data-using-xarray","label":"Accessing data using Xarray","html_id":"accessing-data-using-xarray","implicit":true,"key":"XeRqJ0riDj"}],"key":"FhfjJh4IKl"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Specify our date/time of product desired\ndt = datetime(2016, 4, 16, 18)\n\n# Construct our OPeNDAP access URL\nbase_url = 'https://www.ncei.noaa.gov/thredds/dodsC/model-namanl-old/'\ndata = xr.open_dataset(f'{base_url}{dt:%Y%m}/{dt:%Y%m%d}/'\n                       f'namanl_218_{dt:%Y%m%d}_{dt:%H}00_000.grb').metpy.parse_cf()","key":"j0q018l9by"},{"type":"output","id":"gt7SOP5LkFNUx0HyPAeSU","data":[],"key":"OTaSB1xqvl"}],"key":"mBO8dATPTp"},{"type":"block","kind":"notebook-content","data":{"cell_marker":"########################################"},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"NAM data is in a projected coordinate and you get back the projection\nX and Y values in km","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"qubKXBTogk"}],"key":"tIiA9dGL3W"}],"key":"agjPKuqqH3"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Create a 2-d meshgrid of our x, y coordinates\n# manually converted to meters (km * 1000)\n#x, y = np.meshgrid(data['x'].values * 1000, data['y'].values * 1000)\nx = data.Geopotential_height_isobaric.metpy.x.metpy.convert_units('meter').values\ny = data.Geopotential_height_isobaric.metpy.y.metpy.convert_units('meter').values","key":"QxsMjAXvUY"},{"type":"output","id":"zZfcWGaOTHeaW8kbPyn5i","data":[],"key":"CxlfV5Fd0m"}],"key":"awFM08W2Xb"},{"type":"block","kind":"notebook-content","data":{"cell_marker":"########################################"},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Getting the valid times in a more useable format","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"HUS8o5iLH8"}],"key":"P7YRUvBvbG"}],"key":"HRswuSiW5c"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Get the valid times from the file\nvtimes = data.Geopotential_height_isobaric.metpy.time.data.astype('datetime64[ms]').astype('O')\nprint(vtimes)","key":"iw31GdRDn7"},{"type":"output","id":"Bg8FGHq9qOxmJnaqtNoVZ","data":[{"output_type":"stream","name":"stdout","text":"[datetime.datetime(2016, 4, 16, 18, 0)]\n"}],"key":"w4w87D0ACw"}],"key":"biGNnOLjxL"},{"type":"block","kind":"notebook-content","data":{"cell_marker":"########################################"},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Xarray has some nice functionality to choose the time and level that\nyou specifically want to use. In this example the time variable is ‘time’ and\nthe level variable is ‘isobaric1’. Unfortunately, these can be different with\neach file you use, so you’ll always need to check what they are by listing\nthe coordinate variable names","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"KYy9bLSULn"}],"key":"bgXu3hmhhL"}],"key":"eg3j7W48dr"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# print(data.Geopotential_height.coords)\nhght_500 = data.Geopotential_height_isobaric.metpy.sel(time1=vtimes[0], vertical=500*units.hPa)\nuwnd_500 = data['u-component_of_wind_isobaric'].metpy.sel(time1=vtimes[0], vertical=500*units.hPa)\nvwnd_500 = data['v-component_of_wind_isobaric'].metpy.sel(time1=vtimes[0], vertical=500*units.hPa)","key":"MOBF1qI9uJ"},{"type":"output","id":"90FBch41NMvnEXOiW9pni","data":[],"key":"LhDvPov3v1"}],"key":"a5aYwwiaSd"},{"type":"block","kind":"notebook-content","data":{"cell_marker":"########################################"},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Now make the 500-hPa map","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"e7A22xpGYg"}],"identifier":"now-make-the-500-hpa-map","label":"Now make the 500-hPa map","html_id":"now-make-the-500-hpa-map","implicit":true,"key":"eyowBRb0fG"}],"key":"NrFobN2YY7"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Must set data projection, NAM is LCC projection\ndatacrs = data.Geopotential_height_isobaric.metpy.cartopy_crs\n\n# A different LCC projection for the plot.\nplotcrs = ccrs.LambertConformal(central_latitude=45., central_longitude=-100.,\n                                standard_parallels=[30, 60])\n\nfig = plt.figure(figsize=(17., 11.))\nax = plt.axes(projection=plotcrs)\nax.coastlines('50m', edgecolor='black')\nax.add_feature(cfeature.STATES, linewidth=0.5)\nax.set_extent([-130, -67, 20, 50], ccrs.PlateCarree())\n\nclev500 = np.arange(5100, 6000, 60)\ncs = ax.contour(x, y, mpcalc.smooth_n_point(hght_500, 9, 5), clev500,\n                colors='k', linewidths=2.5, linestyles='solid', transform=datacrs)\nax.clabel(cs, fontsize=12, colors='k', inline=1, inline_spacing=8,\n          fmt='%i', rightside_up=True, use_clabeltext=True)\n\n# Here we put boxes around the clabels with a black boarder white facecolor\n# `labelTexts` necessary as ~cartopy.mpl.contour.GeoContourSet.clabel\n# does not return list of texts as of 0.18\nfor t in cs.labelTexts:\n    t.set_bbox({'fc': 'w'})\n\n# Transform Vectors before plotting, then plot wind barbs.\nwind_slice = slice(None, None, 16)\nax.barbs(x[wind_slice], y[wind_slice],\n         uwnd_500.data[wind_slice, wind_slice], vwnd_500.data[wind_slice, wind_slice],\n         length=7, transform=datacrs)\n\n# Add some titles to make the plot readable by someone else\nplt.title('500-hPa Geopotential Heights (m)', loc='left')\nplt.title(f'VALID: {vtimes[0]}', loc='right');","key":"eIpLF8W1n0"},{"type":"output","id":"ar8pLd_RLVItBm5OtW30q","data":[{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 1700x1100 with 1 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"b1a31fcdcb67e714058528ea64dd0bc6","path":"/metpy-cookbook/build/b1a31fcdcb67e714058528ea64dd0bc6.png"}}}],"key":"DoHFNqTAm8"}],"key":"OxeKymguYg"}],"key":"VESNOIDfur"},"references":{"cite":{"order":[],"data":{}}},"footer":{"navigation":{"prev":{"title":"Calculating Wind Shear","url":"/notebooks/synoptic/wind-shear-vectors-example","group":"The MetPy Gallery"},"next":{"title":"Skew-T Analysis","url":"/notebooks/skewt","group":"The MetPy Gallery"}}},"domain":"http://localhost:3000"}