{"version":2,"kind":"Notebook","sha256":"2326ea24e03c9cff5d45a663f26c0441ba18a3763e36cc47359056a589f69366","slug":"notebooks.synoptic.hpa-temperature-advection","location":"/notebooks/synoptic/850hPa_Temperature_Advection.ipynb","dependencies":[],"frontmatter":{"title":"850 hPa Temperature Advection","content_includes_title":false,"kernelspec":{"name":"python3","display_name":"Python 3 (ipykernel)","language":"python"},"authors":[{"nameParsed":{"literal":"MetPy Maintainers","given":"MetPy","family":"Maintainers"},"name":"MetPy Maintainers","id":"contributors-myst-generated-uid-0"}],"open_access":true,"license":{"content":{"id":"CC-BY-4.0","url":"https://creativecommons.org/licenses/by/4.0/","name":"Creative Commons Attribution 4.0 International","free":true,"CC":true},"code":{"id":"Apache-2.0","url":"https://opensource.org/licenses/Apache-2.0","name":"Apache License 2.0","free":true,"osi":true}},"github":"https://github.com/projectpythia/metpy-cookbook","copyright":"2025","affiliations":[{"id":"UAlbany","name":"University at Albany (SUNY)","department":"Atmospheric and Environmental Sciences","url":"https://www.albany.edu/daes"},{"id":"CISL","name":"NSF National Center for Atmospheric Research","department":"Computational and Information Systems Lab","url":"https://www.cisl.ucar.edu"},{"id":"Unidata","name":"NSF Unidata","url":"https://www.unidata.ucar.edu"},{"id":"Argonne","name":"Argonne National Laboratory","department":"Environmental Science Division","url":"https://www.anl.gov/evs"},{"id":"CarbonPlan","name":"CarbonPlan","url":"https://carbonplan.org"},{"id":"NVIDIA","name":"NVIDIA Corporation","url":"https://www.nvidia.com/"}],"settings":{"output_matplotlib_strings":"remove"},"numbering":{"title":{"offset":2}},"edit_url":"https://github.com/projectpythia/metpy-cookbook/blob/main/notebooks/synoptic/850hPa_Temperature_Advection.ipynb","exports":[{"format":"ipynb","filename":"850hPa_Temperature_Advection.ipynb","url":"/metpy-cookbook/build/850hPa_Temperature_A-edb726c019d0f6711c8f9af7dd8d2484.ipynb"}]},"widgets":{},"mdast":{"type":"root","children":[{"type":"block","kind":"notebook-content","data":{"cell_marker":"\"\"\""},"children":[{"type":"paragraph","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"Plot an 850 hPa map with calculating advection using MetPy.","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"hnfkC2TS0U"}],"key":"t3zv0cw3QC"},{"type":"paragraph","position":{"start":{"line":6,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"Beyond just plotting 850-hPa level data, this uses calculations from ","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"yd1ZmnF6qD"},{"type":"inlineCode","value":"metpy.calc","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"OTrdoRXMED"},{"type":"text","value":" to find\nthe temperature advection. Currently, this needs an extra helper function to calculate\nthe distance between lat/lon grid points.","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"XHEUVyCLrY"}],"key":"IYXOUnukjq"}],"key":"aO8YOqyZP3"},{"type":"block","kind":"notebook-content","data":{"cell_marker":"###############################","lines_to_next_cell":0},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Imports","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"EAdNN9vbsr"}],"key":"dLj65UBtIc"}],"key":"uhvrirvxuY"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"from datetime import datetime\n\nimport cartopy.crs as ccrs\nimport cartopy.feature as cfeature\nimport matplotlib.pyplot as plt\nimport metpy.calc as mpcalc\nimport numpy as np\nfrom metpy.units import units\nfrom siphon.catalog import TDSCatalog\nfrom xarray.backends import NetCDF4DataStore\nimport xarray as xr","key":"WqNhpv4uDr"},{"type":"output","id":"nTg7yDMGcPVidcldUWKa6","data":[],"key":"EZM1rprJX2"}],"key":"i75QzcEvxC"},{"type":"block","kind":"notebook-content","data":{"cell_marker":"###############################################"},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Create NCSS object to access the NetcdfSubset","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"cdHFapwHEP"}],"identifier":"create-ncss-object-to-access-the-netcdfsubset","label":"Create NCSS object to access the NetcdfSubset","html_id":"create-ncss-object-to-access-the-netcdfsubset","implicit":true,"key":"eVu4WvkZxV"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Data from NCEI GFS 0.5 deg Analysis Archive","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"Nk8TCkBXCX"}],"key":"CIuh1NQIVz"}],"key":"CoOjwEmIPD"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"dt = datetime(2017, 4, 5, 12)\n\n# Assemble our URL to the THREDDS Data Server catalog,\n# and access our desired dataset within via NCSS\nbase_url = 'https://www.ncei.noaa.gov/thredds/model-gfs-g4-anl-files-old/'\ncat = TDSCatalog(f'{base_url}{dt:%Y%m}/{dt:%Y%m%d}/catalog.xml')\nncss = cat.datasets[f'gfsanl_4_{dt:%Y%m%d}_{dt:%H}00_000.grb2'].subset()\n\n# Create NCSS query for our desired time, region, and data variables\nquery = ncss.query()\n\nquery.time(dt)\nquery.lonlat_box(north=65, south=15, east=310, west=220)\nquery.accept('netcdf')\nquery.variables('Geopotential_height_isobaric',\n                'Temperature_isobaric',\n                'u-component_of_wind_isobaric',\n                'v-component_of_wind_isobaric')\n\n# Obtain the queried data\ndata = ncss.get_data(query)\n\n# Make into an xarray Dataset object\nds = xr.open_dataset(NetCDF4DataStore(data)).metpy.parse_cf()\n\n# Pull out variables you want to use\nlevel = 850 * units.hPa\nhght_850 = ds.Geopotential_height_isobaric.metpy.sel(\n    vertical=level).squeeze()\ntemp_850 = ds.Temperature_isobaric.metpy.sel(\n    vertical=level).squeeze()\nu_wind_850 = ds['u-component_of_wind_isobaric'].metpy.sel(\n    vertical=level).squeeze()\nv_wind_850 = ds['v-component_of_wind_isobaric'].metpy.sel(\n    vertical=level).squeeze()\ntime = hght_850.metpy.time\nlat = ds.lat.values\nlon = ds.lon.values\n\n# Convert number of hours since the reference time into an actual date\nvtime = time.values.astype('datetime64[ms]').astype('O')\n\n# Combine 1D latitude and longitudes into a 2D grid of locations\nlon_2d, lat_2d = np.meshgrid(lon, lat)","key":"G4MJS39K3q"},{"type":"output","id":"6J0gZeIZphf22uqhhpqfW","data":[{"output_type":"error","traceback":"\u001b[31m---------------------------------------------------------------------------\u001b[39m\n\u001b[31mHTTPError\u001b[39m                                 Traceback (most recent call last)\n\u001b[36mCell\u001b[39m\u001b[36m \u001b[39m\u001b[32mIn[2]\u001b[39m\u001b[32m, line 6\u001b[39m\n\u001b[32m      3\u001b[39m \u001b[38;5;66;03m# Assemble our URL to the THREDDS Data Server catalog,\u001b[39;00m\n\u001b[32m      4\u001b[39m \u001b[38;5;66;03m# and access our desired dataset within via NCSS\u001b[39;00m\n\u001b[32m      5\u001b[39m base_url = \u001b[33m'\u001b[39m\u001b[33mhttps://www.ncei.noaa.gov/thredds/model-gfs-g4-anl-files-old/\u001b[39m\u001b[33m'\u001b[39m\n\u001b[32m----> \u001b[39m\u001b[32m6\u001b[39m cat = \u001b[43mTDSCatalog\u001b[49m\u001b[43m(\u001b[49m\u001b[33;43mf\u001b[39;49m\u001b[33;43m'\u001b[39;49m\u001b[38;5;132;43;01m{\u001b[39;49;00m\u001b[43mbase_url\u001b[49m\u001b[38;5;132;43;01m}\u001b[39;49;00m\u001b[38;5;132;43;01m{\u001b[39;49;00m\u001b[43mdt\u001b[49m\u001b[38;5;132;43;01m:\u001b[39;49;00m\u001b[33;43m%Y%m\u001b[39;49m\u001b[38;5;132;43;01m}\u001b[39;49;00m\u001b[33;43m/\u001b[39;49m\u001b[38;5;132;43;01m{\u001b[39;49;00m\u001b[43mdt\u001b[49m\u001b[38;5;132;43;01m:\u001b[39;49;00m\u001b[33;43m%Y%m%d\u001b[39;49m\u001b[38;5;132;43;01m}\u001b[39;49;00m\u001b[33;43m/catalog.xml\u001b[39;49m\u001b[33;43m'\u001b[39;49m\u001b[43m)\u001b[49m\n\u001b[32m      7\u001b[39m ncss = cat.datasets[\u001b[33mf\u001b[39m\u001b[33m'\u001b[39m\u001b[33mgfsanl_4_\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mdt\u001b[38;5;132;01m:\u001b[39;00m\u001b[33m%Y%m%d\u001b[39m\u001b[38;5;132;01m}\u001b[39;00m\u001b[33m_\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mdt\u001b[38;5;132;01m:\u001b[39;00m\u001b[33m%H\u001b[39m\u001b[38;5;132;01m}\u001b[39;00m\u001b[33m00_000.grb2\u001b[39m\u001b[33m'\u001b[39m].subset()\n\u001b[32m      9\u001b[39m \u001b[38;5;66;03m# Create NCSS query for our desired time, region, and data variables\u001b[39;00m\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/metpy-cookbook/lib/python3.13/site-packages/siphon/catalog.py:289\u001b[39m, in \u001b[36mTDSCatalog.__init__\u001b[39m\u001b[34m(self, catalog_url)\u001b[39m\n\u001b[32m    287\u001b[39m \u001b[38;5;66;03m# get catalog.xml file\u001b[39;00m\n\u001b[32m    288\u001b[39m resp = \u001b[38;5;28mself\u001b[39m.session.get(catalog_url)\n\u001b[32m--> \u001b[39m\u001b[32m289\u001b[39m \u001b[43mresp\u001b[49m\u001b[43m.\u001b[49m\u001b[43mraise_for_status\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m    291\u001b[39m \u001b[38;5;66;03m# top level server url\u001b[39;00m\n\u001b[32m    292\u001b[39m \u001b[38;5;28mself\u001b[39m.catalog_url = resp.url\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/metpy-cookbook/lib/python3.13/site-packages/requests/models.py:1026\u001b[39m, in \u001b[36mResponse.raise_for_status\u001b[39m\u001b[34m(self)\u001b[39m\n\u001b[32m   1021\u001b[39m     http_error_msg = (\n\u001b[32m   1022\u001b[39m         \u001b[33mf\u001b[39m\u001b[33m\"\u001b[39m\u001b[38;5;132;01m{\u001b[39;00m\u001b[38;5;28mself\u001b[39m.status_code\u001b[38;5;132;01m}\u001b[39;00m\u001b[33m Server Error: \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mreason\u001b[38;5;132;01m}\u001b[39;00m\u001b[33m for url: \u001b[39m\u001b[38;5;132;01m{\u001b[39;00m\u001b[38;5;28mself\u001b[39m.url\u001b[38;5;132;01m}\u001b[39;00m\u001b[33m\"\u001b[39m\n\u001b[32m   1023\u001b[39m     )\n\u001b[32m   1025\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m http_error_msg:\n\u001b[32m-> \u001b[39m\u001b[32m1026\u001b[39m     \u001b[38;5;28;01mraise\u001b[39;00m HTTPError(http_error_msg, response=\u001b[38;5;28mself\u001b[39m)\n\n\u001b[31mHTTPError\u001b[39m: 404 Client Error:  for url: https://www.ncei.noaa.gov/thredds/model-gfs-g4-anl-files-old/201704/20170405/catalog.xml","ename":"HTTPError","evalue":"404 Client Error:  for url: https://www.ncei.noaa.gov/thredds/model-gfs-g4-anl-files-old/201704/20170405/catalog.xml"}],"key":"Vkp2SMONgB"}],"key":"JIEx2ZofH3"},{"type":"block","kind":"notebook-content","data":{"cell_marker":"###############################################"},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Begin data calculations","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"QcHOahSIq3"}],"identifier":"begin-data-calculations","label":"Begin data calculations","html_id":"begin-data-calculations","implicit":true,"key":"mh1Hs5soZ7"}],"key":"NPBoDXmY6b"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Calculate temperature advection using metpy function\nadv = mpcalc.advection(temp_850, u_wind_850, v_wind_850)\n\n# Smooth heights and advection a little\n# Be sure to only put in a 2D lat/lon or Y/X array for smoothing\nZ_850 = mpcalc.smooth_gaussian(hght_850, 2)\nadv = mpcalc.smooth_gaussian(adv, 2)","key":"p7jVQ1xog3"},{"type":"output","id":"bBsosBZGm7C6-c2g89HWP","data":[],"key":"mdRAv2Ov0B"}],"key":"z9pkzXPhuL"},{"type":"block","kind":"notebook-content","data":{"cell_marker":"###############################################"},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Begin map creation","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"RRWak0AWYV"}],"identifier":"begin-map-creation","label":"Begin map creation","html_id":"begin-map-creation","implicit":true,"key":"L9CzcwepIw"}],"key":"fHlnBkxrxX"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Set Projection of Data\ndatacrs = ccrs.PlateCarree()\n\n# Set Projection of Plot\nplotcrs = ccrs.LambertConformal(central_latitude=45,\n                                central_longitude=-100, standard_parallels=[30, 60])\n\n# Create new figure\nfig = plt.figure(figsize=(14, 12))\n\n# Add the map and set the extent\nax = plt.subplot(111, projection=plotcrs)\nplt.title(f'850mb Temperature Advection for {vtime:%d %B %Y %H:%MZ}',\n          fontsize=16)\nax.set_extent([235., 290., 20., 55.])\n\n# Add state/country boundaries to plot\nax.add_feature(cfeature.STATES)\nax.add_feature(cfeature.BORDERS)\n\n# Plot Height Contours\nclev850 = np.arange(900, 3000, 30)\ncs = ax.contour(lon_2d, lat_2d, Z_850, clev850, colors='black', linewidths=1.5,\n                linestyles='solid', transform=datacrs)\nplt.clabel(cs, fontsize=10, inline=1, inline_spacing=10, fmt='%i',\n           rightside_up=True, use_clabeltext=True)\n\n# Plot Temperature Contours\nclevtemp850 = np.arange(-20, 20, 2)\ncs2 = ax.contour(lon_2d, lat_2d, temp_850.metpy.convert_units('degC'),\n                 clevtemp850, colors='grey', linewidths=1.25,\n                 linestyles='dashed', transform=datacrs)\nplt.clabel(cs2, fontsize=10, inline=1, inline_spacing=10, fmt='%i',\n           rightside_up=True, use_clabeltext=True)\n\n# Plot Colorfill of Temperature Advection\ncint = np.arange(-8, 9)\ncf = ax.contourf(lon_2d, lat_2d, 3*adv.metpy.convert_units('delta_degC/hour'),\n                 cint[cint != 0],\n                 extend='both', cmap='bwr', transform=datacrs)\ncb = plt.colorbar(cf, orientation='horizontal', pad=0, aspect=50,\n                  extendrect=True, ticks=cint)\ncb.set_label(r'$^{o}C/3h$', size='large')\n\nwind_slice = (slice(None, None, 10), slice(None, None, 10))\n# Plot Wind Barbs\nax.barbs(lon_2d[wind_slice], lat_2d[wind_slice],\n         u_wind_850.metpy.convert_units('kt').values[wind_slice],\n         v_wind_850.metpy.convert_units('kt').values[wind_slice],\n         length=6, pivot='middle', transform=datacrs);","key":"bZRiM0V4i7"},{"type":"output","id":"p5Q4FtLjMVZPSk6iI5f1J","data":[],"key":"gtdx3EDFMA"}],"key":"p1T7SXvvhC"}],"key":"iPtws6ru0O"},"references":{"cite":{"order":[],"data":{}}},"footer":{"navigation":{"prev":{"title":"QVector Example","url":"/notebooks/synoptic/hpa-qvectors","group":"The MetPy Gallery"},"next":{"title":"Geostrophic and Ageostrophic Wind","url":"/notebooks/synoptic/ageostrophic-wind-example","group":"The MetPy Gallery"}}},"domain":"http://localhost:3000"}