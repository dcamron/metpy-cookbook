{"version":2,"kind":"Notebook","sha256":"235ce57ebbb2d88f04467cf1d44161842b3682c50afb26db926ca6c53da53660","slug":"notebooks.synoptic.upperair-obs","location":"/notebooks/synoptic/Upperair_Obs.ipynb","dependencies":[],"frontmatter":{"title":"DIFAX Replication","content_includes_title":false,"kernelspec":{"name":"python3","display_name":"Python 3 (ipykernel)","language":"python"},"authors":[{"nameParsed":{"literal":"MetPy Maintainers","given":"MetPy","family":"Maintainers"},"name":"MetPy Maintainers","id":"contributors-myst-generated-uid-0"}],"open_access":true,"license":{"content":{"id":"CC-BY-4.0","url":"https://creativecommons.org/licenses/by/4.0/","name":"Creative Commons Attribution 4.0 International","free":true,"CC":true},"code":{"id":"Apache-2.0","url":"https://opensource.org/licenses/Apache-2.0","name":"Apache License 2.0","free":true,"osi":true}},"github":"https://github.com/projectpythia/metpy-cookbook","copyright":"2025","affiliations":[{"id":"UAlbany","name":"University at Albany (SUNY)","department":"Atmospheric and Environmental Sciences","url":"https://www.albany.edu/daes"},{"id":"CISL","name":"NSF National Center for Atmospheric Research","department":"Computational and Information Systems Lab","url":"https://www.cisl.ucar.edu"},{"id":"Unidata","name":"NSF Unidata","url":"https://www.unidata.ucar.edu"},{"id":"Argonne","name":"Argonne National Laboratory","department":"Environmental Science Division","url":"https://www.anl.gov/evs"},{"id":"CarbonPlan","name":"CarbonPlan","url":"https://carbonplan.org"},{"id":"NVIDIA","name":"NVIDIA Corporation","url":"https://www.nvidia.com/"}],"settings":{"output_matplotlib_strings":"remove"},"numbering":{"title":{"offset":2}},"edit_url":"https://github.com/projectpythia/metpy-cookbook/blob/main/notebooks/synoptic/Upperair_Obs.ipynb","exports":[{"format":"ipynb","filename":"Upperair_Obs.ipynb","url":"/metpy-cookbook/build/Upperair_Obs-352ed50d0685db10267f12b8b035deab.ipynb"}]},"widgets":{},"mdast":{"type":"root","children":[{"type":"block","kind":"notebook-content","data":{"cell_marker":"\"\"\""},"children":[{"type":"paragraph","position":{"start":{"line":4,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"This example replicates the traditional DIFAX images for upper-level\nobservations.","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"vFxco150ep"}],"key":"RPbg3xb7Rw"},{"type":"paragraph","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"By: Kevin Goebbert","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"WuP5Gq2705"}],"key":"q6N9NxnmMO"},{"type":"paragraph","position":{"start":{"line":9,"column":1},"end":{"line":12,"column":1}},"children":[{"type":"text","value":"Observation data comes from Iowa State Archive, accessed through the\nSiphon package. Contour data comes from the GFS 0.5 degree analysis.\nClassic upper-level data of Geopotential Height and Temperature are\nplotted.","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"UrdeEveSGZ"}],"key":"FVuXs0abi4"}],"key":"CaAxX8ptqS"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"import urllib.request\n\nfrom datetime import datetime, timedelta, UTC\n\nimport cartopy.crs as ccrs\nimport cartopy.feature as cfeature\nimport matplotlib.pyplot as plt\nfrom matplotlib.ticker import FixedLocator\nimport metpy.calc as mpcalc\nimport numpy as np\nimport xarray as xr\n\nfrom metpy.io import add_station_lat_lon\nfrom metpy.calc import find_peaks\nfrom metpy.plots import scattertext, StationPlot\nfrom metpy.units import units\nfrom siphon.simplewebservice.iastate import IAStateUpperAir","key":"HcA1vnpYPg"},{"type":"output","id":"GxmYv02ppWhQhhTbmDJHD","data":[],"key":"lKCmyfpgkk"}],"key":"HA3OAf03lr"},{"type":"block","kind":"notebook-content","data":{"cell_marker":"######################################################################"},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Observation Data","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"QU00kKxJ6D"}],"identifier":"observation-data","label":"Observation Data","html_id":"observation-data","implicit":true,"key":"KVEUflRjTH"},{"type":"paragraph","position":{"start":{"line":4,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Set a date and time for upper-air observations (should only be 00 or 12\nUTC for the hour).","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"BYmJnW342W"}],"key":"H33I6oWIZf"},{"type":"paragraph","position":{"start":{"line":7,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"text","value":"Request all data from Iowa State using the Siphon package. The result is\na pandas DataFrame containing all of the sounding data from all\navailable stations.","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"FYI47eqsP9"}],"key":"dv0I0SeC3r"}],"key":"OappH6OtPP"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Set date for desired UPA data\ntoday = datetime.now(UTC)\n\n# Go back one day to ensure data availability\ndate = datetime(today.year, today.month, today.day, 0) - timedelta(days=1)\n\n# Request data using Siphon request for data from Iowa State Archive\ndata = IAStateUpperAir.request_all_data(date)","key":"eMcDORzMrs"},{"type":"output","id":"oCdf4opXWnj8yX0n_w7ro","data":[],"key":"FqzR18B8TC"}],"key":"tCvSgv6Pxp"},{"type":"block","kind":"notebook-content","data":{"cell_marker":"######################################################################"},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Subset Observational Data","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"ZURKhXDq2f"}],"identifier":"subset-observational-data","label":"Subset Observational Data","html_id":"subset-observational-data","implicit":true,"key":"D6FGpnx9bj"},{"type":"paragraph","position":{"start":{"line":4,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"text","value":"From the request above will give all levels from all radisonde sites\navailable through the service. For plotting a pressure surface map there\nis only need to have the data from that level. Below the data is subset\nand a few parameters set based on the level chosen. Additionally, the\nstation information is obtained and latitude and longitude data is added\nto the DataFrame.","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"cROzIcaP25"}],"key":"RJcJCth423"}],"key":"TOymx31sMS"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"level = 500\n\nif (level == 925) | (level == 850) | (level == 700):\n    cint = 30\n    def hght_format(v): return format(v, '.0f')[1:]\nelif level == 500:\n    cint = 60\n    def hght_format(v): return format(v, '.0f')[:3]\nelif level == 300:\n    cint = 120\n    def hght_format(v): return format(v, '.0f')[:3]\nelif level < 300:\n    cint = 120\n    def hght_format(v): return format(v, '.0f')[1:4]\n\n# Create subset of all data for a given level\ndata_subset = data.pressure == level\ndf = data[data_subset]\n\n# Get station lat/lon from look-up file; add to Dataframe\ndf = add_station_lat_lon(df)","key":"PYLPSAHbIU"},{"type":"output","id":"6KIBrc5E2cZxbC6R4lxB7","data":[{"output_type":"stream","name":"stderr","text":"/home/runner/micromamba/envs/metpy-cookbook/lib/python3.13/site-packages/metpy/io/station_data.py:194: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  df['latitude'] = np.nan\n/home/runner/micromamba/envs/metpy-cookbook/lib/python3.13/site-packages/metpy/io/station_data.py:195: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  df['longitude'] = np.nan\nDownloading file 'sfstns.tbl' from 'https://github.com/Unidata/MetPy/raw/v1.7.0/staticdata/sfstns.tbl' to '/home/runner/.cache/metpy/v1.7.0'.\n"},{"output_type":"stream","name":"stderr","text":"Downloading file 'master.txt' from 'https://github.com/Unidata/MetPy/raw/v1.7.0/staticdata/master.txt' to '/home/runner/.cache/metpy/v1.7.0'.\n"},{"output_type":"stream","name":"stderr","text":"Downloading file 'stations.txt' from 'https://github.com/Unidata/MetPy/raw/v1.7.0/staticdata/stations.txt' to '/home/runner/.cache/metpy/v1.7.0'.\n"},{"output_type":"stream","name":"stderr","text":"Downloading file 'airport-codes.csv' from 'https://github.com/Unidata/MetPy/raw/v1.7.0/staticdata/airport-codes.csv' to '/home/runner/.cache/metpy/v1.7.0'.\n"}],"key":"OMPUu95DCN"}],"key":"EGo8QjOKbH"},{"type":"block","kind":"notebook-content","data":{"cell_marker":"######################################################################"},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Gridded Data","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"E1Sq4i0COv"}],"identifier":"gridded-data","label":"Gridded Data","html_id":"gridded-data","implicit":true,"key":"jkaeNYLVOR"},{"type":"paragraph","position":{"start":{"line":4,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Obtain GFS gridded output for contour plotting. Specifically,\ngeopotential height and temperature data for the given level and subset\nfor over North America. Data are smoothed for aesthetic reasons.","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"TlzCUGyIIZ"}],"key":"dZ9eiAAcna"}],"key":"OjjSCGfj6K"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Get GFS data and subset to North America for Geopotential Height and Temperature\nds = xr.open_dataset('https://thredds.ucar.edu/thredds/dodsC/grib/NCEP/GFS/Global_0p5deg_ana/'\n                     'GFS_Global_0p5deg_ana_{0:%Y%m%d}_{0:%H}00.grib2'.format(\n                         date)).metpy.parse_cf()\n\n# Geopotential height\nhght = ds.Geopotential_height_isobaric.metpy.sel(\n    vertical=level*units.hPa, time=date, lat=slice(70, 15), lon=slice(360-145, 360-50))\n\n# Temperature\ntmpk = ds.Temperature_isobaric.metpy.sel(\n    vertical=level*units.hPa, time=date, lat=slice(70, 15), lon=slice(360-145, 360-50))","key":"L40fU3rrfk"},{"type":"output","id":"9RpsJI9sMXAXAh2XSJaaN","data":[],"key":"RJko8Ai10T"}],"key":"FpPrfilLR1"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"New in MetPy v1.7, we can use ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"FKs7IhUdR3"},{"type":"link","url":"https://unidata.github.io/MetPy/latest/api/generated/metpy.calc.find_peaks.html","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"metpy​.calc​.find​_peaks","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Tan59HgJzi"}],"urlSource":"https://unidata.github.io/MetPy/latest/api/generated/metpy.calc.find_peaks.html","key":"b1WcrJMt26"},{"type":"text","value":" to find local maxima and minima from our data. We can specify a higher IQR Ratio to see fewer, stronger peaks. Then we can smooth our data for seeing larger-scale patterns in the final contours.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"QXTn2L8ERl"}],"key":"eMa5rYVmQ2"}],"key":"rshSvAOwpK"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Find the location of local max/min geopotential heights\nH_y, H_x = find_peaks(hght, iqr_ratio=4)\nL_y, L_x = find_peaks(hght, maxima=False, iqr_ratio=4)\n\n# Smooth our fields for the chart\nsmooth_hght = mpcalc.smooth_n_point(hght, 9, 10)\nsmooth_tmpc = (mpcalc.smooth_n_point(tmpk, 9, 10)).metpy.convert_units('degC')","key":"Xp0Ht7CDqc"},{"type":"output","id":"ovLXd1ri1uFa3xWw7PjY0","data":[],"key":"c1M0U9Is6h"}],"key":"CIFGKvKBSd"},{"type":"block","kind":"notebook-content","data":{"cell_marker":"######################################################################"},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Create DIFAX Replication","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"sY9ofzp9yc"}],"identifier":"create-difax-replication","label":"Create DIFAX Replication","html_id":"create-difax-replication","implicit":true,"key":"DoYU0HW24V"},{"type":"paragraph","position":{"start":{"line":4,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Plot the observational data and contours on a Lambert Conformal map and\nadd features that resemble the historic DIFAX maps.","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"APU6jAaAUg"}],"key":"OV7s5TagTi"}],"key":"ckKt0nSxEp"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Set up map coordinate reference system\nmapcrs = ccrs.LambertConformal(\n    central_latitude=45, central_longitude=-100, standard_parallels=(30, 60))\n\n# Set up station locations for plotting observations\npoint_locs = mapcrs.transform_points(\n    ccrs.PlateCarree(), df['longitude'].values, df['latitude'].values)\n\n# Start figure and set graphics extent\nfig = plt.figure(1, figsize=(17, 15))\nax = plt.subplot(111, projection=mapcrs)\nax.set_extent([-125, -70, 20, 55])\n\n# Add map features for geographic reference\nax.add_feature(cfeature.COASTLINE.with_scale('50m'), edgecolor='grey')\nax.add_feature(cfeature.LAND.with_scale('50m'), facecolor='white')\nax.add_feature(cfeature.STATES.with_scale('50m'), edgecolor='grey')\n\n# Plot plus signs every degree lat/lon\nplus_lat = []\nplus_lon = []\nother_lat = []\nother_lon = []\n\nfor x in hght.lon.values[::2]:\n    for y in hght.lat.values[::2]:\n        if (x % 5 == 0) | (y % 5 == 0):\n            plus_lon.append(x)\n            plus_lat.append(y)\n        else:\n            other_lon.append(x)\n            other_lat.append(y)\nax.scatter(other_lon, other_lat, s=2, marker='o',\n           transform=ccrs.PlateCarree(), color='lightgrey', zorder=-1)\nax.scatter(plus_lon, plus_lat, s=30, marker='+', transform=ccrs.PlateCarree(),\n           color='lightgrey')\n\n# Add gridlines for every 5 degree lat/lon\nax.gridlines(linestyle='solid', ylocs=range(15, 71, 5), xlocs=range(-150, -49, 5))\n\n# Start the station plot by specifying the axes to draw on, as well as the\n# lon/lat of the stations (with transform). We also the fontsize to 10 pt.\nstationplot = StationPlot(ax, df['longitude'].values, df['latitude'].values, clip_on=True,\n                          transform=ccrs.PlateCarree(), fontsize=10)\n\n# Plot the temperature and dew point to the upper and lower left, respectively, of\n# the center point.\nstationplot.plot_parameter('NW', df['temperature'], color='black')\nstationplot.plot_parameter('SW', df['dewpoint'], color='black')\n\n# A more complex example uses a custom formatter to control how the geopotential height\n# values are plotted. This is set in an earlier if-statement to work appropriate for\n# different levels.\nstationplot.plot_parameter('NE', df['height'], formatter=hght_format)\n\n# Add wind barbs\nstationplot.plot_barb(df['u_wind'], df['v_wind'], length=7, pivot='tip')\n\n# Plot Solid Contours of Geopotential Height\ncs = ax.contour(hght.lon, hght.lat, smooth_hght,\n                range(0, 20000, cint), colors='black', transform=ccrs.PlateCarree())\nclabels = plt.clabel(cs, fmt='%d', colors='white', inline_spacing=5, use_clabeltext=True)\n\n# Contour labels with black boxes and white text\nfor t in cs.labelTexts:\n    t.set_bbox({'facecolor': 'black', 'pad': 4})\n    t.set_fontweight('heavy')\n\n# Plot Dashed Contours of Temperature\ncs2 = ax.contour(hght.lon, hght.lat, smooth_tmpc, range(-60, 51, 5),\n                 colors='black', transform=ccrs.PlateCarree())\nclabels = plt.clabel(cs2, fmt='%d', colors='black', inline_spacing=5, use_clabeltext=True)\n\n# Set longer dashes than default\ncs2.set(dashes=(0, (5.0, 3.0)))\n\n# Contour labels with black boxes and white text\nfor t in cs.labelTexts:\n    t.set_bbox({'facecolor': 'black', 'pad': 4})\n    t.set_fontweight('heavy')\n\n# Plot filled circles for Radiosonde Obs\nax.scatter(df['longitude'].values, df['latitude'].values, s=10,\n           marker='o', color='black', transform=ccrs.PlateCarree())\n\n# Plot H/L symbols with metpy.plots.scattertext\n# and their corresponding height values 20 pts below the symbol\nscattertext(ax, hght.metpy.x[H_x], hght.metpy.y[H_y], 'H',\n            size=36, color='black', transform=ccrs.PlateCarree())\nscattertext(ax, hght.metpy.x[H_x], hght.metpy.y[H_y], hght.values[H_y, H_x],\n            size=12, color='black', formatter='.0f', loc=(0, -20), transform=ccrs.PlateCarree())\n\nscattertext(ax, hght.metpy.x[L_x], hght.metpy.y[L_y], 'L',\n            size=36, color='black', transform=ccrs.PlateCarree())\nscattertext(ax, hght.metpy.x[L_x], hght.metpy.y[L_y], hght.values[L_y, L_x],\n            size=12, color='black', formatter='.0f', loc=(0, -20), transform=ccrs.PlateCarree())\n\n# Add titles\nplt.title(f'Upper-air Observations at {level}-hPa Analysis Heights/Temperature',\n          loc='left')\nplt.title(f'Valid: {date}', loc='right');","key":"Q3LrKi9n7Y"},{"type":"output","id":"w7tH6GA43oqKdIlsZfhUR","data":[{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 1700x1500 with 1 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"3073b631cdafc0925fbda7f773dba543","path":"/metpy-cookbook/build/3073b631cdafc0925fbda7f773dba543.png"}}}],"key":"sYhc0HghZA"}],"key":"TdDWkk2PMB"}],"key":"mAVbBV510W"},"references":{"cite":{"order":[],"data":{}}},"footer":{"navigation":{"prev":{"title":"Baroclinic Potential Vorticity Analysis, Divergence, and Winds","url":"/notebooks/synoptic/pv-baroclinic-isobaric","group":"The MetPy Gallery"},"next":{"title":"Calculating Wind Shear","url":"/notebooks/synoptic/wind-shear-vectors-example","group":"The MetPy Gallery"}}},"domain":"http://localhost:3000"}