{"version":2,"kind":"Notebook","sha256":"ed6017632dff2f05c59c91c7c2a6b5876b0fa74a2d64d84def158972e1b20202","slug":"notebooks.synoptic.analytic-300hpa-trough","location":"/notebooks/synoptic/Analytic_300hPa_Trough.ipynb","dependencies":[],"frontmatter":{"title":"Analytic 300-hPa Trough","content_includes_title":false,"kernelspec":{"name":"python3","display_name":"Python 3 (ipykernel)","language":"python"},"authors":[{"nameParsed":{"literal":"MetPy Maintainers","given":"MetPy","family":"Maintainers"},"name":"MetPy Maintainers","id":"contributors-myst-generated-uid-0"}],"open_access":true,"license":{"content":{"id":"CC-BY-4.0","url":"https://creativecommons.org/licenses/by/4.0/","name":"Creative Commons Attribution 4.0 International","free":true,"CC":true},"code":{"id":"Apache-2.0","url":"https://opensource.org/licenses/Apache-2.0","name":"Apache License 2.0","free":true,"osi":true}},"github":"https://github.com/projectpythia/metpy-cookbook","copyright":"2025","affiliations":[{"id":"UAlbany","name":"University at Albany (SUNY)","department":"Atmospheric and Environmental Sciences","url":"https://www.albany.edu/daes"},{"id":"CISL","name":"NSF National Center for Atmospheric Research","department":"Computational and Information Systems Lab","url":"https://www.cisl.ucar.edu"},{"id":"Unidata","name":"NSF Unidata","url":"https://www.unidata.ucar.edu"},{"id":"Argonne","name":"Argonne National Laboratory","department":"Environmental Science Division","url":"https://www.anl.gov/evs"},{"id":"CarbonPlan","name":"CarbonPlan","url":"https://carbonplan.org"},{"id":"NVIDIA","name":"NVIDIA Corporation","url":"https://www.nvidia.com/"}],"settings":{"output_matplotlib_strings":"remove"},"numbering":{"title":{"offset":2}},"edit_url":"https://github.com/projectpythia/metpy-cookbook/blob/main/notebooks/synoptic/Analytic_300hPa_Trough.ipynb","exports":[{"format":"ipynb","filename":"Analytic_300hPa_Trough.ipynb","url":"/metpy-cookbook/build/Analytic_300hPa_Trou-98f35c915a9fbe0ce4d3c64aab619258.ipynb"}]},"widgets":{},"mdast":{"type":"root","children":[{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"import matplotlib.pyplot as plt\nimport metpy.calc as mpcalc\nfrom metpy.units import units\nimport numpy as np","key":"tek337Aghj"},{"type":"output","id":"NBSKkiHQvFDWzKswK48sE","data":[],"key":"jcJYU6Fd3K"}],"key":"djrP9t9XCK"},{"type":"block","kind":"notebook-content","data":{"cell_marker":"######################################################################"},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Below are three definitions to create an analytic 300-hPa trough roughly\nbased on the Sanders Analytic Model with modified coefficients to create\ndifferent style waves.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"N5Lt1J2HMU"}],"key":"qlIBXm8Dum"}],"key":"IlhXmEwbdi"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"def single_300hPa_trough(parameter='hght'):\n    \"\"\" Single trough with heights and Temperatures based on Sanders Analytic Model\n    \"\"\"\n    X = np.linspace(.25, .75, 101)\n    Y = np.linspace(.25, .75, 101)\n\n    x, y = np.meshgrid(X, Y)\n\n    p = 4\n    q = 2\n\n    if parameter == 'hght':\n        return (9240 + 100 * np.cos(p * x * np.pi) * np.cos(q * y * np.pi)\n                + 200 * np.cos(y * np.pi) + 300 * y * np.cos(x * np.pi + np.pi / 2))\n    elif parameter == 'temp':\n        return (-50 + 2 * np.cos(p * x * np.pi) * np.cos(q * y * np.pi)\n                + 2 * np.cos(y * np.pi) + 0.5 * y * np.cos(x * np.pi + np.pi / 2))\n\n\ndef lifting_300hPa_trough(parameter='hght'):\n    \"\"\" Lifting trough with heights and Temperatures based on Sanders Analytic Model\n    \"\"\"\n    X = np.linspace(.25, .75, 101)\n    Y = np.linspace(.25, .75, 101)\n\n    x, y = np.meshgrid(X, Y)\n\n    p = 4\n    q = 2\n\n    if parameter == 'hght':\n        return (9240 + 150 * np.cos(p * x * np.pi) * np.cos(q * y * np.pi)\n                + 200 * np.cos(y * np.pi) + 400 * y * np.cos(x * np.pi + np.pi))\n    elif parameter == 'temp':\n        return (-50 + 2 * np.cos(p * x * np.pi) * np.cos(q * y * np.pi)\n                + 2 * np.cos(y * np.pi) + 5 * y * np.cos(x * np.pi + np.pi))\n\n\ndef digging_300hPa_trough(parameter='hght'):\n    \"\"\" Digging trough with heights and Temperatures based on Sanders Analytic Model\n    \"\"\"\n    X = np.linspace(.25, .75, 101)\n    Y = np.linspace(.25, .75, 101)\n\n    x, y = np.meshgrid(X, Y)\n\n    p = 4\n    q = 2\n\n    if parameter == 'hght':\n        return (9240 + 150 * np.cos(p * x * np.pi) * np.cos(q * y * np.pi)\n                + 200 * np.cos(y * np.pi) + 400 * y * np.sin(x * np.pi + 5 * np.pi / 2))\n    elif parameter == 'temp':\n        return (-50 + 2 * np.cos(p * x * np.pi) * np.cos(q * y * np.pi)\n                + 2 * np.cos(y * np.pi) + 5 * y * np.sin(x * np.pi + np.pi / 2))","key":"lJbH0fzVCe"},{"type":"output","id":"yqJzPZa3MQ3bDDwkFN4Tu","data":[],"key":"tD1cHZBPZz"}],"key":"XPMG6t2Ccb"},{"type":"block","kind":"notebook-content","data":{"cell_marker":"######################################################################"},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Call the appropriate definition to develop the desired wave.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"CxUS96OhBL"}],"key":"DgJimsxaX2"}],"key":"UwkOhTe8YH"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Single Trough\nZ = single_300hPa_trough(parameter='hght')\nT = single_300hPa_trough(parameter='temp')\n\n# Lifting Trough\n# Z = lifting_300hPa_trough(parameter='hght')\n# T = lifting_300hPa_trough(parameter='temp')\n\n# Digging Trough\n# Z = digging_300hPa_trough(parameter='hght')\n# T = digging_300hPa_trough(parameter='temp')","key":"iAiZvb6XuX"},{"type":"output","id":"u5nG5UCbpjIBRifpMzpga","data":[],"key":"EQbgyrYqWD"}],"key":"VWn32Va2N5"},{"type":"block","kind":"notebook-content","data":{"cell_marker":"######################################################################"},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Set geographic parameters for analytic grid to then","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"HTWCT3WuiB"}],"key":"GwbvMdnFga"}],"key":"dL3vKXm1ns"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"lats = np.linspace(35, 50, 101)\nlons = np.linspace(260, 290, 101)\nlon, lat = np.meshgrid(lons, lats)\n\n# Coriolis Parameter\nf = mpcalc.coriolis_parameter(lat * units.degrees)\n\n# Calculate Geostrophic Wind from Analytic Heights\ndx, dy = mpcalc.lat_lon_grid_deltas(lons, lats)\nugeo, vgeo = mpcalc.geostrophic_wind(Z*units.meter, dx, dy, latitude=lat * units.degrees)\n\n# Get the wind direction for each point\nwdir = mpcalc.wind_direction(ugeo, vgeo)\n\n# Compute the Gradient Wind via an approximation\ndydx = mpcalc.first_derivative(Z, delta=dx, axis=1)\nd2ydx2 = mpcalc.first_derivative(dydx, delta=dx, axis=1)\nR = ((1 + dydx.m**2)**(3. / 2.)) / d2ydx2.m\n\ngeo_mag = mpcalc.wind_speed(ugeo, vgeo)\ngrad_mag = geo_mag.m - (geo_mag.m**2) / (f.magnitude * R)\n\nugrad, vgrad = mpcalc.wind_components(grad_mag * units('m/s'), wdir)\n\n# Calculate Ageostrophic wind\nuageo = ugrad - ugeo\nvageo = vgrad - vgeo\n\n# Compute QVectors\nuqvect, vqvect = mpcalc.q_vector(ugeo, vgeo, T * units.degC, 500 * units.hPa, dx, dy)\n\n# Calculate divergence of the ageostrophic wind\ndiv = mpcalc.divergence(uageo, vageo, dx=dx, dy=dy)\n\n# Calculate Relative Vorticity Advection\nrelvor = mpcalc.vorticity(ugeo, vgeo, dx=dx, dy=dy)\nadv = mpcalc.advection(relvor, ugeo, vgeo, dx=dx, dy=dy)","key":"CTrvmIDDQj"},{"type":"output","id":"cMb7a508s6EfR5GhH_cnF","data":[],"key":"VsYabdDQan"}],"key":"h2ugmejtFH"},{"type":"block","kind":"notebook-content","data":{"cell_marker":"######################################################################"},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Create figure containing Geopotential Heights, Temperature, Divergence\nof the Ageostrophic Wind, Relative Vorticity Advection (shaded),\ngeostrphic wind barbs, and Q-vectors.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"VVY9pbLtB9"}],"key":"gLx17HG8SU"}],"key":"tvE8wsdAXu"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"fig = plt.figure(figsize=(10, 10))\nax = plt.subplot(111)\n\n# Plot Geopotential Height Contours\ncs = ax.contour(lons, lats, Z, range(0, 12000, 120), colors='k')\nplt.clabel(cs, fmt='%d')\n\n# Plot Temperature Contours\ncs2 = ax.contour(lons, lats, T, range(-50, 50, 2), colors='r', linestyles='dashed')\nplt.clabel(cs2, fmt='%d')\n\n# Plot Divergence of Ageo Wind Contours\ncs3 = ax.contour(lons, lats, div*10**9, np.arange(-25, 26, 3), colors='grey',\n                 linestyles='dotted')\nplt.clabel(cs3, fmt='%d')\n\n# Plot Rel. Vor. Adv. colorfilled\ncf = ax.contourf(lons, lats, adv*10**9, np.arange(-20, 21, 1), cmap=plt.cm.bwr)\ncbar = plt.colorbar(cf, orientation='horizontal', pad=0.05, aspect=50)\ncbar.set_label('Rel. Vor. Adv.')\n\n# Plot Geostrophic Wind Barbs\nwind_slice = slice(5, None, 10)\nax.barbs(lons[wind_slice], lats[wind_slice],\n         ugeo[wind_slice, wind_slice].to('kt').m, vgeo[wind_slice, wind_slice].to('kt').m)\n\n# Plot Ageostrophic Wind Vectors\n# ageo_slice = slice(None, None, 10)\n# ax.quiver(lons[ageo_slice], lats[ageo_slice],\n#           uageo[ageo_slice, ageo_slice].m, vageo[ageo_slice, ageo_slice].m,\n#           color='blue', pivot='mid')\n\n# Plot QVectors\nqvec_slice = slice(None, None, 10)\nax.quiver(lons[qvec_slice], lats[qvec_slice],\n          uqvect[qvec_slice, qvec_slice].m, vqvect[qvec_slice, qvec_slice].m,\n          color='darkcyan', pivot='mid')\n\nplt.title('300-hPa Geo Heights (black), Q-Vector (dark cyan), Divergence (grey; dashed)')","key":"zSEt9ccq8D"},{"type":"output","id":"MknXNZgc1wCxeaNPTw0RO","data":[{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 1000x1000 with 2 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"07c48de06bb88e770552dcf9ec0ca3c1","path":"/metpy-cookbook/build/07c48de06bb88e770552dcf9ec0ca3c1.png"}}}],"key":"eBvqfWUHzX"}],"key":"i1hZTSv3Ax"}],"key":"h3JtiWojfQ"},"references":{"cite":{"order":[],"data":{}}},"footer":{"navigation":{"prev":{"title":"Geostrophic and Ageostrophic Wind","url":"/notebooks/synoptic/ageostrophic-wind-example","group":"The MetPy Gallery"},"next":{"title":"Differential Temperature Advection with NARR Data","url":"/notebooks/synoptic/differential-temperature-advection","group":"The MetPy Gallery"}}},"domain":"http://localhost:3000"}