{"version":2,"kind":"Notebook","sha256":"87a25e58e3729d09908539dffcacdbd881b15609040b484785be8b21c03857ff","slug":"notebooks.skewt.advanced-sounding","location":"/notebooks/skewt/Advanced_Sounding.ipynb","dependencies":[],"frontmatter":{"title":"Advanced Sounding","content_includes_title":false,"kernelspec":{"name":"python3","display_name":"Python 3 (ipykernel)","language":"python"},"authors":[{"nameParsed":{"literal":"MetPy Maintainers","given":"MetPy","family":"Maintainers"},"name":"MetPy Maintainers","id":"contributors-myst-generated-uid-0"}],"open_access":true,"license":{"content":{"id":"CC-BY-4.0","url":"https://creativecommons.org/licenses/by/4.0/","name":"Creative Commons Attribution 4.0 International","free":true,"CC":true},"code":{"id":"Apache-2.0","url":"https://opensource.org/licenses/Apache-2.0","name":"Apache License 2.0","free":true,"osi":true}},"github":"https://github.com/projectpythia/metpy-cookbook","copyright":"2025","affiliations":[{"id":"UAlbany","name":"University at Albany (SUNY)","department":"Atmospheric and Environmental Sciences","url":"https://www.albany.edu/daes"},{"id":"CISL","name":"NSF National Center for Atmospheric Research","department":"Computational and Information Systems Lab","url":"https://www.cisl.ucar.edu"},{"id":"Unidata","name":"NSF Unidata","url":"https://www.unidata.ucar.edu"},{"id":"Argonne","name":"Argonne National Laboratory","department":"Environmental Science Division","url":"https://www.anl.gov/evs"},{"id":"CarbonPlan","name":"CarbonPlan","url":"https://carbonplan.org"},{"id":"NVIDIA","name":"NVIDIA Corporation","url":"https://www.nvidia.com/"}],"settings":{"output_matplotlib_strings":"remove"},"numbering":{"title":{"offset":2}},"edit_url":"https://github.com/projectpythia/metpy-cookbook/blob/main/notebooks/skewt/Advanced_Sounding.ipynb","exports":[{"format":"ipynb","filename":"Advanced_Sounding.ipynb","url":"/metpy-cookbook/build/Advanced_Sounding-875de8e23d8daa14bf5db45d68a01a24.ipynb"}]},"widgets":{},"mdast":{"type":"root","children":[{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"Plot a sounding using MetPy with more advanced features. This will use the same formatting and another dataset from MetPy’s sample data.","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"sXTLGY830w"},{"type":"break","key":"gSwGON2QfE"}],"key":"r5zKM354qD"},{"type":"blockquote","position":{"start":{"line":5,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"New additions","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"nn1XmZhDvZ"}],"key":"eudu3qhfcf"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":6,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Lifted condensation level calculation (LCL)","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"jho4uS23Aj"}],"key":"Qh9oXUx1dY"},{"type":"listItem","spread":true,"position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Surface based parcel profile","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"dgrXRObDFI"}],"key":"S0H48vK2HV"},{"type":"listItem","spread":true,"position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"Convective Available Potential Energy (CAPE) and Convective Inhibition (CIN) shaded","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"TqrqsZub6s"}],"key":"Yv3GGwFjXH"},{"type":"listItem","spread":true,"position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"text","value":"0 degree isotherm distinguished","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"ozWcle3JnO"}],"key":"g5g0aurK5V"}],"key":"NQEXZvpbRx"}],"key":"S0TgaOfmci"}],"key":"AjrLIEMkCY"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Imports","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"pZCm4O0pxz"}],"identifier":"imports","label":"Imports","html_id":"imports","implicit":true,"key":"scplEbjZEB"}],"key":"l1V4DabuET"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"import matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\nimport metpy.calc as mpcalc\nfrom metpy.cbook import get_test_data\nfrom metpy.plots import add_metpy_logo, SkewT\nfrom metpy.units import units","key":"skLSFPRFWA"},{"type":"output","id":"CertQdPSZ0qazYA1ZSSJu","data":[],"key":"vdG6nH6cax"}],"key":"asNjAVMX2w"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Obtain Data and Format","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"zr36JJWxhr"}],"identifier":"obtain-data-and-format","label":"Obtain Data and Format","html_id":"obtain-data-and-format","implicit":true,"key":"f8l77eDz7g"}],"key":"HdfBe9vOUK"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Upper air data can be obtained using the siphon package, but for this example we will use some of MetPy’s sample data.\n","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"pEhct7rkdE"},{"type":"inlineCode","value":"as_file_obj=False), skiprows=5, usecols=[0, 1, 2, 3, 6, 7], names=col_names)","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"XmO7yku0r3"},{"type":"text","value":" is necessary due to the formatting of the MetPy sample data. This formatting is not needed when using upper air data obtained via Siphon. Obtaining data with Siphon will be covered in a later notebook.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"sBcTqbeZsX"}],"key":"BjINDRT0b1"}],"key":"fXRv3MLtpE"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"col_names = ['pressure', 'height', 'temperature', 'dewpoint', 'direction', 'speed']\n\nsounding_data = pd.read_fwf(get_test_data('may4_sounding.txt', as_file_obj=False),\n                 skiprows=5, usecols=[0, 1, 2, 3, 6, 7], names=col_names)\n\n# Drop any rows with all not a number (NaN) values for temperature, dewpoint, and winds\nsounding_data = sounding_data.dropna(subset=('temperature', 'dewpoint', 'direction', 'speed'\n                       ), how='all').reset_index(drop=True)","key":"zowSvPpola"},{"type":"output","id":"1iVlqJ_G2eAEZuGrZKShq","data":[{"output_type":"stream","name":"stderr","text":"Downloading file 'may4_sounding.txt' from 'https://github.com/Unidata/MetPy/raw/v1.7.0/staticdata/may4_sounding.txt' to '/home/runner/.cache/metpy/v1.7.0'.\n"}],"key":"N0kg6aJOQs"}],"key":"sf1peNoRWJ"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Assign Units","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"MFhRHyV1ya"}],"identifier":"assign-units","label":"Assign Units","html_id":"assign-units","implicit":true,"key":"Ph7xnesAY0"}],"key":"lHl0wJZLTI"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"We will pull the data out of the example dataset into individual variables and assign units. This is explained in further detail in the Simple Sounding notebook and in the ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"PswslvYJNj"},{"type":"link","url":"https://unidata.github.io/MetPy/latest/tutorials/unit_tutorial.html","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Metpy documentation","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"OtEkjL9ehk"}],"urlSource":"https://unidata.github.io/MetPy/latest/tutorials/unit_tutorial.html","key":"m54dEUdyOv"},{"type":"text","value":".","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"wQkTq9sVnR"}],"key":"nCXDFx2xU3"}],"key":"QbJkfV18do"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"pres = sounding_data['pressure'].values * units.hPa\ntemp = sounding_data['temperature'].values * units.degC\ndewpoint = sounding_data['dewpoint'].values * units.degC\nwind_speed = sounding_data['speed'].values * units.knots\nwind_dir = sounding_data['direction'].values * units.degrees\nu, v = mpcalc.wind_components(wind_speed, wind_dir)","key":"ZhfFoq82Zl"},{"type":"output","id":"2reepcHLeP-qUiKfIpskn","data":[],"key":"DIJaPnqCgY"}],"key":"osbHPwnVh1"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Create Sounding Plot","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"IRGZpjT91Q"}],"identifier":"create-sounding-plot","label":"Create Sounding Plot","html_id":"create-sounding-plot","implicit":true,"key":"JwtjkmDKZj"}],"key":"wkFPv8fhmj"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Create figure and set size\nfig = plt.figure(figsize=(9, 9))\nskew = SkewT(fig, rotation=45)\n\n# Plot temperature, dewpoint and wind barbs\nskew.plot(pres, temp, 'red')\nskew.plot(pres, dewpoint, 'green')\n\n# Plot wind barbs\nmy_interval = np.arange(100, 1000, 50) * units('hPa') #set spacing interval\nix = mpcalc.resample_nn_1d(pres, my_interval) #find nearest indices for chosen interval\nskew.plot_barbs(pres[ix], u[ix], v[ix], xloc=1) #plot values closest to chosen interval\n\n# Improve labels and set axis limits\nskew.ax.set_xlabel('Temperature (\\N{DEGREE CELSIUS})')\nskew.ax.set_ylabel('Pressure (hPa)')\nskew.ax.set_ylim(1000, 100)\nskew.ax.set_xlim(-40, 59)\n\n# Calculate LCL height and plot as black dot.\nlcl_pressure, lcl_temperature = mpcalc.lcl(pres[0], temp[0], dewpoint[0]) #index 0 is chosen to lift parcel from the surface\nskew.plot(lcl_pressure, lcl_temperature, 'ko', markerfacecolor='black')\n\n# Calculate full parcel profile and add to plot as black line\nprof = mpcalc.parcel_profile(pres, temp[0], dewpoint[0]).to('degC')\nskew.plot(pres, prof, 'black', linewidth=2)\n\n# Shade areas of CAPE and CIN\nskew.shade_cin(pres, temp, prof, dewpoint)\nskew.shade_cape(pres, temp, prof)\n\n# Add emphasis to 0 degree isotherm with color change\nskew.ax.axvline(0, color='c', linestyle='--', linewidth=2)\n\n# Add the relevant special lines throughout the figure\nskew.plot_dry_adiabats(t0=np.arange(233, 533, 15) * units.K, alpha=0.25, color='orangered')\nskew.plot_moist_adiabats(t0=np.arange(233, 400, 10) * units.K, alpha=0.25, color='tab:green')\nskew.plot_mixing_lines(pressure=np.arange(1000, 99, -25) * units.hPa, linestyle='dotted', color='tab:blue')\n\n# Add the MetPy logo!\nfig = plt.gcf()\nadd_metpy_logo(fig, 115, 100, size='small');\n\n# Add a title\nplt.title('Advanced Sounding');","key":"esvACSlMnZ"},{"type":"output","id":"fqr28KFomn5-U6y6TfgtR","data":[{"output_type":"stream","name":"stderr","text":"/home/runner/micromamba/envs/metpy-cookbook/lib/python3.13/site-packages/scipy/integrate/_ivp/base.py:23: UserWarning: Saturation mixing ratio is undefined for some requested pressure/temperature combinations. Total pressure must be greater than the water vapor saturation pressure for liquid water to be in equilibrium.\n  return np.asarray(fun(t, y), dtype=dtype)\n/home/runner/micromamba/envs/metpy-cookbook/lib/python3.13/site-packages/metpy/calc/thermo.py:1633: RuntimeWarning: invalid value encountered in power\n  * (mpconsts.nounit.T0 / temperature) ** heat_power\n"},{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 900x900 with 1 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"284bc16340e4e707f0b9a138c594554e","path":"/metpy-cookbook/build/284bc16340e4e707f0b9a138c594554e.png"}}}],"key":"pLFiU6DUhS"}],"key":"TztGi2udVK"}],"key":"bxlIAhONUp"},"references":{"cite":{"order":[],"data":{}}},"footer":{"navigation":{"prev":{"title":"Skew-T Analysis","url":"/notebooks/skewt","group":"The MetPy Gallery"},"next":{"title":"MetPy Skew-T Cookbook","url":"/notebooks/skewt/foundational-sounding","group":"The MetPy Gallery"}}},"domain":"http://localhost:3000"}