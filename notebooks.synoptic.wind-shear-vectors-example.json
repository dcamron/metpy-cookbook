{"version":2,"kind":"Notebook","sha256":"ed6b1a4751deed108b6e6aa90e30b5818298fc2d15183232dc0b9fdf8706faea","slug":"notebooks.synoptic.wind-shear-vectors-example","location":"/notebooks/synoptic/Wind_Shear_Vectors_Example.ipynb","dependencies":[],"frontmatter":{"title":"Calculating Wind Shear","content_includes_title":false,"kernelspec":{"name":"python3","display_name":"Python 3 (ipykernel)","language":"python"},"authors":[{"nameParsed":{"literal":"MetPy Maintainers","given":"MetPy","family":"Maintainers"},"name":"MetPy Maintainers","id":"contributors-myst-generated-uid-0"}],"open_access":true,"license":{"content":{"id":"CC-BY-4.0","url":"https://creativecommons.org/licenses/by/4.0/","name":"Creative Commons Attribution 4.0 International","free":true,"CC":true},"code":{"id":"Apache-2.0","url":"https://opensource.org/licenses/Apache-2.0","name":"Apache License 2.0","free":true,"osi":true}},"github":"https://github.com/projectpythia/metpy-cookbook","copyright":"2025","affiliations":[{"id":"UAlbany","name":"University at Albany (SUNY)","department":"Atmospheric and Environmental Sciences","url":"https://www.albany.edu/daes"},{"id":"CISL","name":"NSF National Center for Atmospheric Research","department":"Computational and Information Systems Lab","url":"https://www.cisl.ucar.edu"},{"id":"Unidata","name":"NSF Unidata","url":"https://www.unidata.ucar.edu"},{"id":"Argonne","name":"Argonne National Laboratory","department":"Environmental Science Division","url":"https://www.anl.gov/evs"},{"id":"CarbonPlan","name":"CarbonPlan","url":"https://carbonplan.org"},{"id":"NVIDIA","name":"NVIDIA Corporation","url":"https://www.nvidia.com/"}],"settings":{"output_matplotlib_strings":"remove"},"numbering":{"title":{"offset":2}},"edit_url":"https://github.com/projectpythia/metpy-cookbook/blob/main/notebooks/synoptic/Wind_Shear_Vectors_Example.ipynb","exports":[{"format":"ipynb","filename":"Wind_Shear_Vectors_Example.ipynb","url":"/metpy-cookbook/build/Wind_Shear_Vectors_E-3d58cca26cacce4599e54fdc3aab97b2.ipynb"}]},"widgets":{},"mdast":{"type":"root","children":[{"type":"block","kind":"notebook-content","data":{"cell_marker":"\"\"\"","lines_to_next_cell":0},"children":[{"type":"paragraph","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"This example plots calculates the 850-500 hPa Bulk Wind Shear","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"Oy3jSuHRab"}],"key":"q2ByJTeUwv"},{"type":"paragraph","position":{"start":{"line":6,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"Plotting over a regional domain, accessing the Best Collection of GFS from the\nUnidata Thredds server, plots MSLP (hPa), 850-hPa Wind Vector (m/s), 500-hPa\nWind Vector (m/s), and the Wind Shear between the two layers (m/s)","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"LFh3FHlkBU"}],"key":"pyLN2l44Aj"}],"key":"Da5vQTAtLy"},{"type":"block","kind":"notebook-content","data":{"cell_marker":"#####################################","lines_to_next_cell":0},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Import necessary packages","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"cD8xflVn10"}],"identifier":"import-necessary-packages","label":"Import necessary packages","html_id":"import-necessary-packages","implicit":true,"key":"qV7pvafXc8"}],"key":"zHweogNKk3"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"from datetime import datetime, UTC\n\nimport cartopy.crs as ccrs\nimport cartopy.feature as cfeature\nimport matplotlib.pyplot as plt\nfrom metpy.units import units\nimport numpy as np\nimport scipy.ndimage as ndimage\nfrom siphon.catalog import TDSCatalog\nfrom xarray.backends import NetCDF4DataStore\nimport xarray as xr","key":"ClIcnHebjT"},{"type":"output","id":"5KlLRcXLSSycetfnAvK7c","data":[],"key":"unOnZuRuCP"}],"key":"OXFe6kjfPs"},{"type":"block","kind":"notebook-content","data":{"cell_marker":"#####################################"},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Obtain data","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"SoxkO9c7of"}],"identifier":"obtain-data","label":"Obtain data","html_id":"obtain-data","implicit":true,"key":"pdKsXGIzMi"}],"key":"ZMi60ghHGO"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Construct a TDSCatalog instance pointing to the gfs dataset\nbest_gfs = TDSCatalog('http://thredds.ucar.edu/thredds/catalog/grib/'\n                      'NCEP/GFS/Global_0p5deg/catalog.xml')\n\n# Interface with the Best GFS Half Degree Forecast Time Series dataset\n# via NCSS directly\nncss = best_gfs.datasets['Best GFS Half Degree Forecast Time Series'].subset()","key":"gyguFAAs0V"},{"type":"output","id":"qjFfQf9Q-W5oGM-U3qxAh","data":[],"key":"aKQ9SVy5Va"}],"key":"WbncJrnCmX"},{"type":"block","kind":"notebook-content","data":{"cell_marker":"#####################################"},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"First Query for MSLP","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"XXQKqGogb7"}],"identifier":"first-query-for-mslp","label":"First Query for MSLP","html_id":"first-query-for-mslp","implicit":true,"key":"HdgpYeI29U"}],"key":"WyxsakZpdt"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Create our NCSS query with desired specifications\nquery = ncss.query()\nquery.lonlat_box(north=50, south=30, east=-80, west=-115)\nquery.time(datetime.now(UTC))\nquery.accept('netcdf4')\nquery.variables('MSLP_Eta_model_reduction_msl')\n\n# Obtain the data we've queried for as a netcdf4-python dataset\ndata = ncss.get_data(query)\n\n# Make into an xarray Dataset object\nds = xr.open_dataset(NetCDF4DataStore(data)).metpy.parse_cf()\n\n# Pull out the variables you want to use\nmslp_var = ds.MSLP_Eta_model_reduction_msl\ntime_var = ds.MSLP_Eta_model_reduction_msl.metpy.time\nlat_var = ds.latitude\nlon_var = ds.longitude","key":"lpfU2jIedw"},{"type":"output","id":"X8ErdCmhJPL-hSECgC7MO","data":[],"key":"oVNNfXHJsj"}],"key":"ZKiFARt652"},{"type":"block","kind":"notebook-content","data":{"cell_marker":"#####################################"},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Second Query for 850-hPa data","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Sta0VbqlCy"}],"identifier":"second-query-for-850-hpa-data","label":"Second Query for 850-hPa data","html_id":"second-query-for-850-hpa-data","implicit":true,"key":"RrixzyKDFp"}],"key":"BYZXAizp5G"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Request data for 850-hPa winds\n# First clear the query's variables from previous query for MSLP\nquery.var = set()\nquery.vertical_level(85000)\nquery.variables('u-component_of_wind_isobaric',\n                'v-component_of_wind_isobaric')\n\ndata = ncss.get_data(query)\n\n# Make into an xarray Dataset object\nds_wind = xr.open_dataset(NetCDF4DataStore(data)).metpy.parse_cf()\n\nu_wind_var850 = ds_wind['u-component_of_wind_isobaric']\nv_wind_var850 = ds_wind['v-component_of_wind_isobaric']","key":"BDelZJrx9B"},{"type":"output","id":"2sosJkkZ7W5CRsizkQOzp","data":[],"key":"mSG9WwixlD"}],"key":"LafwLd4eEh"},{"type":"block","kind":"notebook-content","data":{"cell_marker":"#####################################"},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Third Query for 500-hPa data","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"qAjHDm7dqA"}],"key":"vDfqLgmXpj"}],"key":"e7qttzDs3h"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Request data for 500-hPa winds\n# First clear the query's variables from previous query for 850-hPa data\nquery.var = set()\nquery.vertical_level(50000)\nquery.variables('u-component_of_wind_isobaric',\n                'v-component_of_wind_isobaric')\n\ndata = ncss.get_data(query)\n\n# Make into an xarray Dataset object\nds_wind = xr.open_dataset(NetCDF4DataStore(data)).metpy.parse_cf()\n\nu_wind_var500 = ds_wind['u-component_of_wind_isobaric']\nv_wind_var500 = ds_wind['v-component_of_wind_isobaric']","key":"GHGO8LRghv"},{"type":"output","id":"C1X_q7JU3ONLI4mxZ-HZp","data":[],"key":"Bxn946nob6"}],"key":"UJWKoqtv72"},{"type":"block","kind":"notebook-content","data":{"cell_marker":"#####################################"},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Data Manipulation","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"AdGn3RO6dn"}],"identifier":"data-manipulation","label":"Data Manipulation","html_id":"data-manipulation","implicit":true,"key":"bsaSSnE845"}],"key":"iFAEPr7A2y"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Get actual data values and remove any size 1 dimensions\nlat = lat_var.values.squeeze()\nlon = lon_var.values.squeeze()\nmslp = mslp_var.metpy.convert_units('hPa').squeeze()\nu_wind850 = u_wind_var850.squeeze()\nv_wind850 = v_wind_var850.squeeze()\nu_wind500 = u_wind_var500.squeeze()\nv_wind500 = v_wind_var500.squeeze()\n\n# Convert number of hours since the reference time into an actual date\ntime = time_var.values.astype('datetime64[ms]').astype('O').squeeze()\n\n# Combine 1D latitude and longitudes into a 2D grid of locations\nlon_2d, lat_2d = np.meshgrid(lon, lat)\n\n# Smooth mslp data\nmslp = ndimage.gaussian_filter(mslp, sigma=3, order=0)","key":"yHAPJjqmYI"},{"type":"output","id":"F6jWxAuCUz7scvdPpOS4Y","data":[],"key":"RSFkt7sMRm"}],"key":"PZjc80LsN8"},{"type":"block","kind":"notebook-content","data":{"cell_marker":"#####################################"},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Begin making figure","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"lpMHl8osx4"}],"key":"BaOqd6XbvZ"}],"key":"f5J9r6E5hg"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Create new figure\nfig = plt.figure(figsize=(15, 12), facecolor='black')\n\n# Add the map and set the extent\nax = plt.axes(projection=ccrs.PlateCarree())\nax.set_extent([-108., -91., 33., 45.])\nax.patch.set_fill(False)\n\n# Add state boundaries to plot\nax.add_feature(cfeature.STATES, edgecolor='white', linewidth=2)\n\n# Contour the MSLP\nc = ax.contour(lon_2d, lat_2d, mslp, colors='lime', linewidths=6)\nax.clabel(c, fontsize=12, inline=1, inline_spacing=4, fmt='%i')\n\nwslice = slice(1, None, 4)\n# Plot 850-hPa wind vectors\nvectors850 = ax.quiver(lon_2d[wslice, wslice], lat_2d[wslice, wslice],\n                       u_wind850[wslice, wslice], v_wind850[wslice, wslice],\n                       headlength=4, headwidth=3, angles='xy',\n                       scale_units='xy', scale=12, color='gold',\n                       label='850mb wind')\n\n# Plot 500-hPa wind vectors\nvectors500 = ax.quiver(lon_2d[wslice, wslice], lat_2d[wslice, wslice],\n                       u_wind500[wslice, wslice], v_wind500[wslice, wslice],\n                       headlength=4, headwidth=3, angles='xy',\n                       scale_units='xy', scale=12, color='cornflowerblue',\n                       label='500mb wind')\n\n# Plot 500-850 shear\nshear = ax.quiver(lon_2d[wslice, wslice], lat_2d[wslice, wslice],\n                  u_wind500[wslice, wslice] - u_wind850[wslice, wslice],\n                  v_wind500[wslice, wslice] - v_wind850[wslice, wslice],\n                  headlength=4, headwidth=3, angles='xy', scale_units='xy',\n                  scale=12, color='deeppink', label='500-850mb shear')\n\n# Add a legend\nax.legend(('850mb wind', '500mb wind', '500-850mb shear'), loc=4)\n\n# Add a title to the plot\nplt.title('MSLP, 850mb Wind, 500mb Wind, and 500-850mb Vertical Wind Shear \\n'\n          f' for {time:%d %B %Y %H:%MZ}', color='white', size=14);","key":"H93VEAlhHW"},{"type":"output","id":"UwkZr3XZbss0iNtp5H-i_","data":[{"output_type":"stream","name":"stderr","text":"/home/runner/micromamba/envs/metpy-cookbook/lib/python3.13/site-packages/cartopy/io/__init__.py:242: DownloadWarning: Downloading: https://naturalearth.s3.amazonaws.com/10m_cultural/ne_10m_admin_1_states_provinces_lakes.zip\n  warnings.warn(f'Downloading: {url}', DownloadWarning)\n"},{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 1500x1200 with 1 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"82e58864dc80d2b32df7b49c91de036a","path":"/metpy-cookbook/build/82e58864dc80d2b32df7b49c91de036a.png"}}}],"key":"B5eD8g5jrp"}],"key":"rTGrS6ktvA"}],"key":"ZeEQ9bYJYS"},"references":{"cite":{"order":[],"data":{}}},"footer":{"navigation":{"prev":{"title":"DIFAX Replication","url":"/notebooks/synoptic/upperair-obs","group":"The MetPy Gallery"},"next":{"title":"Using Xarray for Data read and selection","url":"/notebooks/synoptic/xarray-500hpa-map","group":"The MetPy Gallery"}}},"domain":"http://localhost:3000"}