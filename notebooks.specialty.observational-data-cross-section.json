{"version":2,"kind":"Notebook","sha256":"00b69259e1310e89df341c2138ebdf8699331cd6a8b8eae89cf08d23b31861b0","slug":"notebooks.specialty.observational-data-cross-section","location":"/notebooks/specialty/Observational_Data_Cross_Section.ipynb","dependencies":[],"frontmatter":{"title":"Real Data Cross-Section Example","content_includes_title":false,"kernelspec":{"name":"python3","display_name":"Python 3 (ipykernel)","language":"python"},"authors":[{"nameParsed":{"literal":"MetPy Maintainers","given":"MetPy","family":"Maintainers"},"name":"MetPy Maintainers","id":"contributors-myst-generated-uid-0"}],"open_access":true,"license":{"content":{"id":"CC-BY-4.0","url":"https://creativecommons.org/licenses/by/4.0/","name":"Creative Commons Attribution 4.0 International","free":true,"CC":true},"code":{"id":"Apache-2.0","url":"https://opensource.org/licenses/Apache-2.0","name":"Apache License 2.0","free":true,"osi":true}},"github":"https://github.com/projectpythia/metpy-cookbook","copyright":"2025","affiliations":[{"id":"UAlbany","name":"University at Albany (SUNY)","department":"Atmospheric and Environmental Sciences","url":"https://www.albany.edu/daes"},{"id":"CISL","name":"NSF National Center for Atmospheric Research","department":"Computational and Information Systems Lab","url":"https://www.cisl.ucar.edu"},{"id":"Unidata","name":"NSF Unidata","url":"https://www.unidata.ucar.edu"},{"id":"Argonne","name":"Argonne National Laboratory","department":"Environmental Science Division","url":"https://www.anl.gov/evs"},{"id":"CarbonPlan","name":"CarbonPlan","url":"https://carbonplan.org"},{"id":"NVIDIA","name":"NVIDIA Corporation","url":"https://www.nvidia.com/"}],"settings":{"output_matplotlib_strings":"remove"},"numbering":{"title":{"offset":2}},"edit_url":"https://github.com/projectpythia/metpy-cookbook/blob/main/notebooks/specialty/Observational_Data_Cross_Section.ipynb","exports":[{"format":"ipynb","filename":"Observational_Data_Cross_Section.ipynb","url":"/metpy-cookbook/build/Observational_Data_C-95c4eaaa2263f3721c72e124af5646e0.ipynb"}]},"widgets":{},"mdast":{"type":"root","children":[{"type":"block","kind":"notebook-content","data":{"cell_marker":"\"\"\""},"children":[{"type":"paragraph","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"Cross-section using real data from soundings.","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"YpZxoBoXyS"}],"key":"zfc01WrzxR"},{"type":"paragraph","position":{"start":{"line":6,"column":1},"end":{"line":15,"column":1}},"children":[{"type":"text","value":"This example uses actual soundings to create a cross-section. There are\ntwo functions defined to help interpolate radiosonde observations, which\nwonâ€™t all be at the same level, to a standard grid. The vertical\ninterpolation assumes a log-linear relationship. Each radisosonde\nvertical profile is interpolated first, then the\n","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"YJwb7CrBTb"},{"type":"inlineCode","value":"scipy.interpolate.griddata","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"jGHDAL8h4c"},{"type":"text","value":" function is used to generate a full 2D\n(x, p) grid between each station. Pyproj is used to calculate the\ndistance between each station and the standard atmosphere is used to\nconvert the elevation of each station to a pressure value for plotting\npurposes.","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"aqnWCy9YCH"}],"key":"TTAj7iOvCX"}],"key":"JG9ugz3ekd"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"from datetime import datetime\n\nimport matplotlib.pyplot as plt\nimport metpy.calc as mpcalc\nfrom metpy.units import units\nimport numpy as np\nfrom siphon.simplewebservice.wyoming import WyomingUpperAir","key":"rHKQhdUdBY"},{"type":"output","id":"TPG5Avj3-q0-2aOv4jZ_T","data":[],"key":"NlRqaGjH2d"}],"key":"NeQc6sn92t"},{"type":"block","kind":"notebook-content","data":{"cell_marker":"######################################################################"},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Vertical Interpolation Function","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"U7gzBlaznR"}],"identifier":"vertical-interpolation-function","label":"Vertical Interpolation Function","html_id":"vertical-interpolation-function","implicit":true,"key":"OiAL6fNCp7"},{"type":"paragraph","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"Function interpolates to given pressure level data to set grid.","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"rATWcf0HPM"}],"key":"x3oRZsgpg2"}],"key":"xtf1VBEror"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"def vertical_interpolate(vcoord_data, interp_var, interp_levels):\n    \"\"\"A function to interpolate sounding data from each station to\n    every millibar. Assumes a log-linear relationship.\n\n    Input\n    -----\n    vcoord_data : A 1D array of vertical level values (e.g., pressure from a radiosonde)\n    interp_var : A 1D array of the variable to be interpolated to all pressure levels\n    vcoord_interp_levels : A 1D array containing veritcal levels to interpolate to\n\n    Return\n    ------\n    interp_data : A 1D array that contains the interpolated variable on the interp_levels\n    \"\"\"\n    # Make veritcal coordinate data and grid level log variables\n    lnp = np.log(vcoord_data)\n    lnp_intervals = np.log(interp_levels)\n\n    # Use numpy to interpolate from observed levels to grid levels\n    interp_data = np.interp(lnp_intervals[::-1], lnp[::-1], interp_var[::-1])[::-1]\n\n    # Mask for missing data (generally only near the surface)\n    mask_low = interp_levels > vcoord_data[0]\n    mask_high = interp_levels < vcoord_data[-1]\n    interp_data[mask_low] = interp_var[0]\n    interp_data[mask_high] = interp_var[-1]\n\n    return interp_data","key":"rionbjII3s"},{"type":"output","id":"8GZLi4bKmYODTEVGHre_E","data":[],"key":"Vz9VrLkgMG"}],"key":"O1Euj2nxw2"},{"type":"block","kind":"notebook-content","data":{"cell_marker":"######################################################################"},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Radiosonde Observation Interpolation Function","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"lmOkzzwLyc"}],"identifier":"radiosonde-observation-interpolation-function","label":"Radiosonde Observation Interpolation Function","html_id":"radiosonde-observation-interpolation-function","implicit":true,"key":"CW4uuKOXZ4"},{"type":"paragraph","position":{"start":{"line":4,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"This function interpolates given radiosonde data into a 2D array for all\nmeteorological variables given in dataframe. Returns a dictionary that\nwill have requesite data for plotting a cross section.","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"eXrt4lkSvC"}],"key":"y8HPErBhLa"}],"key":"I9fGIFTtfb"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"def radiosonde_cross_section(stns, data, start=1000, end=100, step=10):\n    \"\"\"This function takes a list of radiosonde observation sites with a\n    dictionary of Pandas Dataframes with the requesite data for each station.\n\n    Input\n    -----\n    stns : List of statition three-letter identifiers\n    data : A dictionary of Pandas Dataframes containing the radiosonde observations\n    for the stations\n    start : interpolation start value, optional (default = 1000 hPa)\n    end : Interpolation end value, optional (default = 100 hPa)\n    step : Interpolation interval, option (default = 10 hPa)\n\n    Return\n    ------\n    cross_section : A dictionary that contains the following variables\n\n        grid_data : An interpolated grid with 100 points between the first and last station,\n        with the corresponding number of vertical points based on start, end, and interval\n        (default is 90)\n        obs_distance : An array of distances between each radiosonde observation location\n        x_grid : A 2D array of horizontal direction grid points\n        p_grid : A 2D array of vertical pressure levels\n        ground_elevation : A representation of the terrain between radiosonde observation sites\n        based on the elevation of each station converted to pressure using the standard\n        atmosphere\n\n    \"\"\"\n    from pyproj import Geod\n    from scipy.interpolate import griddata\n    \n    data_units = {'pressure': 'hPa',\n                  'height': 'meter',\n                  'temperature': 'degC',\n                  'dewpoint': 'degC',\n                  'direction': 'degrees',\n                  'speed': 'knot',\n                  'u_wind': 'knot',\n                  'v_wind': 'knot',\n                  'station': None,\n                  'station_number': None,\n                  'time': None,\n                  'latitude': 'degrees',\n                  'longitude': 'degrees',\n                  'elevation': 'meter',\n                  'pw': 'millimeter'}\n    # Set up vertical grid, largest value first (high pressure nearest surface)\n    vertical_levels = np.arange(start, end-1, -step) * units(data_units['pressure'])\n\n    # Number of vertical levels and stations\n    plevs = len(vertical_levels)\n    nstns = len(stns)\n\n    # Create dictionary of interpolated values and include neccsary attribute data\n    # including lat, lon, and elevation of each station\n    lats = []\n    lons = []\n    elev = []\n    keys = data[stns[0]].keys()[:8]\n    tmp_grid = dict.fromkeys(keys)\n\n    # Interpolate all variables for each radiosonde observation\n    # Temperature, Dewpoint, U-wind, V-wind\n    for key in tmp_grid.keys():\n        tmp_grid[key] = np.empty((nstns, plevs))\n        for station, loc in zip(stns, range(nstns)):\n            if key == 'pressure':\n                lats.append(data[station].latitude[0])\n                lons.append(data[station].longitude[0])\n                elev.append(data[station].elevation[0])\n                tmp_grid[key][loc, :] = vertical_levels\n            else:\n                tmp_grid[key][loc, :] = vertical_interpolate(\n                    data[station]['pressure'].values, data[station][key].values,\n                    vertical_levels.m)\n\n    # Compute distance between each station using Pyproj\n    g = Geod(ellps='sphere')\n    _, _, dist = g.inv(nstns*[lons[0]], nstns*[lats[0]], lons[:], lats[:])\n\n    # Compute sudo ground elevation in pressure from standard atmsophere and the elevation\n    # of each station\n    ground_elevation = mpcalc.height_to_pressure_std(np.array(elev) * units('meters'))\n\n    # Set up grid for 2D interpolation\n    grid = dict.fromkeys(keys)\n    x = np.linspace(dist[0], dist[-1], 100)\n    nx = len(x)\n\n    pp, xx = np.meshgrid(vertical_levels.m, x)\n    pdist, ddist = np.meshgrid(vertical_levels.m, dist)\n\n    # Interpolate to 2D grid using scipy.interpolate.griddata\n    for key in grid.keys():\n        grid[key] = np.empty((nx, plevs)) * units(data_units[key])\n        grid[key][:] = griddata((ddist.flatten(), pdist.flatten()),\n                                tmp_grid[key][:].flatten(),\n                                (xx, pp),\n                                method='cubic') * units(data_units[key])\n\n    # Gather needed data in dictionary for return\n    cross_section = {'grid_data': grid, 'obs_distance': dist * units.meter,\n                     'x_grid': xx * units.meter, 'p_grid': pp * units.hPa, 'elevation': ground_elevation}\n    return cross_section","key":"edgoB65WUU"},{"type":"output","id":"dZY6KBJkj-xGvXulGrLNU","data":[],"key":"T0UEgDA5x2"}],"key":"avq1uOehph"},{"type":"block","kind":"notebook-content","data":{"cell_marker":"######################################################################"},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Stations and Time","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"taaDzTeYjY"}],"identifier":"stations-and-time","label":"Stations and Time","html_id":"stations-and-time","implicit":true,"key":"vrydrG8bYW"},{"type":"paragraph","position":{"start":{"line":4,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Select cross section stations by creating a list of three-letter\nidentifiers and choose a date by creating a datetime object","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"RHq0wgAY8d"}],"key":"YZy3BO3w1H"}],"key":"nh2L1UIaS9"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# A roughly east-west cross section\nstn_list = ['DNR', 'LBF', 'OAX', 'DVN', 'DTX', 'BUF']\n\n# Set a date and hour of your choosing\ndate = datetime(2019, 6, 1, 0)","key":"dnHUQR3ukn"},{"type":"output","id":"rPlcwbIGkrHHLOz4dVVBJ","data":[],"key":"YanSpX2suL"}],"key":"pUtiaTqH6D"},{"type":"block","kind":"notebook-content","data":{"cell_marker":"######################################################################"},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Get Radiosonde Data","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"dioW59zMmR"}],"identifier":"get-radiosonde-data","label":"Get Radiosonde Data","html_id":"get-radiosonde-data","implicit":true,"key":"yYzaHJnJrX"},{"type":"paragraph","position":{"start":{"line":4,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"This example is built around the data from the University of Wyoming\nsounding archive and using the Siphon package to remotely access that\ndata.","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"sXNaDqewum"}],"key":"kXKOPEJYK4"}],"key":"X4MLVmnOL5"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Set up empty dictionary to fill with Wyoming Sounding data\ndf = {}\n\n# Loop over stations to get data and put into dictionary\nfor station in stn_list:\n    df[station] = WyomingUpperAir.request_data(date, station)","key":"YYBtOvzpMi"},{"type":"output","id":"y9vgyyDyoqu2--XudHVlY","data":[],"key":"xwUno5mqoN"}],"key":"H3cdletOrE"},{"type":"block","kind":"notebook-content","data":{"cell_marker":"######################################################################"},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Create Interpolated fields","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"yy4pKq2oTB"}],"identifier":"create-interpolated-fields","label":"Create Interpolated fields","html_id":"create-interpolated-fields","implicit":true,"key":"KsIJnqywF2"},{"type":"paragraph","position":{"start":{"line":4,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Use the function ","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"CFn02lhAAQ"},{"type":"inlineCode","value":"radisonde_cross_section","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"Qa0vOu8GBW"},{"type":"text","value":" to generate the 2D grid (x,\np) for all radiosonde variables including, Temperature, Dewpoint,\nu-component of the wind, and v-component of the wind.","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"QNpsgMbyb2"}],"key":"Vd71QDaO1Y"}],"key":"koD6bdKZpY"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"xsect = radiosonde_cross_section(stn_list, df)","key":"OJjZV7oUeL"},{"type":"output","id":"gXAaJnkI7kZib9hsKlRB9","data":[],"key":"swtjlANejH"}],"key":"Jc4URcPr6h"},{"type":"block","kind":"notebook-content","data":{"cell_marker":"######################################################################"},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Calculate Variables for Plotting","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"cFP6p1pa04"}],"identifier":"calculate-variables-for-plotting","label":"Calculate Variables for Plotting","html_id":"calculate-variables-for-plotting","implicit":true,"key":"rLlGJhdhPB"},{"type":"paragraph","position":{"start":{"line":4,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Use MetPy to calculate common variables for plotting a cross section,\nspecifically potential temperature and mixing ratio","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"F3G3iTqJa7"}],"key":"d1HfuNQu2f"}],"key":"GGvm2VvRAt"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"potemp = mpcalc.potential_temperature(\n    xsect['p_grid'], xsect['grid_data']['temperature'])\n\nrelhum = mpcalc.relative_humidity_from_dewpoint(\n    xsect['grid_data']['temperature'],\n    xsect['grid_data']['dewpoint'])\n\nmixrat = mpcalc.mixing_ratio_from_relative_humidity(xsect['p_grid'],\n                                                    xsect['grid_data']['temperature'],\n                                                    relhum)","key":"D6imlqEORH"},{"type":"output","id":"Gme7RVfCyQvzJ_RDFHSXj","data":[],"key":"lrFasv6wVv"}],"key":"A1aeNHydwc"},{"type":"block","kind":"notebook-content","data":{"cell_marker":"######################################################################"},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Plot Cross Section","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"NtgGh3Z5B3"}],"identifier":"plot-cross-section","label":"Plot Cross Section","html_id":"plot-cross-section","implicit":true,"key":"rDtTNIHYiL"},{"type":"paragraph","position":{"start":{"line":4,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Use standard Matplotlib to plot the now 2D cross section grid using the\ndata from xsect and those calculated above. Additionally, the actualy\nradiosonde wind observations are plotted as barbs on this plot.","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"lIQn02bgGH"}],"key":"qeKwdl7zMV"}],"key":"PFSC4dH87E"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Start Figure, set big size for cross section\nfig = plt.figure(figsize=(17, 11))\n\n# Specify plotting axis (single panel)\nax = plt.subplot(111)\n\n# Set y-scale to be log since pressure decreases exponentially with height\nax.set_yscale('log')\n\n# Set limits, tickmarks, and ticklabels for y-axis\nax.set_ylim([1030, 101])\nax.set_yticks(range(1000, 101, -100))\nax.set_yticklabels(range(1000, 101, -100))\n\n# Invert the y-axis since pressure decreases with increasing height\nax.yaxis_inverted()\n\n# Plot the sudo elevation on the cross section\nax.fill_between(xsect['obs_distance'], xsect['elevation'].m, 1030,\n                where=xsect['elevation'].m <= 1030, facecolor='lightgrey',\n                interpolate=True, zorder=10)\n# Don't plot xticks\nplt.xticks([], [])\n\n# Plot wind barbs for each sounding location\nfor stn, stn_name in zip(range(len(stn_list)), stn_list):\n    ax.axvline(xsect['obs_distance'][stn], ymin=0, ymax=1,\n               linewidth=2, color='blue', zorder=11)\n    ax.text(xsect['obs_distance'][stn], 1100, stn_name, ha='center', color='blue')\n    ax.barbs(xsect['obs_distance'][stn], df[stn_name]['pressure'][::2],\n             df[stn_name]['u_wind'].values[::2, None],\n             df[stn_name]['v_wind'].values[::2, None], zorder=15)\n\n# Plot smoothed potential temperature grid (K)\ncs = ax.contour(xsect['x_grid'], xsect['p_grid'], mpcalc.smooth_gaussian(potemp, 1),\n                range(0, 500, 5), colors='red')\nax.clabel(cs, fmt='%i')\n\n# Plot smoothed mixing ratio grid (g/kg)\ncs = ax.contour(xsect['x_grid'], xsect['p_grid'], mpcalc.smooth_gaussian(mixrat*1000, 2),\n                range(0, 41, 2), colors='tab:green', linestyles='dotted')\nax.clabel(cs, fmt='%i')\n\n# Add some informative titles\nplt.title('Cross-Section from DNR to BUF Potential Temp. '\n          '(K; red) and Mix. Rat. (g/kg; green)', loc='left')\nplt.title(date, loc='right');","key":"B9j5uIamTG"},{"type":"output","id":"e8kdsaqZD-BOt8DCwFPBm","data":[{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 1700x1100 with 1 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"aeb72d85d8c02f698e93e4a8cbe54020","path":"/metpy-cookbook/build/aeb72d85d8c02f698e93e4a8cbe54020.png"}}}],"key":"PlYp5zvgmp"}],"key":"wiBGPlZ1nM"}],"key":"iSQTgaiBwb"},"references":{"cite":{"order":[],"data":{}}},"footer":{"navigation":{"prev":{"title":"Hovmoller Diagram Example","url":"/notebooks/specialty/hovmoller-diagram","group":"The MetPy Gallery"},"next":{"title":"Smoothing Contours","url":"/notebooks/specialty/smoothing-contours","group":"The MetPy Gallery"}}},"domain":"http://localhost:3000"}