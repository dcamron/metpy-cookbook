{"version":2,"kind":"Notebook","sha256":"c1c90fa890ff1211f266f9d2bd68700c6328671fd9db3a59f040ddee656c1650","slug":"notebooks.synoptic.hpa-absolute-vorticity-winds","location":"/notebooks/synoptic/500hPa_Absolute_Vorticity_winds.ipynb","dependencies":[],"frontmatter":{"title":"500 hPa Geopotential Heights, Absolute Vorticity, and Winds","content_includes_title":false,"kernelspec":{"name":"python3","display_name":"Python 3 (ipykernel)","language":"python"},"authors":[{"nameParsed":{"literal":"MetPy Maintainers","given":"MetPy","family":"Maintainers"},"name":"MetPy Maintainers","id":"contributors-myst-generated-uid-0"}],"open_access":true,"license":{"content":{"id":"CC-BY-4.0","url":"https://creativecommons.org/licenses/by/4.0/","name":"Creative Commons Attribution 4.0 International","free":true,"CC":true},"code":{"id":"Apache-2.0","url":"https://opensource.org/licenses/Apache-2.0","name":"Apache License 2.0","free":true,"osi":true}},"github":"https://github.com/projectpythia/metpy-cookbook","copyright":"2025","affiliations":[{"id":"UAlbany","name":"University at Albany (SUNY)","department":"Atmospheric and Environmental Sciences","url":"https://www.albany.edu/daes"},{"id":"CISL","name":"NSF National Center for Atmospheric Research","department":"Computational and Information Systems Lab","url":"https://www.cisl.ucar.edu"},{"id":"Unidata","name":"NSF Unidata","url":"https://www.unidata.ucar.edu"},{"id":"Argonne","name":"Argonne National Laboratory","department":"Environmental Science Division","url":"https://www.anl.gov/evs"},{"id":"CarbonPlan","name":"CarbonPlan","url":"https://carbonplan.org"},{"id":"NVIDIA","name":"NVIDIA Corporation","url":"https://www.nvidia.com/"}],"settings":{"output_matplotlib_strings":"remove"},"numbering":{"title":{"offset":2}},"edit_url":"https://github.com/projectpythia/metpy-cookbook/blob/main/notebooks/synoptic/500hPa_Absolute_Vorticity_winds.ipynb","exports":[{"format":"ipynb","filename":"500hPa_Absolute_Vorticity_winds.ipynb","url":"/metpy-cookbook/build/500hPa_Absolute_Vort-13b54491299257f83bcbe46bafe87702.ipynb"}]},"widgets":{},"mdast":{"type":"root","children":[{"type":"block","kind":"notebook-content","data":{"cell_marker":"\"\"\""},"children":[{"type":"paragraph","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"Classic 500-hPa absolute vorticity plot using NAM analysis file.","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"KU8oH5HqY9"}],"key":"t0xlA79QAU"},{"type":"paragraph","position":{"start":{"line":6,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"This example uses example data from the NAM analysis for 12 UTC 31\nOctober 2016 and uses xarray as the main read source with using MetPy to\ncalculate absolute vorticity and wind speed with geographic plotting\nusing Cartopy for a CONUS view of the 500-hPa geopotential heights,\nabsolute vorticity, and wind barbs.","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"WLMvhyk8po"}],"key":"BoYk6JyzzX"},{"type":"paragraph","position":{"start":{"line":12,"column":1},"end":{"line":15,"column":1}},"children":[{"type":"text","value":"Note: NAM winds are grid relative and this example introduces a simple\nfunction to convert the grid-relative wind components to an\nearth-relative (north/east oriented winds) to enable easier plotting of\nwind barbs and calculation of absolute vorticity.","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"key":"RoldN3mrX4"}],"key":"mp7useWOo5"}],"key":"r34jv47SE7"},{"type":"block","kind":"notebook-content","data":{"cell_marker":"######################################################################"},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Import the needed modules","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"SKH8WigVng"}],"key":"yKY8yxJiF7"}],"key":"yZSC5gWOIt"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"import cartopy.crs as ccrs\nimport cartopy.feature as cfeature\nimport matplotlib.pyplot as plt\nimport metpy.calc as mpcalc\nfrom metpy.units import units\nimport numpy as np\nimport xarray as xr","key":"adMTqLp5aY"},{"type":"output","id":"CGFBK7__9e_tHwUGUjo1L","data":[],"key":"IWuPVqxapO"}],"key":"dBh0YakaWE"},{"type":"block","kind":"notebook-content","data":{"cell_marker":"######################################################################"},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Function to Compute Earth-Relative Winds","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"pin5TVsPkz"}],"identifier":"function-to-compute-earth-relative-winds","label":"Function to Compute Earth-Relative Winds","html_id":"function-to-compute-earth-relative-winds","implicit":true,"key":"Fkf6h1mjBQ"},{"type":"paragraph","position":{"start":{"line":4,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"This function takes a data array with relevant information about the\nprojection of the wind component data, along with the grid-relative\ncomponents of the wind. It outputs the earth-relative components of the\nwind.","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"HObg93Og4f"}],"key":"zwkg9A4h9u"}],"key":"yBk9ZEuIua"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"def earth_relative_wind_components(ugrd, vgrd):\n    \"\"\"Calculate the north-relative components of the\n    wind from the grid-relative components using Cartopy\n    transform_vectors.\n\n    Parameters\n    ----------\n        ugrd : Xarray DataArray (M, N)\n            grid relative u-component of the wind\n        vgrd : Xarray DataArray (M, N)\n            grid relative v-component of the wind\n\n    Returns\n    -------\n        unr, vnr : tuple of array-like Quantity\n            The north-relative wind components in the X (East-West)\n            and Y (North-South) directions, respectively.\n    \"\"\"\n    if 'metpy_crs' not in ugrd.coords:\n        raise ValueError('No CRS in coordinate, be sure to'\n                         'use the MetPy accessor parse_cf()')\n\n    data_crs = ugrd.metpy.cartopy_crs\n\n    x = ugrd.x.values\n    y = ugrd.y.values\n\n    xx, yy = np.meshgrid(x, y)\n\n    ut, vt = ccrs.PlateCarree().transform_vectors(data_crs, xx, yy,\n                                                  ugrd.values, vgrd.values)\n\n    # Make a copy of u and v component DataArrays\n    uer = ugrd.copy()\n    ver = vgrd.copy()\n\n    # Update values with transformed winds\n    uer.values = ut\n    ver.values = vt\n\n    return uer, ver\n","key":"JoVB95ei1U"},{"type":"output","id":"cZUGqW3gx7LQfQ1k6-woZ","data":[],"key":"KRDu5ydHyA"}],"key":"OZtnNDmiCd"},{"type":"block","kind":"notebook-content","data":{"cell_marker":"######################################################################"},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"The following code reads the example data using the xarray open_dataset\nfunction and prints the coordinate values that are associated with the\nvarious variables contained within the file","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"QTdTTmYcYv"}],"key":"cc7hVdrDRx"}],"key":"cgCDykhnEy"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"ds = xr.open_dataset('https://thredds.ucar.edu/thredds/dodsC/casestudies/'\n                     'python-gallery/NAM_20161031_1200.nc').metpy.parse_cf()","key":"CS4ihp6kp7"},{"type":"output","id":"MJPQzj3Agm1-17lBSNJxa","data":[],"key":"yAKQYOq3E3"}],"key":"LqTxOpo4Cd"},{"type":"block","kind":"notebook-content","data":{"cell_marker":"######################################################################"},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Data Retrieval","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"H3fZFkX6fX"}],"identifier":"data-retrieval","label":"Data Retrieval","html_id":"data-retrieval","implicit":true,"key":"m12OuN8EH1"},{"type":"paragraph","position":{"start":{"line":4,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"This code retrieves the necessary data from the file and completes some\nsmoothing of the geopotential height and wind fields using the SciPy\nfunction gaussian_filter. A nicely formated valid time (vtime) variable\nis also created","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"vzOmPY2PjV"}],"key":"QYh6LZsqK3"}],"key":"DdDNeKVlNH"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Grab lat/lon values (NAM will be 2D)\nlats = ds.lat.data\nlons = ds.lon.data\n\n# Grab x, y data and make 2D for wind component plotting because\n# u- and v-components are grid relative\nx = ds['u-component_of_wind_isobaric'].x\ny = ds['u-component_of_wind_isobaric'].y\n\nxx, yy = np.meshgrid(x, y)\n\n# Grab Cartopy CRS from metadata for plotting wind barbs\ndatacrs = ds['u-component_of_wind_isobaric'].metpy.cartopy_crs\n\n# Select and grab 500-hPa geopotential heights and smooth with n-point smoother\nlevel = 500 * units.hPa\nhght_500 = mpcalc.smooth_n_point(ds.Geopotential_height_isobaric.metpy.sel(\n    vertical=level).squeeze(), 9, 50)\n\n# Select and grab 500-hPa wind components\nuwnd_500 = ds['u-component_of_wind_isobaric'].metpy.sel(\n    vertical=level).squeeze().metpy.assign_latitude_longitude()\nvwnd_500 = ds['v-component_of_wind_isobaric'].metpy.sel(\n    vertical=level).squeeze().metpy.assign_latitude_longitude()\n\n# Compute north-relative wind components for plotting purposes\nuwnd_er, vwnd_er = earth_relative_wind_components(uwnd_500, vwnd_500)\n\n# Smooth wind components as desired\nuwnd_er = mpcalc.smooth_n_point(uwnd_er, 9, 50)\nvwnd_er = mpcalc.smooth_n_point(vwnd_er, 9, 50)\n\n# Create a clean datetime object for plotting based on time\n# of Geopotential heights\nvtime = ds.time.data[0].astype('datetime64[ms]').astype('O')","key":"UkXvH1T1PO"},{"type":"output","id":"3ZGjhxdE4-wOfw3zEFW8p","data":[],"key":"Tg0aSLDGrh"}],"key":"LUZysQJqWO"},{"type":"block","kind":"notebook-content","data":{"cell_marker":"######################################################################"},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"MetPy Absolute Vorticity Calculation","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"vd638pwNrX"}],"identifier":"metpy-absolute-vorticity-calculation","label":"MetPy Absolute Vorticity Calculation","html_id":"metpy-absolute-vorticity-calculation","implicit":true,"key":"ImPOTVAUx7"},{"type":"paragraph","position":{"start":{"line":4,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"This code calculates ","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"bKGFxsAeUo"},{"type":"inlineCode","value":"absolute_vorticity()","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"NRovhsDOaW"},{"type":"text","value":"\nusing the wind components and makes use of the\nxarray data object features to complete the necessary\ngrid-aware calculation.","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"zLiS4QWFkD"}],"key":"D4sDwpn8hL"}],"key":"UDdnnOXyER"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Calculate absolute vorticity from MetPy function\navor_500 = mpcalc.absolute_vorticity(uwnd_er, vwnd_er)","key":"AGYjwG5cBe"},{"type":"output","id":"QCWpfUru9dx5fi0yGqLiG","data":[],"key":"Um5h9mba6X"}],"key":"jYmE9b5x1X"},{"type":"block","kind":"notebook-content","data":{"cell_marker":"######################################################################"},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Map Creation","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"DvYheZfHJh"}],"identifier":"map-creation","label":"Map Creation","html_id":"map-creation","implicit":true,"key":"HQjXLl54jU"},{"type":"paragraph","position":{"start":{"line":4,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"This next set of code creates the plot and draws contours on a Lambert\nConformal map centered on -100 E longitude. The main view is over the\nCONUS with geopotential heights contoured every 60 m and absolute\nvorticity colorshaded (","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"h5tQ18VsMm"},{"type":"inlineCode","value":"*10^5","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"IK2KxwdbTF"},{"type":"text","value":").","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"GcTO76OxqW"}],"key":"zyMXd1xUwh"}],"key":"O5cQAKr0BV"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Set up the projection that will be used for plotting\nmapcrs = ccrs.LambertConformal(central_longitude=-100, central_latitude=35,\n                               standard_parallels=(30, 60))\n\n# Set up the projection of the data;\n# if lat/lon then PlateCarree is what you want\ndatacrs = ccrs.PlateCarree()\n\n# Start the figure and create plot axes with proper projection\nfig = plt.figure(1, figsize=(14, 12))\nax = plt.subplot(111, projection=mapcrs)\nax.set_extent([-130, -72, 20, 55], ccrs.PlateCarree())\n\n# Add geopolitical boundaries for map reference\nax.add_feature(cfeature.COASTLINE.with_scale('50m'))\nax.add_feature(cfeature.STATES.with_scale('50m'))\n\n# Absolute Vorticity colors\n# Use two different colormaps from matplotlib and combine into one color set\nclevs_500_avor = list(range(-8, 1, 1))+list(range(8, 46, 1))\ncolors1 = plt.cm.YlOrRd(np.linspace(0, 1, 48))\ncolors2 = plt.cm.BuPu(np.linspace(0.5, 0.75, 8))\ncolors = np.vstack((colors2, (1, 1, 1, 1), colors1))\n\n# Plot absolute vorticity values (multiplying by 10^5 to scale appropriately)\ncf = ax.contourf(lons, lats, avor_500*1e5, clevs_500_avor, colors=colors,\n                 extend='max', transform=datacrs)\ncb = plt.colorbar(cf, orientation='horizontal', pad=0, aspect=50,\n                  extendrect=True)\ncb.set_label('Abs. Vorticity ($s^{-1}$)')\n\n# Plot 500-hPa Geopotential Heights in meters\nclevs_500_hght = np.arange(0, 8000, 60)\ncs = ax.contour(lons, lats, hght_500, clevs_500_hght, colors='black',\n                transform=datacrs)\nplt.clabel(cs, fmt='%d')\n\n# Set up a 2D slice to reduce the number of wind barbs plotted (every 20th)\nwind_slice = (slice(None, None, 20), slice(None, None, 20))\nax.barbs(lons[wind_slice], lats[wind_slice],\n         uwnd_er.metpy.convert_units('kt')[wind_slice].values,\n         vwnd_er[wind_slice].metpy.convert_units('kt').values,\n         pivot='middle', color='black', transform=datacrs)\n\n# Plot two titles, one on right and left side\nplt.title('500-hPa NAM Geopotential Heights (m)'\n          ' and Wind Barbs (kt)', loc='left')\nplt.title(f'Valid Time: {vtime}', loc='right')","key":"QAUGV2LqzD"},{"type":"output","id":"T-OBYV7oIx-JBiINs-aPZ","data":[{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 1400x1200 with 2 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"e188745d27cae5b9fbe382dbaa83f0fc","path":"/metpy-cookbook/build/e188745d27cae5b9fbe382dbaa83f0fc.png"}}}],"key":"RSow700oWu"}],"key":"JMkOD3275p"}],"key":"PWABT8O4Ai"},"references":{"cite":{"order":[],"data":{}}},"footer":{"navigation":{"prev":{"title":"A 250-hPa Hemispheric Map using Python","url":"/notebooks/synoptic/hpa-hemispheric-plot","group":"The MetPy Gallery"},"next":{"title":"500 hPa Vorticity Advection","url":"/notebooks/synoptic/hpa-vorticity-advection","group":"The MetPy Gallery"}}},"domain":"http://localhost:3000"}